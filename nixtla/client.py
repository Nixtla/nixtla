# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

import httpx

from .core.api_error import ApiError
from .core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .core.jsonable_encoder import jsonable_encoder
from .core.pydantic_utilities import pydantic_v1
from .core.remove_none_from_dict import remove_none_from_dict
from .core.request_options import RequestOptions
from .errors.unprocessable_entity_error import UnprocessableEntityError
from .types.http_validation_error import HttpValidationError
from .types.multi_series_anomaly import MultiSeriesAnomaly
from .types.multi_series_cross_validation import MultiSeriesCrossValidation
from .types.multi_series_forecast import MultiSeriesForecast
from .types.multi_series_insample_forecast import MultiSeriesInsampleForecast
from .types.single_series_forecast import SingleSeriesForecast
from .types.single_series_insample_forecast import SingleSeriesInsampleForecast

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class Nixtla:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propogate to these functions.

    Parameters:
        - base_url: str. The base url to use for requests from the client.

        - token: typing.Union[str, typing.Callable[[], str]].

        - timeout: typing.Optional[float]. The timeout to be used, in seconds, for requests by default the timeout is 60 seconds, unless a custom httpx client is used, in which case a default is not set.

        - follow_redirects: typing.Optional[bool]. Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

        - httpx_client: typing.Optional[httpx.Client]. The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.
    ---
    from nixtla.client import Nixtla

    client = Nixtla(
        token="YOUR_TOKEN",
        base_url="https://yourhost.com/path/to/api",
    )
    """

    def __init__(
        self,
        *,
        base_url: str,
        token: typing.Union[str, typing.Callable[[], str]],
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = None,
        httpx_client: typing.Optional[httpx.Client] = None,
    ):
        _defaulted_timeout = timeout if timeout is not None else 60 if httpx_client is None else None
        self._client_wrapper = SyncClientWrapper(
            base_url=base_url,
            token=token,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.Client(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.Client(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )

    def validate_token(self, *, request_options: typing.Optional[RequestOptions] = None) -> typing.Any:
        """
        Parameters:
            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from nixtla.client import Nixtla

        client = Nixtla(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.validate_token()
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "validate_token"),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))
            if request_options is not None
            else None,
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(typing.Any, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def validate_token_front(self, *, request_options: typing.Optional[RequestOptions] = None) -> typing.Any:
        """
        Parameters:
            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from nixtla.client import Nixtla

        client = Nixtla(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.validate_token_front()
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "validate_token_front"),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))
            if request_options is not None
            else None,
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(typing.Any, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def health_health_get(self, *, request_options: typing.Optional[RequestOptions] = None) -> typing.Any:
        """
        Check if server is healthy. Used by the readiness probe to check server is healthy.

        Parameters:
            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from nixtla.client import Nixtla

        client = Nixtla(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.health_health_get()
        """
        _response = self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "health"),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(typing.Any, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def forecast(
        self, *, request: SingleSeriesForecast, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Any:
        """
        This endpoint predicts the future values of a single time series based on the provided data. It takes a JSON as an input containing information like the series frequency and historical data. (See below for a full description of the parameters.) The response contains the predicted values based on the input arguments. Get your token for private beta at https://dashboard.nixtla.io

        Parameters:
            - request: SingleSeriesForecast.

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from nixtla import SingleSeriesForecast
        from nixtla.client import Nixtla

        client = Nixtla(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.forecast(
            request=SingleSeriesForecast(
                fewshot_steps=0,
                model="timegpt-1",
                freq="D",
                level=[90],
                fh=7,
                y={
                    "2015-12-02": 8.71177264560569,
                    "2015-12-03": 8.05610965954506,
                    "2015-12-04": 8.08147504013705,
                    "2015-12-05": 7.45876269238096,
                    "2015-12-06": 8.01400499477946,
                    "2015-12-07": 8.49678638163858,
                    "2015-12-08": 7.98104975966596,
                    "2015-12-09": 7.77779262633883,
                    "2015-12-10": 8.2602342916073,
                    "2015-12-11": 7.86633892304654,
                    "2015-12-12": 7.31055015853442,
                    "2015-12-13": 7.71824095195932,
                    "2015-12-14": 8.31947369244219,
                    "2015-12-15": 8.23668532271246,
                    "2015-12-16": 7.80751004221619,
                    "2015-12-17": 7.59186171488993,
                    "2015-12-18": 7.52886925664225,
                    "2015-12-19": 7.17165682276851,
                    "2015-12-20": 7.89133075766189,
                    "2015-12-21": 8.36007143564403,
                    "2015-12-22": 8.11042723757502,
                    "2015-12-23": 7.77527584648686,
                    "2015-12-24": 7.34729970074316,
                    "2015-12-25": 7.30182234213793,
                    "2015-12-26": 7.12044437239249,
                    "2015-12-27": 8.87877607170755,
                    "2015-12-28": 9.25061821847475,
                    "2015-12-29": 9.24792513230345,
                    "2015-12-30": 8.39140318535794,
                    "2015-12-31": 8.00469951054955,
                    "2016-01-01": 7.58933582317062,
                    "2016-01-02": 7.82524529143177,
                    "2016-01-03": 8.24931374626064,
                    "2016-01-04": 9.29514097366865,
                    "2016-01-05": 8.56826646160024,
                    "2016-01-06": 8.35255436947459,
                    "2016-01-07": 8.29579811063615,
                    "2016-01-08": 8.29029259122431,
                    "2016-01-09": 7.78572089653462,
                    "2016-01-10": 8.28172399041139,
                    "2016-01-11": 8.4707303170059,
                    "2016-01-12": 8.13505390861157,
                    "2016-01-13": 8.06714903991011,
                },
                x={
                    "2015-12-02": [0.47914512134886633, 0.15759798422978488],
                    "2015-12-03": [0.3871397019785533, 0.35449477858215317],
                    "2015-12-04": [0.9056171938719492, 0.3180404540017956],
                    "2015-12-05": [0.8341924745940501, 0.1345432562146388],
                    "2015-12-06": [0.9345407030264767, 0.688343987845517],
                    "2015-12-07": [0.48729867539182836, 0.4078489909891331],
                    "2015-12-08": [0.372592361808496, 0.9657378388402957],
                    "2015-12-09": [0.8246299079349072, 0.39136849723836475],
                    "2015-12-10": [0.10775659682068173, 0.7158552999785821],
                    "2015-12-11": [0.8714315742323742, 0.6959379478245031],
                    "2015-12-12": [0.983802256917285, 0.5028086048974361],
                    "2015-12-13": [0.1637276788158426, 0.010905206265749978],
                    "2015-12-14": [0.02385161083272247, 0.6959627057263087],
                    "2015-12-15": [0.6601897150570875, 0.33970973534268967],
                    "2015-12-16": [0.050941494525972186, 0.11738703133470063],
                    "2015-12-17": [0.3959302454356002, 0.8728419968758135],
                    "2015-12-18": [0.5860088140443799, 0.5731410710012429],
                    "2015-12-19": [0.3857084524732245, 0.7271245785381963],
                    "2015-12-20": [0.37342450516631565, 0.17888199947035843],
                    "2015-12-21": [0.6981516773360145, 0.6983330714339858],
                    "2015-12-22": [0.08978675718655482, 0.45744085066175544],
                    "2015-12-23": [0.6879810190692012, 0.7650472745914928],
                    "2015-12-24": [0.3780817922426982, 0.26541942400861085],
                    "2015-12-25": [0.36377456228425953, 0.631351987243267],
                    "2015-12-26": [0.8858056528262828, 0.9929861335485208],
                    "2015-12-27": [0.7655012724712326, 0.8089415357086998],
                    "2015-12-28": [0.7802318350754168, 0.7507408790195511],
                    "2015-12-29": [0.21655713897782725, 0.39237400153061963],
                    "2015-12-30": [0.1424758142857997, 0.8902624055897677],
                    "2015-12-31": [0.643477187971131, 0.8789182584456643],
                    "2016-01-01": [0.9369855677078311, 0.609162462729402],
                    "2016-01-02": [0.0002858612957059581, 0.23697970143653724],
                    "2016-01-03": [0.16280370690002544, 0.5975722202856767],
                    "2016-01-04": [0.49310729499396044, 0.30125004072447636],
                    "2016-01-05": [0.6780776618690909, 0.06790772949375545],
                    "2016-01-06": [0.14663698589706664, 0.8886978154852969],
                    "2016-01-07": [0.4422143343461119, 0.9217301518957838],
                    "2016-01-08": [0.5100515329575456, 0.8433884706466771],
                    "2016-01-09": [0.9304379891825107, 0.7132184980129253],
                    "2016-01-10": [0.7611198221207496, 0.08381565314231354],
                    "2016-01-11": [0.4876994455855225, 0.6305043963566345],
                    "2016-01-12": [0.3807596362774567, 0.44155005068612574],
                    "2016-01-13": [0.022917032041831265, 0.8746566219855559],
                    "2016-01-14": [0.06744988617005221, 0.4867830182954117],
                    "2016-01-15": [0.2876166788506098, 0.34029767862172733],
                    "2016-01-16": [0.03136920601698312, 0.7473159671597568],
                    "2016-01-17": [0.8903106284115768, 0.6144929198235487],
                    "2016-01-18": [0.7692999747639573, 0.7318695022998711],
                    "2016-01-19": [0.8265506190532937, 0.8094527295780038],
                    "2016-01-20": [0.9902157088998235, 0.22917399968565122],
                },
                clean_ex_first=True,
            ),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "forecast"),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder(request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def historic_forecast(
        self, *, request: SingleSeriesInsampleForecast, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Any:
        """
        Based on the provided data, this endpoint predicts time series data for the in-sample period (historical period). It takes a JSON as an input, including information like the series frequency and the historical data. (See below for a full description of the parameters.) The response contains the predicted values for the historical period. Usually useful for anomaly detection. Get your token for private beta at https://dashboard.nixtla.io.

        Parameters:
            - request: SingleSeriesInsampleForecast.

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from nixtla import SingleSeriesInsampleForecast
        from nixtla.client import Nixtla

        client = Nixtla(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.historic_forecast(
            request=SingleSeriesInsampleForecast(
                model="timegpt-1",
                freq="D",
                level=[90],
                y={
                    "2015-12-02": 8.71177264560569,
                    "2015-12-03": 8.05610965954506,
                    "2015-12-04": 8.08147504013705,
                    "2015-12-05": 7.45876269238096,
                    "2015-12-06": 8.01400499477946,
                    "2015-12-07": 8.49678638163858,
                    "2015-12-08": 7.98104975966596,
                    "2015-12-09": 7.77779262633883,
                    "2015-12-10": 8.2602342916073,
                    "2015-12-11": 7.86633892304654,
                    "2015-12-12": 7.31055015853442,
                    "2015-12-13": 7.71824095195932,
                    "2015-12-14": 8.31947369244219,
                    "2015-12-15": 8.23668532271246,
                    "2015-12-16": 7.80751004221619,
                    "2015-12-17": 7.59186171488993,
                    "2015-12-18": 7.52886925664225,
                    "2015-12-19": 7.17165682276851,
                    "2015-12-20": 7.89133075766189,
                    "2015-12-21": 8.36007143564403,
                    "2015-12-22": 8.11042723757502,
                    "2015-12-23": 7.77527584648686,
                    "2015-12-24": 7.34729970074316,
                    "2015-12-25": 7.30182234213793,
                    "2015-12-26": 7.12044437239249,
                    "2015-12-27": 8.87877607170755,
                    "2015-12-28": 9.25061821847475,
                    "2015-12-29": 9.24792513230345,
                    "2015-12-30": 8.39140318535794,
                    "2015-12-31": 8.00469951054955,
                    "2016-01-01": 7.58933582317062,
                    "2016-01-02": 7.82524529143177,
                    "2016-01-03": 8.24931374626064,
                    "2016-01-04": 9.29514097366865,
                    "2016-01-05": 8.56826646160024,
                    "2016-01-06": 8.35255436947459,
                    "2016-01-07": 8.29579811063615,
                    "2016-01-08": 8.29029259122431,
                    "2016-01-09": 7.78572089653462,
                    "2016-01-10": 8.28172399041139,
                    "2016-01-11": 8.4707303170059,
                    "2016-01-12": 8.13505390861157,
                    "2016-01-13": 8.06714903991011,
                },
                clean_ex_first=True,
            ),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "historic_forecast"),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder(request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def forecast_multi_series(
        self, *, request: MultiSeriesForecast, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Any:
        """
        Based on the provided data, this endpoint predicts the future values of multiple time series at once. It takes a JSON as an input containing information like the series frequency and historical data. (See below for a full description of the parameters.) The response contains the predicted values for each series based on the input arguments. Get your token for private beta at https://dashboard.nixtla.io.

        Parameters:
            - request: MultiSeriesForecast.

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from nixtla import MultiSeriesForecast
        from nixtla.client import Nixtla

        client = Nixtla(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.forecast_multi_series(
            request=MultiSeriesForecast(),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "forecast_multi_series"),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder(request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def historic_forecast_multi_series(
        self, *, request: MultiSeriesInsampleForecast, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Any:
        """
        Based on the provided data, this endpoint predicts the in-sample period (historical period) values of multiple time series at once. It takes a JSON as an input containing information like the series frequency and historical data. (See below for a full description of the parameters.) The response contains the predicted values for the historical period. Usually useful for anomaly detection. Get your token for private beta at https://dashboard.nixtla.io.

        Parameters:
            - request: MultiSeriesInsampleForecast.

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from nixtla import MultiSeriesInsampleForecast
        from nixtla.client import Nixtla

        client = Nixtla(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.historic_forecast_multi_series(
            request=MultiSeriesInsampleForecast(
                model="timegpt-1",
                freq="D",
                level=[90],
                y={
                    "columns": {"0": "unique_id", "1": "ds", "2": "y"},
                    "data": {
                        "0": {
                            "0": "PeytonManning",
                            "1": "2015-12-02",
                            "2": 8.71177264560569,
                        },
                        "1": {
                            "0": "PeytonManning",
                            "1": "2015-12-03",
                            "2": 8.05610965954506,
                        },
                        "2": {
                            "0": "PeytonManning",
                            "1": "2015-12-04",
                            "2": 8.08147504013705,
                        },
                        "3": {
                            "0": "PeytonManning",
                            "1": "2015-12-05",
                            "2": 7.45876269238096,
                        },
                        "4": {
                            "0": "PeytonManning",
                            "1": "2015-12-06",
                            "2": 8.01400499477946,
                        },
                        "5": {
                            "0": "PeytonManning",
                            "1": "2015-12-07",
                            "2": 8.49678638163858,
                        },
                        "6": {
                            "0": "PeytonManning",
                            "1": "2015-12-08",
                            "2": 7.98104975966596,
                        },
                        "7": {
                            "0": "PeytonManning",
                            "1": "2015-12-09",
                            "2": 7.77779262633883,
                        },
                        "8": {
                            "0": "PeytonManning",
                            "1": "2015-12-10",
                            "2": 8.2602342916073,
                        },
                        "9": {
                            "0": "PeytonManning",
                            "1": "2015-12-11",
                            "2": 7.86633892304654,
                        },
                        "10": {
                            "0": "PeytonManning",
                            "1": "2015-12-12",
                            "2": 7.31055015853442,
                        },
                        "11": {
                            "0": "PeytonManning",
                            "1": "2015-12-13",
                            "2": 7.71824095195932,
                        },
                        "12": {
                            "0": "PeytonManning",
                            "1": "2015-12-14",
                            "2": 8.31947369244219,
                        },
                        "13": {
                            "0": "PeytonManning",
                            "1": "2015-12-15",
                            "2": 8.23668532271246,
                        },
                        "14": {
                            "0": "PeytonManning",
                            "1": "2015-12-16",
                            "2": 7.80751004221619,
                        },
                        "15": {
                            "0": "PeytonManning",
                            "1": "2015-12-17",
                            "2": 7.59186171488993,
                        },
                        "16": {
                            "0": "PeytonManning",
                            "1": "2015-12-18",
                            "2": 7.52886925664225,
                        },
                        "17": {
                            "0": "PeytonManning",
                            "1": "2015-12-19",
                            "2": 7.17165682276851,
                        },
                        "18": {
                            "0": "PeytonManning",
                            "1": "2015-12-20",
                            "2": 7.89133075766189,
                        },
                        "19": {
                            "0": "PeytonManning",
                            "1": "2015-12-21",
                            "2": 8.36007143564403,
                        },
                        "20": {
                            "0": "PeytonManning",
                            "1": "2015-12-22",
                            "2": 8.11042723757502,
                        },
                        "21": {
                            "0": "PeytonManning",
                            "1": "2015-12-23",
                            "2": 7.77527584648686,
                        },
                        "22": {
                            "0": "PeytonManning",
                            "1": "2015-12-24",
                            "2": 7.34729970074316,
                        },
                        "23": {
                            "0": "PeytonManning",
                            "1": "2015-12-25",
                            "2": 7.30182234213793,
                        },
                        "24": {
                            "0": "PeytonManning",
                            "1": "2015-12-26",
                            "2": 7.12044437239249,
                        },
                        "25": {
                            "0": "PeytonManning",
                            "1": "2015-12-27",
                            "2": 8.87877607170755,
                        },
                        "26": {
                            "0": "PeytonManning",
                            "1": "2015-12-28",
                            "2": 9.25061821847475,
                        },
                        "27": {
                            "0": "PeytonManning",
                            "1": "2015-12-29",
                            "2": 9.24792513230345,
                        },
                        "28": {
                            "0": "PeytonManning",
                            "1": "2015-12-30",
                            "2": 8.39140318535794,
                        },
                        "29": {
                            "0": "PeytonManning",
                            "1": "2015-12-31",
                            "2": 8.00469951054955,
                        },
                        "30": {
                            "0": "PeytonManning",
                            "1": "2016-01-01",
                            "2": 7.58933582317062,
                        },
                        "31": {
                            "0": "PeytonManning",
                            "1": "2016-01-02",
                            "2": 7.82524529143177,
                        },
                        "32": {
                            "0": "PeytonManning",
                            "1": "2016-01-03",
                            "2": 8.24931374626064,
                        },
                        "33": {
                            "0": "PeytonManning",
                            "1": "2016-01-04",
                            "2": 9.29514097366865,
                        },
                        "34": {
                            "0": "PeytonManning",
                            "1": "2016-01-05",
                            "2": 8.56826646160024,
                        },
                        "35": {
                            "0": "PeytonManning",
                            "1": "2016-01-06",
                            "2": 8.35255436947459,
                        },
                        "36": {
                            "0": "PeytonManning",
                            "1": "2016-01-07",
                            "2": 8.29579811063615,
                        },
                        "37": {
                            "0": "PeytonManning",
                            "1": "2016-01-08",
                            "2": 8.29029259122431,
                        },
                        "38": {
                            "0": "PeytonManning",
                            "1": "2016-01-09",
                            "2": 7.78572089653462,
                        },
                        "39": {
                            "0": "PeytonManning",
                            "1": "2016-01-10",
                            "2": 8.28172399041139,
                        },
                        "40": {
                            "0": "PeytonManning",
                            "1": "2016-01-11",
                            "2": 8.4707303170059,
                        },
                        "41": {
                            "0": "PeytonManning",
                            "1": "2016-01-12",
                            "2": 8.13505390861157,
                        },
                        "42": {
                            "0": "PeytonManning",
                            "1": "2016-01-13",
                            "2": 8.06714903991011,
                        },
                        "43": {
                            "0": "TomBrady",
                            "1": "2015-12-02",
                            "2": 8.71177264560569,
                        },
                        "44": {
                            "0": "TomBrady",
                            "1": "2015-12-03",
                            "2": 8.05610965954506,
                        },
                        "45": {
                            "0": "TomBrady",
                            "1": "2015-12-04",
                            "2": 8.08147504013705,
                        },
                        "46": {
                            "0": "TomBrady",
                            "1": "2015-12-05",
                            "2": 7.45876269238096,
                        },
                        "47": {
                            "0": "TomBrady",
                            "1": "2015-12-06",
                            "2": 8.01400499477946,
                        },
                        "48": {
                            "0": "TomBrady",
                            "1": "2015-12-07",
                            "2": 8.49678638163858,
                        },
                        "49": {
                            "0": "TomBrady",
                            "1": "2015-12-08",
                            "2": 7.98104975966596,
                        },
                        "50": {
                            "0": "TomBrady",
                            "1": "2015-12-09",
                            "2": 7.77779262633883,
                        },
                        "51": {
                            "0": "TomBrady",
                            "1": "2015-12-10",
                            "2": 8.2602342916073,
                        },
                        "52": {
                            "0": "TomBrady",
                            "1": "2015-12-11",
                            "2": 7.86633892304654,
                        },
                        "53": {
                            "0": "TomBrady",
                            "1": "2015-12-12",
                            "2": 7.31055015853442,
                        },
                        "54": {
                            "0": "TomBrady",
                            "1": "2015-12-13",
                            "2": 7.71824095195932,
                        },
                        "55": {
                            "0": "TomBrady",
                            "1": "2015-12-14",
                            "2": 8.31947369244219,
                        },
                        "56": {
                            "0": "TomBrady",
                            "1": "2015-12-15",
                            "2": 8.23668532271246,
                        },
                        "57": {
                            "0": "TomBrady",
                            "1": "2015-12-16",
                            "2": 7.80751004221619,
                        },
                        "58": {
                            "0": "TomBrady",
                            "1": "2015-12-17",
                            "2": 7.59186171488993,
                        },
                        "59": {
                            "0": "TomBrady",
                            "1": "2015-12-18",
                            "2": 7.52886925664225,
                        },
                        "60": {
                            "0": "TomBrady",
                            "1": "2015-12-19",
                            "2": 7.17165682276851,
                        },
                        "61": {
                            "0": "TomBrady",
                            "1": "2015-12-20",
                            "2": 7.89133075766189,
                        },
                        "62": {
                            "0": "TomBrady",
                            "1": "2015-12-21",
                            "2": 8.36007143564403,
                        },
                        "63": {
                            "0": "TomBrady",
                            "1": "2015-12-22",
                            "2": 8.11042723757502,
                        },
                        "64": {
                            "0": "TomBrady",
                            "1": "2015-12-23",
                            "2": 7.77527584648686,
                        },
                        "65": {
                            "0": "TomBrady",
                            "1": "2015-12-24",
                            "2": 7.34729970074316,
                        },
                        "66": {
                            "0": "TomBrady",
                            "1": "2015-12-25",
                            "2": 7.30182234213793,
                        },
                        "67": {
                            "0": "TomBrady",
                            "1": "2015-12-26",
                            "2": 7.12044437239249,
                        },
                        "68": {
                            "0": "TomBrady",
                            "1": "2015-12-27",
                            "2": 8.87877607170755,
                        },
                        "69": {
                            "0": "TomBrady",
                            "1": "2015-12-28",
                            "2": 9.25061821847475,
                        },
                        "70": {
                            "0": "TomBrady",
                            "1": "2015-12-29",
                            "2": 9.24792513230345,
                        },
                        "71": {
                            "0": "TomBrady",
                            "1": "2015-12-30",
                            "2": 8.39140318535794,
                        },
                        "72": {
                            "0": "TomBrady",
                            "1": "2015-12-31",
                            "2": 8.00469951054955,
                        },
                        "73": {
                            "0": "TomBrady",
                            "1": "2016-01-01",
                            "2": 7.58933582317062,
                        },
                        "74": {
                            "0": "TomBrady",
                            "1": "2016-01-02",
                            "2": 7.82524529143177,
                        },
                        "75": {
                            "0": "TomBrady",
                            "1": "2016-01-03",
                            "2": 8.24931374626064,
                        },
                        "76": {
                            "0": "TomBrady",
                            "1": "2016-01-04",
                            "2": 9.29514097366865,
                        },
                        "77": {
                            "0": "TomBrady",
                            "1": "2016-01-05",
                            "2": 8.56826646160024,
                        },
                        "78": {
                            "0": "TomBrady",
                            "1": "2016-01-06",
                            "2": 8.35255436947459,
                        },
                        "79": {
                            "0": "TomBrady",
                            "1": "2016-01-07",
                            "2": 8.29579811063615,
                        },
                        "80": {
                            "0": "TomBrady",
                            "1": "2016-01-08",
                            "2": 8.29029259122431,
                        },
                        "81": {
                            "0": "TomBrady",
                            "1": "2016-01-09",
                            "2": 7.78572089653462,
                        },
                        "82": {
                            "0": "TomBrady",
                            "1": "2016-01-10",
                            "2": 8.28172399041139,
                        },
                        "83": {
                            "0": "TomBrady",
                            "1": "2016-01-11",
                            "2": 8.4707303170059,
                        },
                        "84": {
                            "0": "TomBrady",
                            "1": "2016-01-12",
                            "2": 8.13505390861157,
                        },
                        "85": {
                            "0": "TomBrady",
                            "1": "2016-01-13",
                            "2": 8.06714903991011,
                        },
                    },
                },
            ),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "historic_forecast_multi_series"),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder(request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def anomaly_detection_multi_series(
        self, *, request: MultiSeriesAnomaly, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Any:
        """
        Based on the provided data, this endpoint detects the anomalies in the historical perdiod of multiple time series at once. It takes a JSON as an input containing information like the series frequency and historical data. (See below for a full description of the parameters.) The response contains a flag indicating if the date has a anomaly and also provides the prediction interval used to define if an observation is an anomaly.Get your token for private beta at https://dashboard.nixtla.io.

        Parameters:
            - request: MultiSeriesAnomaly.

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from nixtla import MultiSeriesAnomaly
        from nixtla.client import Nixtla

        client = Nixtla(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.anomaly_detection_multi_series(
            request=MultiSeriesAnomaly(),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "anomaly_detection_multi_series"),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder(request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def cross_validation_multi_series(
        self, *, request: MultiSeriesCrossValidation, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Any:
        """
        Perform Cross Validation for multiple series

        Parameters:
            - request: MultiSeriesCrossValidation.

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from nixtla import MultiSeriesCrossValidation, MultiSeriesInput
        from nixtla.client import Nixtla

        client = Nixtla(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.cross_validation_multi_series(
            request=MultiSeriesCrossValidation(
                model="timegpt-1",
                freq="D",
                level=[99],
                y={
                    "columns": {"0": "unique_id", "1": "ds", "2": "y"},
                    "data": {
                        "0": {
                            "0": "PeytonManning",
                            "1": "2015-12-02",
                            "2": 8.71177264560569,
                        },
                        "1": {
                            "0": "PeytonManning",
                            "1": "2015-12-03",
                            "2": 8.05610965954506,
                        },
                        "2": {
                            "0": "PeytonManning",
                            "1": "2015-12-04",
                            "2": 8.08147504013705,
                        },
                        "3": {
                            "0": "PeytonManning",
                            "1": "2015-12-05",
                            "2": 7.45876269238096,
                        },
                        "4": {
                            "0": "PeytonManning",
                            "1": "2015-12-06",
                            "2": 8.01400499477946,
                        },
                        "5": {
                            "0": "PeytonManning",
                            "1": "2015-12-07",
                            "2": 8.49678638163858,
                        },
                        "6": {
                            "0": "PeytonManning",
                            "1": "2015-12-08",
                            "2": 7.98104975966596,
                        },
                        "7": {
                            "0": "PeytonManning",
                            "1": "2015-12-09",
                            "2": 7.77779262633883,
                        },
                        "8": {
                            "0": "PeytonManning",
                            "1": "2015-12-10",
                            "2": 8.2602342916073,
                        },
                        "9": {
                            "0": "PeytonManning",
                            "1": "2015-12-11",
                            "2": 7.86633892304654,
                        },
                        "10": {
                            "0": "PeytonManning",
                            "1": "2015-12-12",
                            "2": 7.31055015853442,
                        },
                        "11": {
                            "0": "PeytonManning",
                            "1": "2015-12-13",
                            "2": 7.71824095195932,
                        },
                        "12": {
                            "0": "PeytonManning",
                            "1": "2015-12-14",
                            "2": 8.31947369244219,
                        },
                        "13": {
                            "0": "PeytonManning",
                            "1": "2015-12-15",
                            "2": 8.23668532271246,
                        },
                        "14": {
                            "0": "PeytonManning",
                            "1": "2015-12-16",
                            "2": 7.80751004221619,
                        },
                        "15": {
                            "0": "PeytonManning",
                            "1": "2015-12-17",
                            "2": 7.59186171488993,
                        },
                        "16": {
                            "0": "PeytonManning",
                            "1": "2015-12-18",
                            "2": 7.52886925664225,
                        },
                        "17": {
                            "0": "PeytonManning",
                            "1": "2015-12-19",
                            "2": 7.17165682276851,
                        },
                        "18": {
                            "0": "PeytonManning",
                            "1": "2015-12-20",
                            "2": 7.89133075766189,
                        },
                        "19": {
                            "0": "PeytonManning",
                            "1": "2015-12-21",
                            "2": 8.36007143564403,
                        },
                        "20": {
                            "0": "PeytonManning",
                            "1": "2015-12-22",
                            "2": 8.11042723757502,
                        },
                        "21": {
                            "0": "PeytonManning",
                            "1": "2015-12-23",
                            "2": 7.77527584648686,
                        },
                        "22": {
                            "0": "PeytonManning",
                            "1": "2015-12-24",
                            "2": 7.34729970074316,
                        },
                        "23": {
                            "0": "PeytonManning",
                            "1": "2015-12-25",
                            "2": 7.30182234213793,
                        },
                        "24": {
                            "0": "PeytonManning",
                            "1": "2015-12-26",
                            "2": 7.12044437239249,
                        },
                        "25": {
                            "0": "PeytonManning",
                            "1": "2015-12-27",
                            "2": 8.87877607170755,
                        },
                        "26": {
                            "0": "PeytonManning",
                            "1": "2015-12-28",
                            "2": 9.25061821847475,
                        },
                        "27": {
                            "0": "PeytonManning",
                            "1": "2015-12-29",
                            "2": 9.24792513230345,
                        },
                        "28": {
                            "0": "PeytonManning",
                            "1": "2015-12-30",
                            "2": 8.39140318535794,
                        },
                        "29": {
                            "0": "PeytonManning",
                            "1": "2015-12-31",
                            "2": 8.00469951054955,
                        },
                        "30": {
                            "0": "PeytonManning",
                            "1": "2016-01-01",
                            "2": 7.58933582317062,
                        },
                        "31": {
                            "0": "PeytonManning",
                            "1": "2016-01-02",
                            "2": 7.82524529143177,
                        },
                        "32": {
                            "0": "PeytonManning",
                            "1": "2016-01-03",
                            "2": 8.24931374626064,
                        },
                        "33": {
                            "0": "PeytonManning",
                            "1": "2016-01-04",
                            "2": 9.29514097366865,
                        },
                        "34": {
                            "0": "PeytonManning",
                            "1": "2016-01-05",
                            "2": 8.56826646160024,
                        },
                        "35": {
                            "0": "PeytonManning",
                            "1": "2016-01-06",
                            "2": 8.35255436947459,
                        },
                        "36": {
                            "0": "PeytonManning",
                            "1": "2016-01-07",
                            "2": 8.29579811063615,
                        },
                        "37": {
                            "0": "PeytonManning",
                            "1": "2016-01-08",
                            "2": 8.29029259122431,
                        },
                        "38": {
                            "0": "PeytonManning",
                            "1": "2016-01-09",
                            "2": 7.78572089653462,
                        },
                        "39": {
                            "0": "PeytonManning",
                            "1": "2016-01-10",
                            "2": 8.28172399041139,
                        },
                        "40": {
                            "0": "PeytonManning",
                            "1": "2016-01-11",
                            "2": 8.4707303170059,
                        },
                        "41": {
                            "0": "PeytonManning",
                            "1": "2016-01-12",
                            "2": 8.13505390861157,
                        },
                        "42": {
                            "0": "PeytonManning",
                            "1": "2016-01-13",
                            "2": 8.06714903991011,
                        },
                        "43": {
                            "0": "TomBrady",
                            "1": "2015-12-02",
                            "2": 8.71177264560569,
                        },
                        "44": {
                            "0": "TomBrady",
                            "1": "2015-12-03",
                            "2": 8.05610965954506,
                        },
                        "45": {
                            "0": "TomBrady",
                            "1": "2015-12-04",
                            "2": 8.08147504013705,
                        },
                        "46": {
                            "0": "TomBrady",
                            "1": "2015-12-05",
                            "2": 7.45876269238096,
                        },
                        "47": {
                            "0": "TomBrady",
                            "1": "2015-12-06",
                            "2": 8.01400499477946,
                        },
                        "48": {
                            "0": "TomBrady",
                            "1": "2015-12-07",
                            "2": 8.49678638163858,
                        },
                        "49": {
                            "0": "TomBrady",
                            "1": "2015-12-08",
                            "2": 7.98104975966596,
                        },
                        "50": {
                            "0": "TomBrady",
                            "1": "2015-12-09",
                            "2": 7.77779262633883,
                        },
                        "51": {
                            "0": "TomBrady",
                            "1": "2015-12-10",
                            "2": 8.2602342916073,
                        },
                        "52": {
                            "0": "TomBrady",
                            "1": "2015-12-11",
                            "2": 7.86633892304654,
                        },
                        "53": {
                            "0": "TomBrady",
                            "1": "2015-12-12",
                            "2": 7.31055015853442,
                        },
                        "54": {
                            "0": "TomBrady",
                            "1": "2015-12-13",
                            "2": 7.71824095195932,
                        },
                        "55": {
                            "0": "TomBrady",
                            "1": "2015-12-14",
                            "2": 8.31947369244219,
                        },
                        "56": {
                            "0": "TomBrady",
                            "1": "2015-12-15",
                            "2": 8.23668532271246,
                        },
                        "57": {
                            "0": "TomBrady",
                            "1": "2015-12-16",
                            "2": 7.80751004221619,
                        },
                        "58": {
                            "0": "TomBrady",
                            "1": "2015-12-17",
                            "2": 7.59186171488993,
                        },
                        "59": {
                            "0": "TomBrady",
                            "1": "2015-12-18",
                            "2": 7.52886925664225,
                        },
                        "60": {
                            "0": "TomBrady",
                            "1": "2015-12-19",
                            "2": 7.17165682276851,
                        },
                        "61": {
                            "0": "TomBrady",
                            "1": "2015-12-20",
                            "2": 7.89133075766189,
                        },
                        "62": {
                            "0": "TomBrady",
                            "1": "2015-12-21",
                            "2": 8.36007143564403,
                        },
                        "63": {
                            "0": "TomBrady",
                            "1": "2015-12-22",
                            "2": 8.11042723757502,
                        },
                        "64": {
                            "0": "TomBrady",
                            "1": "2015-12-23",
                            "2": 7.77527584648686,
                        },
                        "65": {
                            "0": "TomBrady",
                            "1": "2015-12-24",
                            "2": 7.34729970074316,
                        },
                        "66": {
                            "0": "TomBrady",
                            "1": "2015-12-25",
                            "2": 7.30182234213793,
                        },
                        "67": {
                            "0": "TomBrady",
                            "1": "2015-12-26",
                            "2": 7.12044437239249,
                        },
                        "68": {
                            "0": "TomBrady",
                            "1": "2015-12-27",
                            "2": 8.87877607170755,
                        },
                        "69": {
                            "0": "TomBrady",
                            "1": "2015-12-28",
                            "2": 9.25061821847475,
                        },
                        "70": {
                            "0": "TomBrady",
                            "1": "2015-12-29",
                            "2": 9.24792513230345,
                        },
                        "71": {
                            "0": "TomBrady",
                            "1": "2015-12-30",
                            "2": 8.39140318535794,
                        },
                        "72": {
                            "0": "TomBrady",
                            "1": "2015-12-31",
                            "2": 8.00469951054955,
                        },
                        "73": {
                            "0": "TomBrady",
                            "1": "2016-01-01",
                            "2": 7.58933582317062,
                        },
                        "74": {
                            "0": "TomBrady",
                            "1": "2016-01-02",
                            "2": 7.82524529143177,
                        },
                        "75": {
                            "0": "TomBrady",
                            "1": "2016-01-03",
                            "2": 8.24931374626064,
                        },
                        "76": {
                            "0": "TomBrady",
                            "1": "2016-01-04",
                            "2": 9.29514097366865,
                        },
                        "77": {
                            "0": "TomBrady",
                            "1": "2016-01-05",
                            "2": 8.56826646160024,
                        },
                        "78": {
                            "0": "TomBrady",
                            "1": "2016-01-06",
                            "2": 8.35255436947459,
                        },
                        "79": {
                            "0": "TomBrady",
                            "1": "2016-01-07",
                            "2": 8.29579811063615,
                        },
                        "80": {
                            "0": "TomBrady",
                            "1": "2016-01-08",
                            "2": 8.29029259122431,
                        },
                        "81": {
                            "0": "TomBrady",
                            "1": "2016-01-09",
                            "2": 7.78572089653462,
                        },
                        "82": {
                            "0": "TomBrady",
                            "1": "2016-01-10",
                            "2": 8.28172399041139,
                        },
                        "83": {
                            "0": "TomBrady",
                            "1": "2016-01-11",
                            "2": 8.4707303170059,
                        },
                        "84": {
                            "0": "TomBrady",
                            "1": "2016-01-12",
                            "2": 8.13505390861157,
                        },
                        "85": {
                            "0": "TomBrady",
                            "1": "2016-01-13",
                            "2": 8.06714903991011,
                        },
                    },
                },
                x=MultiSeriesInput(
                    columns=[
                        "unique_id",
                        "ds",
                        "normalized_fb_marketing_spend",
                        "normalized_google_marketing_spend",
                    ],
                    data=[
                        {
                            "0": "PeytonManning",
                            "1": "2015-12-02",
                            "2": 0.11477860928915096,
                            "3": 0.5844987825930846,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2015-12-03",
                            "2": 0.33533486335091345,
                            "3": 0.35513740030391416,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2015-12-04",
                            "2": 0.17530305631523613,
                            "3": 0.7727084723706166,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2015-12-05",
                            "2": 0.8299454704953892,
                            "3": 0.367618075472813,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2015-12-06",
                            "2": 0.15521852990872909,
                            "3": 0.3003195772529532,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2015-12-07",
                            "2": 0.14306595403784284,
                            "3": 0.7070431427763944,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2015-12-08",
                            "2": 0.19385462445583268,
                            "3": 0.3548795168204949,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2015-12-09",
                            "2": 0.13255788839340688,
                            "3": 0.17898066409986724,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2015-12-10",
                            "2": 0.1861402159494574,
                            "3": 0.7109080209067455,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2015-12-11",
                            "2": 0.6416719826327762,
                            "3": 0.029753630490418792,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2015-12-12",
                            "2": 0.07255444629238816,
                            "3": 0.29036094427412484,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2015-12-13",
                            "2": 0.5908563921496247,
                            "3": 0.4391612122175276,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2015-12-14",
                            "2": 0.4564108681832745,
                            "3": 0.36666762551686216,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2015-12-15",
                            "2": 0.5842063222179616,
                            "3": 0.7725253746268812,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2015-12-16",
                            "2": 0.7032064831874294,
                            "3": 0.011741920837716524,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2015-12-17",
                            "2": 0.1819442499802637,
                            "3": 0.024847038984041947,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2015-12-18",
                            "2": 0.0236088273599101,
                            "3": 0.6750163977742368,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2015-12-19",
                            "2": 0.05606508858414727,
                            "3": 0.7476944076745794,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2015-12-20",
                            "2": 0.23105144001754685,
                            "3": 0.0975599293231374,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2015-12-21",
                            "2": 0.046529460623970675,
                            "3": 0.27870858983273483,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2015-12-22",
                            "2": 0.8924837450040128,
                            "3": 0.17445021431427998,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2015-12-23",
                            "2": 0.7920741814997206,
                            "3": 0.7697260533294017,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2015-12-24",
                            "2": 0.8211104441803947,
                            "3": 0.04784956766271531,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2015-12-25",
                            "2": 0.007443038001649138,
                            "3": 0.14607178743713456,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2015-12-26",
                            "2": 0.007103558258280018,
                            "3": 0.9906539418801805,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2015-12-27",
                            "2": 0.6056133597337183,
                            "3": 0.3016989995056749,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2015-12-28",
                            "2": 0.888562531622971,
                            "3": 0.2644957566378502,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2015-12-29",
                            "2": 0.6596339635369193,
                            "3": 0.7132049526406711,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2015-12-30",
                            "2": 0.28384590920981123,
                            "3": 0.33014709090685734,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2015-12-31",
                            "2": 0.8909381460163546,
                            "3": 0.30893091621071356,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2016-01-01",
                            "2": 0.40276798240151035,
                            "3": 0.2879315229860593,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2016-01-02",
                            "2": 0.4429162268378485,
                            "3": 0.11018732403878562,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2016-01-03",
                            "2": 0.3828367947132504,
                            "3": 0.8222282482537393,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2016-01-04",
                            "2": 0.058573708628411714,
                            "3": 0.0882973927279318,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2016-01-05",
                            "2": 0.47488775903843816,
                            "3": 0.6966251353738419,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2016-01-06",
                            "2": 0.5977462692254242,
                            "3": 0.047135156470394235,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2016-01-07",
                            "2": 0.3717147185460784,
                            "3": 0.8692903226725259,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2016-01-08",
                            "2": 0.9309630632764513,
                            "3": 0.9735989812217806,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2016-01-09",
                            "2": 0.16911221748337524,
                            "3": 0.8789858343082052,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2016-01-10",
                            "2": 0.27006313791342074,
                            "3": 0.11164112580033247,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2016-01-11",
                            "2": 0.7963113076957269,
                            "3": 0.20769916997452176,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2016-01-12",
                            "2": 0.6303426283630738,
                            "3": 0.18090725407449992,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2016-01-13",
                            "2": 0.8493379197928459,
                            "3": 0.47689004776049004,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2016-01-14",
                            "2": 0.23526591138844477,
                            "3": 0.8789956293235727,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2016-01-15",
                            "2": 0.007675903871696255,
                            "3": 0.43933947505823356,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2016-01-16",
                            "2": 0.47352555302489163,
                            "3": 0.2152806277171031,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2016-01-17",
                            "2": 0.15708565708379674,
                            "3": 0.3691423619421067,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2016-01-18",
                            "2": 0.1455797785998202,
                            "3": 0.12414992893989352,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2016-01-19",
                            "2": 0.18260071049899873,
                            "3": 0.4700149101718504,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2016-01-20",
                            "2": 0.815333051511914,
                            "3": 0.6872087681704713,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2015-12-02",
                            "2": 0.11477860928915096,
                            "3": 0.5844987825930846,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2015-12-03",
                            "2": 0.33533486335091345,
                            "3": 0.35513740030391416,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2015-12-04",
                            "2": 0.17530305631523613,
                            "3": 0.7727084723706166,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2015-12-05",
                            "2": 0.8299454704953892,
                            "3": 0.367618075472813,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2015-12-06",
                            "2": 0.15521852990872909,
                            "3": 0.3003195772529532,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2015-12-07",
                            "2": 0.14306595403784284,
                            "3": 0.7070431427763944,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2015-12-08",
                            "2": 0.19385462445583268,
                            "3": 0.3548795168204949,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2015-12-09",
                            "2": 0.13255788839340688,
                            "3": 0.17898066409986724,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2015-12-10",
                            "2": 0.1861402159494574,
                            "3": 0.7109080209067455,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2015-12-11",
                            "2": 0.6416719826327762,
                            "3": 0.029753630490418792,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2015-12-12",
                            "2": 0.07255444629238816,
                            "3": 0.29036094427412484,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2015-12-13",
                            "2": 0.5908563921496247,
                            "3": 0.4391612122175276,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2015-12-14",
                            "2": 0.4564108681832745,
                            "3": 0.36666762551686216,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2015-12-15",
                            "2": 0.5842063222179616,
                            "3": 0.7725253746268812,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2015-12-16",
                            "2": 0.7032064831874294,
                            "3": 0.011741920837716524,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2015-12-17",
                            "2": 0.1819442499802637,
                            "3": 0.024847038984041947,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2015-12-18",
                            "2": 0.0236088273599101,
                            "3": 0.6750163977742368,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2015-12-19",
                            "2": 0.05606508858414727,
                            "3": 0.7476944076745794,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2015-12-20",
                            "2": 0.23105144001754685,
                            "3": 0.0975599293231374,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2015-12-21",
                            "2": 0.046529460623970675,
                            "3": 0.27870858983273483,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2015-12-22",
                            "2": 0.8924837450040128,
                            "3": 0.17445021431427998,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2015-12-23",
                            "2": 0.7920741814997206,
                            "3": 0.7697260533294017,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2015-12-24",
                            "2": 0.8211104441803947,
                            "3": 0.04784956766271531,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2015-12-25",
                            "2": 0.007443038001649138,
                            "3": 0.14607178743713456,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2015-12-26",
                            "2": 0.007103558258280018,
                            "3": 0.9906539418801805,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2015-12-27",
                            "2": 0.6056133597337183,
                            "3": 0.3016989995056749,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2015-12-28",
                            "2": 0.888562531622971,
                            "3": 0.2644957566378502,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2015-12-29",
                            "2": 0.6596339635369193,
                            "3": 0.7132049526406711,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2015-12-30",
                            "2": 0.28384590920981123,
                            "3": 0.33014709090685734,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2015-12-31",
                            "2": 0.8909381460163546,
                            "3": 0.30893091621071356,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2016-01-01",
                            "2": 0.40276798240151035,
                            "3": 0.2879315229860593,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2016-01-02",
                            "2": 0.4429162268378485,
                            "3": 0.11018732403878562,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2016-01-03",
                            "2": 0.3828367947132504,
                            "3": 0.8222282482537393,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2016-01-04",
                            "2": 0.058573708628411714,
                            "3": 0.0882973927279318,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2016-01-05",
                            "2": 0.47488775903843816,
                            "3": 0.6966251353738419,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2016-01-06",
                            "2": 0.5977462692254242,
                            "3": 0.047135156470394235,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2016-01-07",
                            "2": 0.3717147185460784,
                            "3": 0.8692903226725259,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2016-01-08",
                            "2": 0.9309630632764513,
                            "3": 0.9735989812217806,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2016-01-09",
                            "2": 0.16911221748337524,
                            "3": 0.8789858343082052,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2016-01-10",
                            "2": 0.27006313791342074,
                            "3": 0.11164112580033247,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2016-01-11",
                            "2": 0.7963113076957269,
                            "3": 0.20769916997452176,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2016-01-12",
                            "2": 0.6303426283630738,
                            "3": 0.18090725407449992,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2016-01-13",
                            "2": 0.8493379197928459,
                            "3": 0.47689004776049004,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2016-01-14",
                            "2": 0.23526591138844477,
                            "3": 0.8789956293235727,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2016-01-15",
                            "2": 0.007675903871696255,
                            "3": 0.43933947505823356,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2016-01-16",
                            "2": 0.47352555302489163,
                            "3": 0.2152806277171031,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2016-01-17",
                            "2": 0.15708565708379674,
                            "3": 0.3691423619421067,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2016-01-18",
                            "2": 0.1455797785998202,
                            "3": 0.12414992893989352,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2016-01-19",
                            "2": 0.18260071049899873,
                            "3": 0.4700149101718504,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2016-01-20",
                            "2": 0.815333051511914,
                            "3": 0.6872087681704713,
                        },
                    ],
                ),
            ),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "cross_validation_multi_series"),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder(request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def model_input_size(
        self, *, request: SingleSeriesForecast, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Any:
        """
        Parameters:
            - request: SingleSeriesForecast.

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from nixtla import SingleSeriesForecast
        from nixtla.client import Nixtla

        client = Nixtla(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.model_input_size(
            request=SingleSeriesForecast(),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "model_input_size"),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder(request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def model_params(
        self, *, request: SingleSeriesForecast, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Any:
        """
        Parameters:
            - request: SingleSeriesForecast.

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from nixtla import SingleSeriesForecast
        from nixtla.client import Nixtla

        client = Nixtla(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.model_params(
            request=SingleSeriesForecast(),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "model_params"),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder(request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def timegpt(
        self, *, request: SingleSeriesForecast, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Any:
        """
        This endpoint predicts the future values of a single time series based on the provided data. It takes a JSON as an input containing information like the series frequency and historical data. (See below for a full description of the parameters.) The response contains the predicted values based on the input arguments. Get your token for private beta at https://dashboard.nixtla.io

        Parameters:
            - request: SingleSeriesForecast.

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from nixtla import SingleSeriesForecast
        from nixtla.client import Nixtla

        client = Nixtla(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.timegpt(
            request=SingleSeriesForecast(
                fewshot_steps=0,
                model="timegpt-1",
                freq="D",
                level=[90],
                fh=7,
                y={
                    "2015-12-02": 8.71177264560569,
                    "2015-12-03": 8.05610965954506,
                    "2015-12-04": 8.08147504013705,
                    "2015-12-05": 7.45876269238096,
                    "2015-12-06": 8.01400499477946,
                    "2015-12-07": 8.49678638163858,
                    "2015-12-08": 7.98104975966596,
                    "2015-12-09": 7.77779262633883,
                    "2015-12-10": 8.2602342916073,
                    "2015-12-11": 7.86633892304654,
                    "2015-12-12": 7.31055015853442,
                    "2015-12-13": 7.71824095195932,
                    "2015-12-14": 8.31947369244219,
                    "2015-12-15": 8.23668532271246,
                    "2015-12-16": 7.80751004221619,
                    "2015-12-17": 7.59186171488993,
                    "2015-12-18": 7.52886925664225,
                    "2015-12-19": 7.17165682276851,
                    "2015-12-20": 7.89133075766189,
                    "2015-12-21": 8.36007143564403,
                    "2015-12-22": 8.11042723757502,
                    "2015-12-23": 7.77527584648686,
                    "2015-12-24": 7.34729970074316,
                    "2015-12-25": 7.30182234213793,
                    "2015-12-26": 7.12044437239249,
                    "2015-12-27": 8.87877607170755,
                    "2015-12-28": 9.25061821847475,
                    "2015-12-29": 9.24792513230345,
                    "2015-12-30": 8.39140318535794,
                    "2015-12-31": 8.00469951054955,
                    "2016-01-01": 7.58933582317062,
                    "2016-01-02": 7.82524529143177,
                    "2016-01-03": 8.24931374626064,
                    "2016-01-04": 9.29514097366865,
                    "2016-01-05": 8.56826646160024,
                    "2016-01-06": 8.35255436947459,
                    "2016-01-07": 8.29579811063615,
                    "2016-01-08": 8.29029259122431,
                    "2016-01-09": 7.78572089653462,
                    "2016-01-10": 8.28172399041139,
                    "2016-01-11": 8.4707303170059,
                    "2016-01-12": 8.13505390861157,
                    "2016-01-13": 8.06714903991011,
                },
                x={
                    "2015-12-02": [0.09323074669638598, 0.6368254238538134],
                    "2015-12-03": [0.3112324026372236, 0.6889811850504678],
                    "2015-12-04": [0.481377116596614, 0.9499072761820243],
                    "2015-12-05": [0.828714746663481, 0.8041572577576312],
                    "2015-12-06": [0.9057716575675051, 0.9704840572309358],
                    "2015-12-07": [0.11973559067683959, 0.5511723211494531],
                    "2015-12-08": [0.7606320950967038, 0.6502204496427739],
                    "2015-12-09": [0.6674402019606482, 0.5371174184068592],
                    "2015-12-10": [0.6309756549373285, 0.5962737337684483],
                    "2015-12-11": [0.43906877315373927, 0.1654105249520328],
                    "2015-12-12": [0.04035053656768495, 0.015327409476712961],
                    "2015-12-13": [0.24377685055222176, 0.8627561902830486],
                    "2015-12-14": [0.4681463148103986, 0.7889604220806076],
                    "2015-12-15": [0.08345764193688965, 0.1003789877662995],
                    "2015-12-16": [0.4771178995736667, 0.4958892103475401],
                    "2015-12-17": [0.3486535805107692, 0.1148378356945654],
                    "2015-12-18": [0.6630786017711142, 0.3849924472769859],
                    "2015-12-19": [0.011778418994099704, 0.5115520644698133],
                    "2015-12-20": [0.9038837166773512, 0.8848353753020387],
                    "2015-12-21": [0.7843282827835409, 0.3103093475671188],
                    "2015-12-22": [0.25362104487399484, 0.9254139777164822],
                    "2015-12-23": [0.30107456907444907, 0.33020953364803796],
                    "2015-12-24": [0.027255284501599086, 0.9447565679813503],
                    "2015-12-25": [0.40549024123597277, 0.9460884659190596],
                    "2015-12-26": [0.5016171568983224, 0.7067171277571931],
                    "2015-12-27": [0.827190957653689, 0.4005053404479477],
                    "2015-12-28": [0.2596591659030716, 0.47506589627248297],
                    "2015-12-29": [0.49720915846888825, 0.6751702910147392],
                    "2015-12-30": [0.6674937132903789, 0.9931963725210304],
                    "2015-12-31": [0.9291459144099821, 0.43747139612392505],
                    "2016-01-01": [0.9582822834991531, 0.04487218641374102],
                    "2016-01-02": [0.029270976123749515, 0.23398035651852978],
                    "2016-01-03": [0.515109021575783, 0.808477728186397],
                    "2016-01-04": [0.5435684835160831, 0.07870797706843025],
                    "2016-01-05": [0.7621319274444724, 0.8516085958801328],
                    "2016-01-06": [0.26156943890310125, 0.5111017026367417],
                    "2016-01-07": [0.0564861467325366, 0.12697067125791017],
                    "2016-01-08": [0.37440546078742454, 0.2012358008441526],
                    "2016-01-09": [0.29688542060907375, 0.43556021285702873],
                    "2016-01-10": [0.9898730907589448, 0.7713248129524874],
                    "2016-01-11": [0.49238285777903246, 0.7197147811618813],
                    "2016-01-12": [0.8318652201289694, 0.6091414491883265],
                    "2016-01-13": [0.02343720965025453, 0.7961211448973647],
                    "2016-01-14": [0.7633021263247786, 0.018469346610634263],
                    "2016-01-15": [0.493855721362772, 0.7451084649371831],
                    "2016-01-16": [0.21962262556226464, 0.9274272764531087],
                    "2016-01-17": [0.885379459035442, 0.3507870357790486],
                    "2016-01-18": [0.6460546060324733, 0.8225983771798888],
                    "2016-01-19": [0.3604601800609517, 0.4588944740666544],
                    "2016-01-20": [0.4191777260908942, 0.2500836388909915],
                },
                clean_ex_first=True,
            ),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "timegpt"),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder(request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def timegpt_historic(
        self, *, request: SingleSeriesInsampleForecast, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Any:
        """
        Based on the provided data, this endpoint predicts time series data for the in-sample period (historical period). It takes a JSON as an input, including information like the series frequency and the historical data. (See below for a full description of the parameters.) The response contains the predicted values for the historical period. Usually useful for anomaly detection. Get your token for private beta at https://dashboard.nixtla.io.

        Parameters:
            - request: SingleSeriesInsampleForecast.

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from nixtla import SingleSeriesInsampleForecast
        from nixtla.client import Nixtla

        client = Nixtla(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.timegpt_historic(
            request=SingleSeriesInsampleForecast(
                model="timegpt-1",
                freq="D",
                level=[90],
                y={
                    "2015-12-02": 8.71177264560569,
                    "2015-12-03": 8.05610965954506,
                    "2015-12-04": 8.08147504013705,
                    "2015-12-05": 7.45876269238096,
                    "2015-12-06": 8.01400499477946,
                    "2015-12-07": 8.49678638163858,
                    "2015-12-08": 7.98104975966596,
                    "2015-12-09": 7.77779262633883,
                    "2015-12-10": 8.2602342916073,
                    "2015-12-11": 7.86633892304654,
                    "2015-12-12": 7.31055015853442,
                    "2015-12-13": 7.71824095195932,
                    "2015-12-14": 8.31947369244219,
                    "2015-12-15": 8.23668532271246,
                    "2015-12-16": 7.80751004221619,
                    "2015-12-17": 7.59186171488993,
                    "2015-12-18": 7.52886925664225,
                    "2015-12-19": 7.17165682276851,
                    "2015-12-20": 7.89133075766189,
                    "2015-12-21": 8.36007143564403,
                    "2015-12-22": 8.11042723757502,
                    "2015-12-23": 7.77527584648686,
                    "2015-12-24": 7.34729970074316,
                    "2015-12-25": 7.30182234213793,
                    "2015-12-26": 7.12044437239249,
                    "2015-12-27": 8.87877607170755,
                    "2015-12-28": 9.25061821847475,
                    "2015-12-29": 9.24792513230345,
                    "2015-12-30": 8.39140318535794,
                    "2015-12-31": 8.00469951054955,
                    "2016-01-01": 7.58933582317062,
                    "2016-01-02": 7.82524529143177,
                    "2016-01-03": 8.24931374626064,
                    "2016-01-04": 9.29514097366865,
                    "2016-01-05": 8.56826646160024,
                    "2016-01-06": 8.35255436947459,
                    "2016-01-07": 8.29579811063615,
                    "2016-01-08": 8.29029259122431,
                    "2016-01-09": 7.78572089653462,
                    "2016-01-10": 8.28172399041139,
                    "2016-01-11": 8.4707303170059,
                    "2016-01-12": 8.13505390861157,
                    "2016-01-13": 8.06714903991011,
                },
                clean_ex_first=True,
            ),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "timegpt_historic"),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder(request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def timegpt_multi_series(
        self, *, request: MultiSeriesForecast, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Any:
        """
        Based on the provided data, this endpoint predicts the future values of multiple time series at once. It takes a JSON as an input containing information like the series frequency and historical data. (See below for a full description of the parameters.) The response contains the predicted values for each series based on the input arguments. Get your token for private beta at https://dashboard.nixtla.io.

        Parameters:
            - request: MultiSeriesForecast.

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from nixtla import MultiSeriesForecast
        from nixtla.client import Nixtla

        client = Nixtla(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.timegpt_multi_series(
            request=MultiSeriesForecast(),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "timegpt_multi_series"),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder(request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def timegpt_multi_series_historic(
        self, *, request: MultiSeriesInsampleForecast, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Any:
        """
        Based on the provided data, this endpoint predicts the in-sample period (historical period) values of multiple time series at once. It takes a JSON as an input containing information like the series frequency and historical data. (See below for a full description of the parameters.) The response contains the predicted values for the historical period. Usually useful for anomaly detection. Get your token for private beta at https://dashboard.nixtla.io.

        Parameters:
            - request: MultiSeriesInsampleForecast.

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from nixtla import MultiSeriesInsampleForecast
        from nixtla.client import Nixtla

        client = Nixtla(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.timegpt_multi_series_historic(
            request=MultiSeriesInsampleForecast(
                model="timegpt-1",
                freq="D",
                level=[90],
                y={
                    "columns": {"0": "unique_id", "1": "ds", "2": "y"},
                    "data": {
                        "0": {
                            "0": "PeytonManning",
                            "1": "2015-12-02",
                            "2": 8.71177264560569,
                        },
                        "1": {
                            "0": "PeytonManning",
                            "1": "2015-12-03",
                            "2": 8.05610965954506,
                        },
                        "2": {
                            "0": "PeytonManning",
                            "1": "2015-12-04",
                            "2": 8.08147504013705,
                        },
                        "3": {
                            "0": "PeytonManning",
                            "1": "2015-12-05",
                            "2": 7.45876269238096,
                        },
                        "4": {
                            "0": "PeytonManning",
                            "1": "2015-12-06",
                            "2": 8.01400499477946,
                        },
                        "5": {
                            "0": "PeytonManning",
                            "1": "2015-12-07",
                            "2": 8.49678638163858,
                        },
                        "6": {
                            "0": "PeytonManning",
                            "1": "2015-12-08",
                            "2": 7.98104975966596,
                        },
                        "7": {
                            "0": "PeytonManning",
                            "1": "2015-12-09",
                            "2": 7.77779262633883,
                        },
                        "8": {
                            "0": "PeytonManning",
                            "1": "2015-12-10",
                            "2": 8.2602342916073,
                        },
                        "9": {
                            "0": "PeytonManning",
                            "1": "2015-12-11",
                            "2": 7.86633892304654,
                        },
                        "10": {
                            "0": "PeytonManning",
                            "1": "2015-12-12",
                            "2": 7.31055015853442,
                        },
                        "11": {
                            "0": "PeytonManning",
                            "1": "2015-12-13",
                            "2": 7.71824095195932,
                        },
                        "12": {
                            "0": "PeytonManning",
                            "1": "2015-12-14",
                            "2": 8.31947369244219,
                        },
                        "13": {
                            "0": "PeytonManning",
                            "1": "2015-12-15",
                            "2": 8.23668532271246,
                        },
                        "14": {
                            "0": "PeytonManning",
                            "1": "2015-12-16",
                            "2": 7.80751004221619,
                        },
                        "15": {
                            "0": "PeytonManning",
                            "1": "2015-12-17",
                            "2": 7.59186171488993,
                        },
                        "16": {
                            "0": "PeytonManning",
                            "1": "2015-12-18",
                            "2": 7.52886925664225,
                        },
                        "17": {
                            "0": "PeytonManning",
                            "1": "2015-12-19",
                            "2": 7.17165682276851,
                        },
                        "18": {
                            "0": "PeytonManning",
                            "1": "2015-12-20",
                            "2": 7.89133075766189,
                        },
                        "19": {
                            "0": "PeytonManning",
                            "1": "2015-12-21",
                            "2": 8.36007143564403,
                        },
                        "20": {
                            "0": "PeytonManning",
                            "1": "2015-12-22",
                            "2": 8.11042723757502,
                        },
                        "21": {
                            "0": "PeytonManning",
                            "1": "2015-12-23",
                            "2": 7.77527584648686,
                        },
                        "22": {
                            "0": "PeytonManning",
                            "1": "2015-12-24",
                            "2": 7.34729970074316,
                        },
                        "23": {
                            "0": "PeytonManning",
                            "1": "2015-12-25",
                            "2": 7.30182234213793,
                        },
                        "24": {
                            "0": "PeytonManning",
                            "1": "2015-12-26",
                            "2": 7.12044437239249,
                        },
                        "25": {
                            "0": "PeytonManning",
                            "1": "2015-12-27",
                            "2": 8.87877607170755,
                        },
                        "26": {
                            "0": "PeytonManning",
                            "1": "2015-12-28",
                            "2": 9.25061821847475,
                        },
                        "27": {
                            "0": "PeytonManning",
                            "1": "2015-12-29",
                            "2": 9.24792513230345,
                        },
                        "28": {
                            "0": "PeytonManning",
                            "1": "2015-12-30",
                            "2": 8.39140318535794,
                        },
                        "29": {
                            "0": "PeytonManning",
                            "1": "2015-12-31",
                            "2": 8.00469951054955,
                        },
                        "30": {
                            "0": "PeytonManning",
                            "1": "2016-01-01",
                            "2": 7.58933582317062,
                        },
                        "31": {
                            "0": "PeytonManning",
                            "1": "2016-01-02",
                            "2": 7.82524529143177,
                        },
                        "32": {
                            "0": "PeytonManning",
                            "1": "2016-01-03",
                            "2": 8.24931374626064,
                        },
                        "33": {
                            "0": "PeytonManning",
                            "1": "2016-01-04",
                            "2": 9.29514097366865,
                        },
                        "34": {
                            "0": "PeytonManning",
                            "1": "2016-01-05",
                            "2": 8.56826646160024,
                        },
                        "35": {
                            "0": "PeytonManning",
                            "1": "2016-01-06",
                            "2": 8.35255436947459,
                        },
                        "36": {
                            "0": "PeytonManning",
                            "1": "2016-01-07",
                            "2": 8.29579811063615,
                        },
                        "37": {
                            "0": "PeytonManning",
                            "1": "2016-01-08",
                            "2": 8.29029259122431,
                        },
                        "38": {
                            "0": "PeytonManning",
                            "1": "2016-01-09",
                            "2": 7.78572089653462,
                        },
                        "39": {
                            "0": "PeytonManning",
                            "1": "2016-01-10",
                            "2": 8.28172399041139,
                        },
                        "40": {
                            "0": "PeytonManning",
                            "1": "2016-01-11",
                            "2": 8.4707303170059,
                        },
                        "41": {
                            "0": "PeytonManning",
                            "1": "2016-01-12",
                            "2": 8.13505390861157,
                        },
                        "42": {
                            "0": "PeytonManning",
                            "1": "2016-01-13",
                            "2": 8.06714903991011,
                        },
                        "43": {
                            "0": "TomBrady",
                            "1": "2015-12-02",
                            "2": 8.71177264560569,
                        },
                        "44": {
                            "0": "TomBrady",
                            "1": "2015-12-03",
                            "2": 8.05610965954506,
                        },
                        "45": {
                            "0": "TomBrady",
                            "1": "2015-12-04",
                            "2": 8.08147504013705,
                        },
                        "46": {
                            "0": "TomBrady",
                            "1": "2015-12-05",
                            "2": 7.45876269238096,
                        },
                        "47": {
                            "0": "TomBrady",
                            "1": "2015-12-06",
                            "2": 8.01400499477946,
                        },
                        "48": {
                            "0": "TomBrady",
                            "1": "2015-12-07",
                            "2": 8.49678638163858,
                        },
                        "49": {
                            "0": "TomBrady",
                            "1": "2015-12-08",
                            "2": 7.98104975966596,
                        },
                        "50": {
                            "0": "TomBrady",
                            "1": "2015-12-09",
                            "2": 7.77779262633883,
                        },
                        "51": {
                            "0": "TomBrady",
                            "1": "2015-12-10",
                            "2": 8.2602342916073,
                        },
                        "52": {
                            "0": "TomBrady",
                            "1": "2015-12-11",
                            "2": 7.86633892304654,
                        },
                        "53": {
                            "0": "TomBrady",
                            "1": "2015-12-12",
                            "2": 7.31055015853442,
                        },
                        "54": {
                            "0": "TomBrady",
                            "1": "2015-12-13",
                            "2": 7.71824095195932,
                        },
                        "55": {
                            "0": "TomBrady",
                            "1": "2015-12-14",
                            "2": 8.31947369244219,
                        },
                        "56": {
                            "0": "TomBrady",
                            "1": "2015-12-15",
                            "2": 8.23668532271246,
                        },
                        "57": {
                            "0": "TomBrady",
                            "1": "2015-12-16",
                            "2": 7.80751004221619,
                        },
                        "58": {
                            "0": "TomBrady",
                            "1": "2015-12-17",
                            "2": 7.59186171488993,
                        },
                        "59": {
                            "0": "TomBrady",
                            "1": "2015-12-18",
                            "2": 7.52886925664225,
                        },
                        "60": {
                            "0": "TomBrady",
                            "1": "2015-12-19",
                            "2": 7.17165682276851,
                        },
                        "61": {
                            "0": "TomBrady",
                            "1": "2015-12-20",
                            "2": 7.89133075766189,
                        },
                        "62": {
                            "0": "TomBrady",
                            "1": "2015-12-21",
                            "2": 8.36007143564403,
                        },
                        "63": {
                            "0": "TomBrady",
                            "1": "2015-12-22",
                            "2": 8.11042723757502,
                        },
                        "64": {
                            "0": "TomBrady",
                            "1": "2015-12-23",
                            "2": 7.77527584648686,
                        },
                        "65": {
                            "0": "TomBrady",
                            "1": "2015-12-24",
                            "2": 7.34729970074316,
                        },
                        "66": {
                            "0": "TomBrady",
                            "1": "2015-12-25",
                            "2": 7.30182234213793,
                        },
                        "67": {
                            "0": "TomBrady",
                            "1": "2015-12-26",
                            "2": 7.12044437239249,
                        },
                        "68": {
                            "0": "TomBrady",
                            "1": "2015-12-27",
                            "2": 8.87877607170755,
                        },
                        "69": {
                            "0": "TomBrady",
                            "1": "2015-12-28",
                            "2": 9.25061821847475,
                        },
                        "70": {
                            "0": "TomBrady",
                            "1": "2015-12-29",
                            "2": 9.24792513230345,
                        },
                        "71": {
                            "0": "TomBrady",
                            "1": "2015-12-30",
                            "2": 8.39140318535794,
                        },
                        "72": {
                            "0": "TomBrady",
                            "1": "2015-12-31",
                            "2": 8.00469951054955,
                        },
                        "73": {
                            "0": "TomBrady",
                            "1": "2016-01-01",
                            "2": 7.58933582317062,
                        },
                        "74": {
                            "0": "TomBrady",
                            "1": "2016-01-02",
                            "2": 7.82524529143177,
                        },
                        "75": {
                            "0": "TomBrady",
                            "1": "2016-01-03",
                            "2": 8.24931374626064,
                        },
                        "76": {
                            "0": "TomBrady",
                            "1": "2016-01-04",
                            "2": 9.29514097366865,
                        },
                        "77": {
                            "0": "TomBrady",
                            "1": "2016-01-05",
                            "2": 8.56826646160024,
                        },
                        "78": {
                            "0": "TomBrady",
                            "1": "2016-01-06",
                            "2": 8.35255436947459,
                        },
                        "79": {
                            "0": "TomBrady",
                            "1": "2016-01-07",
                            "2": 8.29579811063615,
                        },
                        "80": {
                            "0": "TomBrady",
                            "1": "2016-01-08",
                            "2": 8.29029259122431,
                        },
                        "81": {
                            "0": "TomBrady",
                            "1": "2016-01-09",
                            "2": 7.78572089653462,
                        },
                        "82": {
                            "0": "TomBrady",
                            "1": "2016-01-10",
                            "2": 8.28172399041139,
                        },
                        "83": {
                            "0": "TomBrady",
                            "1": "2016-01-11",
                            "2": 8.4707303170059,
                        },
                        "84": {
                            "0": "TomBrady",
                            "1": "2016-01-12",
                            "2": 8.13505390861157,
                        },
                        "85": {
                            "0": "TomBrady",
                            "1": "2016-01-13",
                            "2": 8.06714903991011,
                        },
                    },
                },
            ),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "timegpt_multi_series_historic"),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder(request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def timegpt_multi_series_anomalies(
        self, *, request: MultiSeriesAnomaly, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Any:
        """
        Based on the provided data, this endpoint detects the anomalies in the historical perdiod of multiple time series at once. It takes a JSON as an input containing information like the series frequency and historical data. (See below for a full description of the parameters.) The response contains a flag indicating if the date has a anomaly and also provides the prediction interval used to define if an observation is an anomaly.Get your token for private beta at https://dashboard.nixtla.io.

        Parameters:
            - request: MultiSeriesAnomaly.

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from nixtla import MultiSeriesAnomaly
        from nixtla.client import Nixtla

        client = Nixtla(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.timegpt_multi_series_anomalies(
            request=MultiSeriesAnomaly(),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "timegpt_multi_series_anomalies"),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder(request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def timegpt_multi_series_cross_validation(
        self, *, request: MultiSeriesCrossValidation, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Any:
        """
        Perform Cross Validation for multiple series

        Parameters:
            - request: MultiSeriesCrossValidation.

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from nixtla import MultiSeriesCrossValidation
        from nixtla.client import Nixtla

        client = Nixtla(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.timegpt_multi_series_cross_validation(
            request=MultiSeriesCrossValidation(),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "timegpt_multi_series_cross_validation"),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder(request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def timegpt_input_size(
        self, *, request: SingleSeriesForecast, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Any:
        """
        Parameters:
            - request: SingleSeriesForecast.

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from nixtla import SingleSeriesForecast
        from nixtla.client import Nixtla

        client = Nixtla(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.timegpt_input_size(
            request=SingleSeriesForecast(),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "timegpt_input_size"),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder(request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def timegpt_model_params(
        self, *, request: SingleSeriesForecast, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Any:
        """
        Parameters:
            - request: SingleSeriesForecast.

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from nixtla import SingleSeriesForecast
        from nixtla.client import Nixtla

        client = Nixtla(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        client.timegpt_model_params(
            request=SingleSeriesForecast(),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "timegpt_model_params"),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder(request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncNixtla:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propogate to these functions.

    Parameters:
        - base_url: str. The base url to use for requests from the client.

        - token: typing.Union[str, typing.Callable[[], str]].

        - timeout: typing.Optional[float]. The timeout to be used, in seconds, for requests by default the timeout is 60 seconds, unless a custom httpx client is used, in which case a default is not set.

        - follow_redirects: typing.Optional[bool]. Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

        - httpx_client: typing.Optional[httpx.AsyncClient]. The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.
    ---
    from nixtla.client import AsyncNixtla

    client = AsyncNixtla(
        token="YOUR_TOKEN",
        base_url="https://yourhost.com/path/to/api",
    )
    """

    def __init__(
        self,
        *,
        base_url: str,
        token: typing.Union[str, typing.Callable[[], str]],
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = None,
        httpx_client: typing.Optional[httpx.AsyncClient] = None,
    ):
        _defaulted_timeout = timeout if timeout is not None else 60 if httpx_client is None else None
        self._client_wrapper = AsyncClientWrapper(
            base_url=base_url,
            token=token,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )

    async def validate_token(self, *, request_options: typing.Optional[RequestOptions] = None) -> typing.Any:
        """
        Parameters:
            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from nixtla.client import AsyncNixtla

        client = AsyncNixtla(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        await client.validate_token()
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "validate_token"),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))
            if request_options is not None
            else None,
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(typing.Any, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def validate_token_front(self, *, request_options: typing.Optional[RequestOptions] = None) -> typing.Any:
        """
        Parameters:
            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from nixtla.client import AsyncNixtla

        client = AsyncNixtla(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        await client.validate_token_front()
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "validate_token_front"),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))
            if request_options is not None
            else None,
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(typing.Any, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def health_health_get(self, *, request_options: typing.Optional[RequestOptions] = None) -> typing.Any:
        """
        Check if server is healthy. Used by the readiness probe to check server is healthy.

        Parameters:
            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from nixtla.client import AsyncNixtla

        client = AsyncNixtla(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        await client.health_health_get()
        """
        _response = await self._client_wrapper.httpx_client.request(
            "GET",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "health"),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(typing.Any, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def forecast(
        self, *, request: SingleSeriesForecast, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Any:
        """
        This endpoint predicts the future values of a single time series based on the provided data. It takes a JSON as an input containing information like the series frequency and historical data. (See below for a full description of the parameters.) The response contains the predicted values based on the input arguments. Get your token for private beta at https://dashboard.nixtla.io

        Parameters:
            - request: SingleSeriesForecast.

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from nixtla import SingleSeriesForecast
        from nixtla.client import AsyncNixtla

        client = AsyncNixtla(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        await client.forecast(
            request=SingleSeriesForecast(
                fewshot_steps=0,
                model="timegpt-1",
                freq="D",
                level=[90],
                fh=7,
                y={
                    "2015-12-02": 8.71177264560569,
                    "2015-12-03": 8.05610965954506,
                    "2015-12-04": 8.08147504013705,
                    "2015-12-05": 7.45876269238096,
                    "2015-12-06": 8.01400499477946,
                    "2015-12-07": 8.49678638163858,
                    "2015-12-08": 7.98104975966596,
                    "2015-12-09": 7.77779262633883,
                    "2015-12-10": 8.2602342916073,
                    "2015-12-11": 7.86633892304654,
                    "2015-12-12": 7.31055015853442,
                    "2015-12-13": 7.71824095195932,
                    "2015-12-14": 8.31947369244219,
                    "2015-12-15": 8.23668532271246,
                    "2015-12-16": 7.80751004221619,
                    "2015-12-17": 7.59186171488993,
                    "2015-12-18": 7.52886925664225,
                    "2015-12-19": 7.17165682276851,
                    "2015-12-20": 7.89133075766189,
                    "2015-12-21": 8.36007143564403,
                    "2015-12-22": 8.11042723757502,
                    "2015-12-23": 7.77527584648686,
                    "2015-12-24": 7.34729970074316,
                    "2015-12-25": 7.30182234213793,
                    "2015-12-26": 7.12044437239249,
                    "2015-12-27": 8.87877607170755,
                    "2015-12-28": 9.25061821847475,
                    "2015-12-29": 9.24792513230345,
                    "2015-12-30": 8.39140318535794,
                    "2015-12-31": 8.00469951054955,
                    "2016-01-01": 7.58933582317062,
                    "2016-01-02": 7.82524529143177,
                    "2016-01-03": 8.24931374626064,
                    "2016-01-04": 9.29514097366865,
                    "2016-01-05": 8.56826646160024,
                    "2016-01-06": 8.35255436947459,
                    "2016-01-07": 8.29579811063615,
                    "2016-01-08": 8.29029259122431,
                    "2016-01-09": 7.78572089653462,
                    "2016-01-10": 8.28172399041139,
                    "2016-01-11": 8.4707303170059,
                    "2016-01-12": 8.13505390861157,
                    "2016-01-13": 8.06714903991011,
                },
                x={
                    "2015-12-02": [0.47914512134886633, 0.15759798422978488],
                    "2015-12-03": [0.3871397019785533, 0.35449477858215317],
                    "2015-12-04": [0.9056171938719492, 0.3180404540017956],
                    "2015-12-05": [0.8341924745940501, 0.1345432562146388],
                    "2015-12-06": [0.9345407030264767, 0.688343987845517],
                    "2015-12-07": [0.48729867539182836, 0.4078489909891331],
                    "2015-12-08": [0.372592361808496, 0.9657378388402957],
                    "2015-12-09": [0.8246299079349072, 0.39136849723836475],
                    "2015-12-10": [0.10775659682068173, 0.7158552999785821],
                    "2015-12-11": [0.8714315742323742, 0.6959379478245031],
                    "2015-12-12": [0.983802256917285, 0.5028086048974361],
                    "2015-12-13": [0.1637276788158426, 0.010905206265749978],
                    "2015-12-14": [0.02385161083272247, 0.6959627057263087],
                    "2015-12-15": [0.6601897150570875, 0.33970973534268967],
                    "2015-12-16": [0.050941494525972186, 0.11738703133470063],
                    "2015-12-17": [0.3959302454356002, 0.8728419968758135],
                    "2015-12-18": [0.5860088140443799, 0.5731410710012429],
                    "2015-12-19": [0.3857084524732245, 0.7271245785381963],
                    "2015-12-20": [0.37342450516631565, 0.17888199947035843],
                    "2015-12-21": [0.6981516773360145, 0.6983330714339858],
                    "2015-12-22": [0.08978675718655482, 0.45744085066175544],
                    "2015-12-23": [0.6879810190692012, 0.7650472745914928],
                    "2015-12-24": [0.3780817922426982, 0.26541942400861085],
                    "2015-12-25": [0.36377456228425953, 0.631351987243267],
                    "2015-12-26": [0.8858056528262828, 0.9929861335485208],
                    "2015-12-27": [0.7655012724712326, 0.8089415357086998],
                    "2015-12-28": [0.7802318350754168, 0.7507408790195511],
                    "2015-12-29": [0.21655713897782725, 0.39237400153061963],
                    "2015-12-30": [0.1424758142857997, 0.8902624055897677],
                    "2015-12-31": [0.643477187971131, 0.8789182584456643],
                    "2016-01-01": [0.9369855677078311, 0.609162462729402],
                    "2016-01-02": [0.0002858612957059581, 0.23697970143653724],
                    "2016-01-03": [0.16280370690002544, 0.5975722202856767],
                    "2016-01-04": [0.49310729499396044, 0.30125004072447636],
                    "2016-01-05": [0.6780776618690909, 0.06790772949375545],
                    "2016-01-06": [0.14663698589706664, 0.8886978154852969],
                    "2016-01-07": [0.4422143343461119, 0.9217301518957838],
                    "2016-01-08": [0.5100515329575456, 0.8433884706466771],
                    "2016-01-09": [0.9304379891825107, 0.7132184980129253],
                    "2016-01-10": [0.7611198221207496, 0.08381565314231354],
                    "2016-01-11": [0.4876994455855225, 0.6305043963566345],
                    "2016-01-12": [0.3807596362774567, 0.44155005068612574],
                    "2016-01-13": [0.022917032041831265, 0.8746566219855559],
                    "2016-01-14": [0.06744988617005221, 0.4867830182954117],
                    "2016-01-15": [0.2876166788506098, 0.34029767862172733],
                    "2016-01-16": [0.03136920601698312, 0.7473159671597568],
                    "2016-01-17": [0.8903106284115768, 0.6144929198235487],
                    "2016-01-18": [0.7692999747639573, 0.7318695022998711],
                    "2016-01-19": [0.8265506190532937, 0.8094527295780038],
                    "2016-01-20": [0.9902157088998235, 0.22917399968565122],
                },
                clean_ex_first=True,
            ),
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "forecast"),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder(request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def historic_forecast(
        self, *, request: SingleSeriesInsampleForecast, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Any:
        """
        Based on the provided data, this endpoint predicts time series data for the in-sample period (historical period). It takes a JSON as an input, including information like the series frequency and the historical data. (See below for a full description of the parameters.) The response contains the predicted values for the historical period. Usually useful for anomaly detection. Get your token for private beta at https://dashboard.nixtla.io.

        Parameters:
            - request: SingleSeriesInsampleForecast.

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from nixtla import SingleSeriesInsampleForecast
        from nixtla.client import AsyncNixtla

        client = AsyncNixtla(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        await client.historic_forecast(
            request=SingleSeriesInsampleForecast(
                model="timegpt-1",
                freq="D",
                level=[90],
                y={
                    "2015-12-02": 8.71177264560569,
                    "2015-12-03": 8.05610965954506,
                    "2015-12-04": 8.08147504013705,
                    "2015-12-05": 7.45876269238096,
                    "2015-12-06": 8.01400499477946,
                    "2015-12-07": 8.49678638163858,
                    "2015-12-08": 7.98104975966596,
                    "2015-12-09": 7.77779262633883,
                    "2015-12-10": 8.2602342916073,
                    "2015-12-11": 7.86633892304654,
                    "2015-12-12": 7.31055015853442,
                    "2015-12-13": 7.71824095195932,
                    "2015-12-14": 8.31947369244219,
                    "2015-12-15": 8.23668532271246,
                    "2015-12-16": 7.80751004221619,
                    "2015-12-17": 7.59186171488993,
                    "2015-12-18": 7.52886925664225,
                    "2015-12-19": 7.17165682276851,
                    "2015-12-20": 7.89133075766189,
                    "2015-12-21": 8.36007143564403,
                    "2015-12-22": 8.11042723757502,
                    "2015-12-23": 7.77527584648686,
                    "2015-12-24": 7.34729970074316,
                    "2015-12-25": 7.30182234213793,
                    "2015-12-26": 7.12044437239249,
                    "2015-12-27": 8.87877607170755,
                    "2015-12-28": 9.25061821847475,
                    "2015-12-29": 9.24792513230345,
                    "2015-12-30": 8.39140318535794,
                    "2015-12-31": 8.00469951054955,
                    "2016-01-01": 7.58933582317062,
                    "2016-01-02": 7.82524529143177,
                    "2016-01-03": 8.24931374626064,
                    "2016-01-04": 9.29514097366865,
                    "2016-01-05": 8.56826646160024,
                    "2016-01-06": 8.35255436947459,
                    "2016-01-07": 8.29579811063615,
                    "2016-01-08": 8.29029259122431,
                    "2016-01-09": 7.78572089653462,
                    "2016-01-10": 8.28172399041139,
                    "2016-01-11": 8.4707303170059,
                    "2016-01-12": 8.13505390861157,
                    "2016-01-13": 8.06714903991011,
                },
                clean_ex_first=True,
            ),
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "historic_forecast"),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder(request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def forecast_multi_series(
        self, *, request: MultiSeriesForecast, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Any:
        """
        Based on the provided data, this endpoint predicts the future values of multiple time series at once. It takes a JSON as an input containing information like the series frequency and historical data. (See below for a full description of the parameters.) The response contains the predicted values for each series based on the input arguments. Get your token for private beta at https://dashboard.nixtla.io.

        Parameters:
            - request: MultiSeriesForecast.

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from nixtla import MultiSeriesForecast
        from nixtla.client import AsyncNixtla

        client = AsyncNixtla(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        await client.forecast_multi_series(
            request=MultiSeriesForecast(),
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "forecast_multi_series"),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder(request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def historic_forecast_multi_series(
        self, *, request: MultiSeriesInsampleForecast, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Any:
        """
        Based on the provided data, this endpoint predicts the in-sample period (historical period) values of multiple time series at once. It takes a JSON as an input containing information like the series frequency and historical data. (See below for a full description of the parameters.) The response contains the predicted values for the historical period. Usually useful for anomaly detection. Get your token for private beta at https://dashboard.nixtla.io.

        Parameters:
            - request: MultiSeriesInsampleForecast.

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from nixtla import MultiSeriesInsampleForecast
        from nixtla.client import AsyncNixtla

        client = AsyncNixtla(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        await client.historic_forecast_multi_series(
            request=MultiSeriesInsampleForecast(
                model="timegpt-1",
                freq="D",
                level=[90],
                y={
                    "columns": {"0": "unique_id", "1": "ds", "2": "y"},
                    "data": {
                        "0": {
                            "0": "PeytonManning",
                            "1": "2015-12-02",
                            "2": 8.71177264560569,
                        },
                        "1": {
                            "0": "PeytonManning",
                            "1": "2015-12-03",
                            "2": 8.05610965954506,
                        },
                        "2": {
                            "0": "PeytonManning",
                            "1": "2015-12-04",
                            "2": 8.08147504013705,
                        },
                        "3": {
                            "0": "PeytonManning",
                            "1": "2015-12-05",
                            "2": 7.45876269238096,
                        },
                        "4": {
                            "0": "PeytonManning",
                            "1": "2015-12-06",
                            "2": 8.01400499477946,
                        },
                        "5": {
                            "0": "PeytonManning",
                            "1": "2015-12-07",
                            "2": 8.49678638163858,
                        },
                        "6": {
                            "0": "PeytonManning",
                            "1": "2015-12-08",
                            "2": 7.98104975966596,
                        },
                        "7": {
                            "0": "PeytonManning",
                            "1": "2015-12-09",
                            "2": 7.77779262633883,
                        },
                        "8": {
                            "0": "PeytonManning",
                            "1": "2015-12-10",
                            "2": 8.2602342916073,
                        },
                        "9": {
                            "0": "PeytonManning",
                            "1": "2015-12-11",
                            "2": 7.86633892304654,
                        },
                        "10": {
                            "0": "PeytonManning",
                            "1": "2015-12-12",
                            "2": 7.31055015853442,
                        },
                        "11": {
                            "0": "PeytonManning",
                            "1": "2015-12-13",
                            "2": 7.71824095195932,
                        },
                        "12": {
                            "0": "PeytonManning",
                            "1": "2015-12-14",
                            "2": 8.31947369244219,
                        },
                        "13": {
                            "0": "PeytonManning",
                            "1": "2015-12-15",
                            "2": 8.23668532271246,
                        },
                        "14": {
                            "0": "PeytonManning",
                            "1": "2015-12-16",
                            "2": 7.80751004221619,
                        },
                        "15": {
                            "0": "PeytonManning",
                            "1": "2015-12-17",
                            "2": 7.59186171488993,
                        },
                        "16": {
                            "0": "PeytonManning",
                            "1": "2015-12-18",
                            "2": 7.52886925664225,
                        },
                        "17": {
                            "0": "PeytonManning",
                            "1": "2015-12-19",
                            "2": 7.17165682276851,
                        },
                        "18": {
                            "0": "PeytonManning",
                            "1": "2015-12-20",
                            "2": 7.89133075766189,
                        },
                        "19": {
                            "0": "PeytonManning",
                            "1": "2015-12-21",
                            "2": 8.36007143564403,
                        },
                        "20": {
                            "0": "PeytonManning",
                            "1": "2015-12-22",
                            "2": 8.11042723757502,
                        },
                        "21": {
                            "0": "PeytonManning",
                            "1": "2015-12-23",
                            "2": 7.77527584648686,
                        },
                        "22": {
                            "0": "PeytonManning",
                            "1": "2015-12-24",
                            "2": 7.34729970074316,
                        },
                        "23": {
                            "0": "PeytonManning",
                            "1": "2015-12-25",
                            "2": 7.30182234213793,
                        },
                        "24": {
                            "0": "PeytonManning",
                            "1": "2015-12-26",
                            "2": 7.12044437239249,
                        },
                        "25": {
                            "0": "PeytonManning",
                            "1": "2015-12-27",
                            "2": 8.87877607170755,
                        },
                        "26": {
                            "0": "PeytonManning",
                            "1": "2015-12-28",
                            "2": 9.25061821847475,
                        },
                        "27": {
                            "0": "PeytonManning",
                            "1": "2015-12-29",
                            "2": 9.24792513230345,
                        },
                        "28": {
                            "0": "PeytonManning",
                            "1": "2015-12-30",
                            "2": 8.39140318535794,
                        },
                        "29": {
                            "0": "PeytonManning",
                            "1": "2015-12-31",
                            "2": 8.00469951054955,
                        },
                        "30": {
                            "0": "PeytonManning",
                            "1": "2016-01-01",
                            "2": 7.58933582317062,
                        },
                        "31": {
                            "0": "PeytonManning",
                            "1": "2016-01-02",
                            "2": 7.82524529143177,
                        },
                        "32": {
                            "0": "PeytonManning",
                            "1": "2016-01-03",
                            "2": 8.24931374626064,
                        },
                        "33": {
                            "0": "PeytonManning",
                            "1": "2016-01-04",
                            "2": 9.29514097366865,
                        },
                        "34": {
                            "0": "PeytonManning",
                            "1": "2016-01-05",
                            "2": 8.56826646160024,
                        },
                        "35": {
                            "0": "PeytonManning",
                            "1": "2016-01-06",
                            "2": 8.35255436947459,
                        },
                        "36": {
                            "0": "PeytonManning",
                            "1": "2016-01-07",
                            "2": 8.29579811063615,
                        },
                        "37": {
                            "0": "PeytonManning",
                            "1": "2016-01-08",
                            "2": 8.29029259122431,
                        },
                        "38": {
                            "0": "PeytonManning",
                            "1": "2016-01-09",
                            "2": 7.78572089653462,
                        },
                        "39": {
                            "0": "PeytonManning",
                            "1": "2016-01-10",
                            "2": 8.28172399041139,
                        },
                        "40": {
                            "0": "PeytonManning",
                            "1": "2016-01-11",
                            "2": 8.4707303170059,
                        },
                        "41": {
                            "0": "PeytonManning",
                            "1": "2016-01-12",
                            "2": 8.13505390861157,
                        },
                        "42": {
                            "0": "PeytonManning",
                            "1": "2016-01-13",
                            "2": 8.06714903991011,
                        },
                        "43": {
                            "0": "TomBrady",
                            "1": "2015-12-02",
                            "2": 8.71177264560569,
                        },
                        "44": {
                            "0": "TomBrady",
                            "1": "2015-12-03",
                            "2": 8.05610965954506,
                        },
                        "45": {
                            "0": "TomBrady",
                            "1": "2015-12-04",
                            "2": 8.08147504013705,
                        },
                        "46": {
                            "0": "TomBrady",
                            "1": "2015-12-05",
                            "2": 7.45876269238096,
                        },
                        "47": {
                            "0": "TomBrady",
                            "1": "2015-12-06",
                            "2": 8.01400499477946,
                        },
                        "48": {
                            "0": "TomBrady",
                            "1": "2015-12-07",
                            "2": 8.49678638163858,
                        },
                        "49": {
                            "0": "TomBrady",
                            "1": "2015-12-08",
                            "2": 7.98104975966596,
                        },
                        "50": {
                            "0": "TomBrady",
                            "1": "2015-12-09",
                            "2": 7.77779262633883,
                        },
                        "51": {
                            "0": "TomBrady",
                            "1": "2015-12-10",
                            "2": 8.2602342916073,
                        },
                        "52": {
                            "0": "TomBrady",
                            "1": "2015-12-11",
                            "2": 7.86633892304654,
                        },
                        "53": {
                            "0": "TomBrady",
                            "1": "2015-12-12",
                            "2": 7.31055015853442,
                        },
                        "54": {
                            "0": "TomBrady",
                            "1": "2015-12-13",
                            "2": 7.71824095195932,
                        },
                        "55": {
                            "0": "TomBrady",
                            "1": "2015-12-14",
                            "2": 8.31947369244219,
                        },
                        "56": {
                            "0": "TomBrady",
                            "1": "2015-12-15",
                            "2": 8.23668532271246,
                        },
                        "57": {
                            "0": "TomBrady",
                            "1": "2015-12-16",
                            "2": 7.80751004221619,
                        },
                        "58": {
                            "0": "TomBrady",
                            "1": "2015-12-17",
                            "2": 7.59186171488993,
                        },
                        "59": {
                            "0": "TomBrady",
                            "1": "2015-12-18",
                            "2": 7.52886925664225,
                        },
                        "60": {
                            "0": "TomBrady",
                            "1": "2015-12-19",
                            "2": 7.17165682276851,
                        },
                        "61": {
                            "0": "TomBrady",
                            "1": "2015-12-20",
                            "2": 7.89133075766189,
                        },
                        "62": {
                            "0": "TomBrady",
                            "1": "2015-12-21",
                            "2": 8.36007143564403,
                        },
                        "63": {
                            "0": "TomBrady",
                            "1": "2015-12-22",
                            "2": 8.11042723757502,
                        },
                        "64": {
                            "0": "TomBrady",
                            "1": "2015-12-23",
                            "2": 7.77527584648686,
                        },
                        "65": {
                            "0": "TomBrady",
                            "1": "2015-12-24",
                            "2": 7.34729970074316,
                        },
                        "66": {
                            "0": "TomBrady",
                            "1": "2015-12-25",
                            "2": 7.30182234213793,
                        },
                        "67": {
                            "0": "TomBrady",
                            "1": "2015-12-26",
                            "2": 7.12044437239249,
                        },
                        "68": {
                            "0": "TomBrady",
                            "1": "2015-12-27",
                            "2": 8.87877607170755,
                        },
                        "69": {
                            "0": "TomBrady",
                            "1": "2015-12-28",
                            "2": 9.25061821847475,
                        },
                        "70": {
                            "0": "TomBrady",
                            "1": "2015-12-29",
                            "2": 9.24792513230345,
                        },
                        "71": {
                            "0": "TomBrady",
                            "1": "2015-12-30",
                            "2": 8.39140318535794,
                        },
                        "72": {
                            "0": "TomBrady",
                            "1": "2015-12-31",
                            "2": 8.00469951054955,
                        },
                        "73": {
                            "0": "TomBrady",
                            "1": "2016-01-01",
                            "2": 7.58933582317062,
                        },
                        "74": {
                            "0": "TomBrady",
                            "1": "2016-01-02",
                            "2": 7.82524529143177,
                        },
                        "75": {
                            "0": "TomBrady",
                            "1": "2016-01-03",
                            "2": 8.24931374626064,
                        },
                        "76": {
                            "0": "TomBrady",
                            "1": "2016-01-04",
                            "2": 9.29514097366865,
                        },
                        "77": {
                            "0": "TomBrady",
                            "1": "2016-01-05",
                            "2": 8.56826646160024,
                        },
                        "78": {
                            "0": "TomBrady",
                            "1": "2016-01-06",
                            "2": 8.35255436947459,
                        },
                        "79": {
                            "0": "TomBrady",
                            "1": "2016-01-07",
                            "2": 8.29579811063615,
                        },
                        "80": {
                            "0": "TomBrady",
                            "1": "2016-01-08",
                            "2": 8.29029259122431,
                        },
                        "81": {
                            "0": "TomBrady",
                            "1": "2016-01-09",
                            "2": 7.78572089653462,
                        },
                        "82": {
                            "0": "TomBrady",
                            "1": "2016-01-10",
                            "2": 8.28172399041139,
                        },
                        "83": {
                            "0": "TomBrady",
                            "1": "2016-01-11",
                            "2": 8.4707303170059,
                        },
                        "84": {
                            "0": "TomBrady",
                            "1": "2016-01-12",
                            "2": 8.13505390861157,
                        },
                        "85": {
                            "0": "TomBrady",
                            "1": "2016-01-13",
                            "2": 8.06714903991011,
                        },
                    },
                },
            ),
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "historic_forecast_multi_series"),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder(request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def anomaly_detection_multi_series(
        self, *, request: MultiSeriesAnomaly, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Any:
        """
        Based on the provided data, this endpoint detects the anomalies in the historical perdiod of multiple time series at once. It takes a JSON as an input containing information like the series frequency and historical data. (See below for a full description of the parameters.) The response contains a flag indicating if the date has a anomaly and also provides the prediction interval used to define if an observation is an anomaly.Get your token for private beta at https://dashboard.nixtla.io.

        Parameters:
            - request: MultiSeriesAnomaly.

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from nixtla import MultiSeriesAnomaly
        from nixtla.client import AsyncNixtla

        client = AsyncNixtla(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        await client.anomaly_detection_multi_series(
            request=MultiSeriesAnomaly(),
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "anomaly_detection_multi_series"),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder(request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def cross_validation_multi_series(
        self, *, request: MultiSeriesCrossValidation, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Any:
        """
        Perform Cross Validation for multiple series

        Parameters:
            - request: MultiSeriesCrossValidation.

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from nixtla import MultiSeriesCrossValidation, MultiSeriesInput
        from nixtla.client import AsyncNixtla

        client = AsyncNixtla(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        await client.cross_validation_multi_series(
            request=MultiSeriesCrossValidation(
                model="timegpt-1",
                freq="D",
                level=[99],
                y={
                    "columns": {"0": "unique_id", "1": "ds", "2": "y"},
                    "data": {
                        "0": {
                            "0": "PeytonManning",
                            "1": "2015-12-02",
                            "2": 8.71177264560569,
                        },
                        "1": {
                            "0": "PeytonManning",
                            "1": "2015-12-03",
                            "2": 8.05610965954506,
                        },
                        "2": {
                            "0": "PeytonManning",
                            "1": "2015-12-04",
                            "2": 8.08147504013705,
                        },
                        "3": {
                            "0": "PeytonManning",
                            "1": "2015-12-05",
                            "2": 7.45876269238096,
                        },
                        "4": {
                            "0": "PeytonManning",
                            "1": "2015-12-06",
                            "2": 8.01400499477946,
                        },
                        "5": {
                            "0": "PeytonManning",
                            "1": "2015-12-07",
                            "2": 8.49678638163858,
                        },
                        "6": {
                            "0": "PeytonManning",
                            "1": "2015-12-08",
                            "2": 7.98104975966596,
                        },
                        "7": {
                            "0": "PeytonManning",
                            "1": "2015-12-09",
                            "2": 7.77779262633883,
                        },
                        "8": {
                            "0": "PeytonManning",
                            "1": "2015-12-10",
                            "2": 8.2602342916073,
                        },
                        "9": {
                            "0": "PeytonManning",
                            "1": "2015-12-11",
                            "2": 7.86633892304654,
                        },
                        "10": {
                            "0": "PeytonManning",
                            "1": "2015-12-12",
                            "2": 7.31055015853442,
                        },
                        "11": {
                            "0": "PeytonManning",
                            "1": "2015-12-13",
                            "2": 7.71824095195932,
                        },
                        "12": {
                            "0": "PeytonManning",
                            "1": "2015-12-14",
                            "2": 8.31947369244219,
                        },
                        "13": {
                            "0": "PeytonManning",
                            "1": "2015-12-15",
                            "2": 8.23668532271246,
                        },
                        "14": {
                            "0": "PeytonManning",
                            "1": "2015-12-16",
                            "2": 7.80751004221619,
                        },
                        "15": {
                            "0": "PeytonManning",
                            "1": "2015-12-17",
                            "2": 7.59186171488993,
                        },
                        "16": {
                            "0": "PeytonManning",
                            "1": "2015-12-18",
                            "2": 7.52886925664225,
                        },
                        "17": {
                            "0": "PeytonManning",
                            "1": "2015-12-19",
                            "2": 7.17165682276851,
                        },
                        "18": {
                            "0": "PeytonManning",
                            "1": "2015-12-20",
                            "2": 7.89133075766189,
                        },
                        "19": {
                            "0": "PeytonManning",
                            "1": "2015-12-21",
                            "2": 8.36007143564403,
                        },
                        "20": {
                            "0": "PeytonManning",
                            "1": "2015-12-22",
                            "2": 8.11042723757502,
                        },
                        "21": {
                            "0": "PeytonManning",
                            "1": "2015-12-23",
                            "2": 7.77527584648686,
                        },
                        "22": {
                            "0": "PeytonManning",
                            "1": "2015-12-24",
                            "2": 7.34729970074316,
                        },
                        "23": {
                            "0": "PeytonManning",
                            "1": "2015-12-25",
                            "2": 7.30182234213793,
                        },
                        "24": {
                            "0": "PeytonManning",
                            "1": "2015-12-26",
                            "2": 7.12044437239249,
                        },
                        "25": {
                            "0": "PeytonManning",
                            "1": "2015-12-27",
                            "2": 8.87877607170755,
                        },
                        "26": {
                            "0": "PeytonManning",
                            "1": "2015-12-28",
                            "2": 9.25061821847475,
                        },
                        "27": {
                            "0": "PeytonManning",
                            "1": "2015-12-29",
                            "2": 9.24792513230345,
                        },
                        "28": {
                            "0": "PeytonManning",
                            "1": "2015-12-30",
                            "2": 8.39140318535794,
                        },
                        "29": {
                            "0": "PeytonManning",
                            "1": "2015-12-31",
                            "2": 8.00469951054955,
                        },
                        "30": {
                            "0": "PeytonManning",
                            "1": "2016-01-01",
                            "2": 7.58933582317062,
                        },
                        "31": {
                            "0": "PeytonManning",
                            "1": "2016-01-02",
                            "2": 7.82524529143177,
                        },
                        "32": {
                            "0": "PeytonManning",
                            "1": "2016-01-03",
                            "2": 8.24931374626064,
                        },
                        "33": {
                            "0": "PeytonManning",
                            "1": "2016-01-04",
                            "2": 9.29514097366865,
                        },
                        "34": {
                            "0": "PeytonManning",
                            "1": "2016-01-05",
                            "2": 8.56826646160024,
                        },
                        "35": {
                            "0": "PeytonManning",
                            "1": "2016-01-06",
                            "2": 8.35255436947459,
                        },
                        "36": {
                            "0": "PeytonManning",
                            "1": "2016-01-07",
                            "2": 8.29579811063615,
                        },
                        "37": {
                            "0": "PeytonManning",
                            "1": "2016-01-08",
                            "2": 8.29029259122431,
                        },
                        "38": {
                            "0": "PeytonManning",
                            "1": "2016-01-09",
                            "2": 7.78572089653462,
                        },
                        "39": {
                            "0": "PeytonManning",
                            "1": "2016-01-10",
                            "2": 8.28172399041139,
                        },
                        "40": {
                            "0": "PeytonManning",
                            "1": "2016-01-11",
                            "2": 8.4707303170059,
                        },
                        "41": {
                            "0": "PeytonManning",
                            "1": "2016-01-12",
                            "2": 8.13505390861157,
                        },
                        "42": {
                            "0": "PeytonManning",
                            "1": "2016-01-13",
                            "2": 8.06714903991011,
                        },
                        "43": {
                            "0": "TomBrady",
                            "1": "2015-12-02",
                            "2": 8.71177264560569,
                        },
                        "44": {
                            "0": "TomBrady",
                            "1": "2015-12-03",
                            "2": 8.05610965954506,
                        },
                        "45": {
                            "0": "TomBrady",
                            "1": "2015-12-04",
                            "2": 8.08147504013705,
                        },
                        "46": {
                            "0": "TomBrady",
                            "1": "2015-12-05",
                            "2": 7.45876269238096,
                        },
                        "47": {
                            "0": "TomBrady",
                            "1": "2015-12-06",
                            "2": 8.01400499477946,
                        },
                        "48": {
                            "0": "TomBrady",
                            "1": "2015-12-07",
                            "2": 8.49678638163858,
                        },
                        "49": {
                            "0": "TomBrady",
                            "1": "2015-12-08",
                            "2": 7.98104975966596,
                        },
                        "50": {
                            "0": "TomBrady",
                            "1": "2015-12-09",
                            "2": 7.77779262633883,
                        },
                        "51": {
                            "0": "TomBrady",
                            "1": "2015-12-10",
                            "2": 8.2602342916073,
                        },
                        "52": {
                            "0": "TomBrady",
                            "1": "2015-12-11",
                            "2": 7.86633892304654,
                        },
                        "53": {
                            "0": "TomBrady",
                            "1": "2015-12-12",
                            "2": 7.31055015853442,
                        },
                        "54": {
                            "0": "TomBrady",
                            "1": "2015-12-13",
                            "2": 7.71824095195932,
                        },
                        "55": {
                            "0": "TomBrady",
                            "1": "2015-12-14",
                            "2": 8.31947369244219,
                        },
                        "56": {
                            "0": "TomBrady",
                            "1": "2015-12-15",
                            "2": 8.23668532271246,
                        },
                        "57": {
                            "0": "TomBrady",
                            "1": "2015-12-16",
                            "2": 7.80751004221619,
                        },
                        "58": {
                            "0": "TomBrady",
                            "1": "2015-12-17",
                            "2": 7.59186171488993,
                        },
                        "59": {
                            "0": "TomBrady",
                            "1": "2015-12-18",
                            "2": 7.52886925664225,
                        },
                        "60": {
                            "0": "TomBrady",
                            "1": "2015-12-19",
                            "2": 7.17165682276851,
                        },
                        "61": {
                            "0": "TomBrady",
                            "1": "2015-12-20",
                            "2": 7.89133075766189,
                        },
                        "62": {
                            "0": "TomBrady",
                            "1": "2015-12-21",
                            "2": 8.36007143564403,
                        },
                        "63": {
                            "0": "TomBrady",
                            "1": "2015-12-22",
                            "2": 8.11042723757502,
                        },
                        "64": {
                            "0": "TomBrady",
                            "1": "2015-12-23",
                            "2": 7.77527584648686,
                        },
                        "65": {
                            "0": "TomBrady",
                            "1": "2015-12-24",
                            "2": 7.34729970074316,
                        },
                        "66": {
                            "0": "TomBrady",
                            "1": "2015-12-25",
                            "2": 7.30182234213793,
                        },
                        "67": {
                            "0": "TomBrady",
                            "1": "2015-12-26",
                            "2": 7.12044437239249,
                        },
                        "68": {
                            "0": "TomBrady",
                            "1": "2015-12-27",
                            "2": 8.87877607170755,
                        },
                        "69": {
                            "0": "TomBrady",
                            "1": "2015-12-28",
                            "2": 9.25061821847475,
                        },
                        "70": {
                            "0": "TomBrady",
                            "1": "2015-12-29",
                            "2": 9.24792513230345,
                        },
                        "71": {
                            "0": "TomBrady",
                            "1": "2015-12-30",
                            "2": 8.39140318535794,
                        },
                        "72": {
                            "0": "TomBrady",
                            "1": "2015-12-31",
                            "2": 8.00469951054955,
                        },
                        "73": {
                            "0": "TomBrady",
                            "1": "2016-01-01",
                            "2": 7.58933582317062,
                        },
                        "74": {
                            "0": "TomBrady",
                            "1": "2016-01-02",
                            "2": 7.82524529143177,
                        },
                        "75": {
                            "0": "TomBrady",
                            "1": "2016-01-03",
                            "2": 8.24931374626064,
                        },
                        "76": {
                            "0": "TomBrady",
                            "1": "2016-01-04",
                            "2": 9.29514097366865,
                        },
                        "77": {
                            "0": "TomBrady",
                            "1": "2016-01-05",
                            "2": 8.56826646160024,
                        },
                        "78": {
                            "0": "TomBrady",
                            "1": "2016-01-06",
                            "2": 8.35255436947459,
                        },
                        "79": {
                            "0": "TomBrady",
                            "1": "2016-01-07",
                            "2": 8.29579811063615,
                        },
                        "80": {
                            "0": "TomBrady",
                            "1": "2016-01-08",
                            "2": 8.29029259122431,
                        },
                        "81": {
                            "0": "TomBrady",
                            "1": "2016-01-09",
                            "2": 7.78572089653462,
                        },
                        "82": {
                            "0": "TomBrady",
                            "1": "2016-01-10",
                            "2": 8.28172399041139,
                        },
                        "83": {
                            "0": "TomBrady",
                            "1": "2016-01-11",
                            "2": 8.4707303170059,
                        },
                        "84": {
                            "0": "TomBrady",
                            "1": "2016-01-12",
                            "2": 8.13505390861157,
                        },
                        "85": {
                            "0": "TomBrady",
                            "1": "2016-01-13",
                            "2": 8.06714903991011,
                        },
                    },
                },
                x=MultiSeriesInput(
                    columns=[
                        "unique_id",
                        "ds",
                        "normalized_fb_marketing_spend",
                        "normalized_google_marketing_spend",
                    ],
                    data=[
                        {
                            "0": "PeytonManning",
                            "1": "2015-12-02",
                            "2": 0.11477860928915096,
                            "3": 0.5844987825930846,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2015-12-03",
                            "2": 0.33533486335091345,
                            "3": 0.35513740030391416,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2015-12-04",
                            "2": 0.17530305631523613,
                            "3": 0.7727084723706166,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2015-12-05",
                            "2": 0.8299454704953892,
                            "3": 0.367618075472813,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2015-12-06",
                            "2": 0.15521852990872909,
                            "3": 0.3003195772529532,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2015-12-07",
                            "2": 0.14306595403784284,
                            "3": 0.7070431427763944,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2015-12-08",
                            "2": 0.19385462445583268,
                            "3": 0.3548795168204949,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2015-12-09",
                            "2": 0.13255788839340688,
                            "3": 0.17898066409986724,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2015-12-10",
                            "2": 0.1861402159494574,
                            "3": 0.7109080209067455,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2015-12-11",
                            "2": 0.6416719826327762,
                            "3": 0.029753630490418792,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2015-12-12",
                            "2": 0.07255444629238816,
                            "3": 0.29036094427412484,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2015-12-13",
                            "2": 0.5908563921496247,
                            "3": 0.4391612122175276,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2015-12-14",
                            "2": 0.4564108681832745,
                            "3": 0.36666762551686216,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2015-12-15",
                            "2": 0.5842063222179616,
                            "3": 0.7725253746268812,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2015-12-16",
                            "2": 0.7032064831874294,
                            "3": 0.011741920837716524,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2015-12-17",
                            "2": 0.1819442499802637,
                            "3": 0.024847038984041947,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2015-12-18",
                            "2": 0.0236088273599101,
                            "3": 0.6750163977742368,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2015-12-19",
                            "2": 0.05606508858414727,
                            "3": 0.7476944076745794,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2015-12-20",
                            "2": 0.23105144001754685,
                            "3": 0.0975599293231374,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2015-12-21",
                            "2": 0.046529460623970675,
                            "3": 0.27870858983273483,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2015-12-22",
                            "2": 0.8924837450040128,
                            "3": 0.17445021431427998,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2015-12-23",
                            "2": 0.7920741814997206,
                            "3": 0.7697260533294017,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2015-12-24",
                            "2": 0.8211104441803947,
                            "3": 0.04784956766271531,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2015-12-25",
                            "2": 0.007443038001649138,
                            "3": 0.14607178743713456,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2015-12-26",
                            "2": 0.007103558258280018,
                            "3": 0.9906539418801805,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2015-12-27",
                            "2": 0.6056133597337183,
                            "3": 0.3016989995056749,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2015-12-28",
                            "2": 0.888562531622971,
                            "3": 0.2644957566378502,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2015-12-29",
                            "2": 0.6596339635369193,
                            "3": 0.7132049526406711,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2015-12-30",
                            "2": 0.28384590920981123,
                            "3": 0.33014709090685734,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2015-12-31",
                            "2": 0.8909381460163546,
                            "3": 0.30893091621071356,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2016-01-01",
                            "2": 0.40276798240151035,
                            "3": 0.2879315229860593,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2016-01-02",
                            "2": 0.4429162268378485,
                            "3": 0.11018732403878562,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2016-01-03",
                            "2": 0.3828367947132504,
                            "3": 0.8222282482537393,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2016-01-04",
                            "2": 0.058573708628411714,
                            "3": 0.0882973927279318,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2016-01-05",
                            "2": 0.47488775903843816,
                            "3": 0.6966251353738419,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2016-01-06",
                            "2": 0.5977462692254242,
                            "3": 0.047135156470394235,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2016-01-07",
                            "2": 0.3717147185460784,
                            "3": 0.8692903226725259,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2016-01-08",
                            "2": 0.9309630632764513,
                            "3": 0.9735989812217806,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2016-01-09",
                            "2": 0.16911221748337524,
                            "3": 0.8789858343082052,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2016-01-10",
                            "2": 0.27006313791342074,
                            "3": 0.11164112580033247,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2016-01-11",
                            "2": 0.7963113076957269,
                            "3": 0.20769916997452176,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2016-01-12",
                            "2": 0.6303426283630738,
                            "3": 0.18090725407449992,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2016-01-13",
                            "2": 0.8493379197928459,
                            "3": 0.47689004776049004,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2016-01-14",
                            "2": 0.23526591138844477,
                            "3": 0.8789956293235727,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2016-01-15",
                            "2": 0.007675903871696255,
                            "3": 0.43933947505823356,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2016-01-16",
                            "2": 0.47352555302489163,
                            "3": 0.2152806277171031,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2016-01-17",
                            "2": 0.15708565708379674,
                            "3": 0.3691423619421067,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2016-01-18",
                            "2": 0.1455797785998202,
                            "3": 0.12414992893989352,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2016-01-19",
                            "2": 0.18260071049899873,
                            "3": 0.4700149101718504,
                        },
                        {
                            "0": "PeytonManning",
                            "1": "2016-01-20",
                            "2": 0.815333051511914,
                            "3": 0.6872087681704713,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2015-12-02",
                            "2": 0.11477860928915096,
                            "3": 0.5844987825930846,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2015-12-03",
                            "2": 0.33533486335091345,
                            "3": 0.35513740030391416,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2015-12-04",
                            "2": 0.17530305631523613,
                            "3": 0.7727084723706166,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2015-12-05",
                            "2": 0.8299454704953892,
                            "3": 0.367618075472813,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2015-12-06",
                            "2": 0.15521852990872909,
                            "3": 0.3003195772529532,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2015-12-07",
                            "2": 0.14306595403784284,
                            "3": 0.7070431427763944,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2015-12-08",
                            "2": 0.19385462445583268,
                            "3": 0.3548795168204949,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2015-12-09",
                            "2": 0.13255788839340688,
                            "3": 0.17898066409986724,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2015-12-10",
                            "2": 0.1861402159494574,
                            "3": 0.7109080209067455,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2015-12-11",
                            "2": 0.6416719826327762,
                            "3": 0.029753630490418792,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2015-12-12",
                            "2": 0.07255444629238816,
                            "3": 0.29036094427412484,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2015-12-13",
                            "2": 0.5908563921496247,
                            "3": 0.4391612122175276,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2015-12-14",
                            "2": 0.4564108681832745,
                            "3": 0.36666762551686216,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2015-12-15",
                            "2": 0.5842063222179616,
                            "3": 0.7725253746268812,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2015-12-16",
                            "2": 0.7032064831874294,
                            "3": 0.011741920837716524,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2015-12-17",
                            "2": 0.1819442499802637,
                            "3": 0.024847038984041947,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2015-12-18",
                            "2": 0.0236088273599101,
                            "3": 0.6750163977742368,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2015-12-19",
                            "2": 0.05606508858414727,
                            "3": 0.7476944076745794,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2015-12-20",
                            "2": 0.23105144001754685,
                            "3": 0.0975599293231374,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2015-12-21",
                            "2": 0.046529460623970675,
                            "3": 0.27870858983273483,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2015-12-22",
                            "2": 0.8924837450040128,
                            "3": 0.17445021431427998,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2015-12-23",
                            "2": 0.7920741814997206,
                            "3": 0.7697260533294017,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2015-12-24",
                            "2": 0.8211104441803947,
                            "3": 0.04784956766271531,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2015-12-25",
                            "2": 0.007443038001649138,
                            "3": 0.14607178743713456,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2015-12-26",
                            "2": 0.007103558258280018,
                            "3": 0.9906539418801805,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2015-12-27",
                            "2": 0.6056133597337183,
                            "3": 0.3016989995056749,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2015-12-28",
                            "2": 0.888562531622971,
                            "3": 0.2644957566378502,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2015-12-29",
                            "2": 0.6596339635369193,
                            "3": 0.7132049526406711,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2015-12-30",
                            "2": 0.28384590920981123,
                            "3": 0.33014709090685734,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2015-12-31",
                            "2": 0.8909381460163546,
                            "3": 0.30893091621071356,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2016-01-01",
                            "2": 0.40276798240151035,
                            "3": 0.2879315229860593,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2016-01-02",
                            "2": 0.4429162268378485,
                            "3": 0.11018732403878562,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2016-01-03",
                            "2": 0.3828367947132504,
                            "3": 0.8222282482537393,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2016-01-04",
                            "2": 0.058573708628411714,
                            "3": 0.0882973927279318,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2016-01-05",
                            "2": 0.47488775903843816,
                            "3": 0.6966251353738419,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2016-01-06",
                            "2": 0.5977462692254242,
                            "3": 0.047135156470394235,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2016-01-07",
                            "2": 0.3717147185460784,
                            "3": 0.8692903226725259,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2016-01-08",
                            "2": 0.9309630632764513,
                            "3": 0.9735989812217806,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2016-01-09",
                            "2": 0.16911221748337524,
                            "3": 0.8789858343082052,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2016-01-10",
                            "2": 0.27006313791342074,
                            "3": 0.11164112580033247,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2016-01-11",
                            "2": 0.7963113076957269,
                            "3": 0.20769916997452176,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2016-01-12",
                            "2": 0.6303426283630738,
                            "3": 0.18090725407449992,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2016-01-13",
                            "2": 0.8493379197928459,
                            "3": 0.47689004776049004,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2016-01-14",
                            "2": 0.23526591138844477,
                            "3": 0.8789956293235727,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2016-01-15",
                            "2": 0.007675903871696255,
                            "3": 0.43933947505823356,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2016-01-16",
                            "2": 0.47352555302489163,
                            "3": 0.2152806277171031,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2016-01-17",
                            "2": 0.15708565708379674,
                            "3": 0.3691423619421067,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2016-01-18",
                            "2": 0.1455797785998202,
                            "3": 0.12414992893989352,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2016-01-19",
                            "2": 0.18260071049899873,
                            "3": 0.4700149101718504,
                        },
                        {
                            "0": "TomBrady",
                            "1": "2016-01-20",
                            "2": 0.815333051511914,
                            "3": 0.6872087681704713,
                        },
                    ],
                ),
            ),
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "cross_validation_multi_series"),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder(request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def model_input_size(
        self, *, request: SingleSeriesForecast, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Any:
        """
        Parameters:
            - request: SingleSeriesForecast.

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from nixtla import SingleSeriesForecast
        from nixtla.client import AsyncNixtla

        client = AsyncNixtla(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        await client.model_input_size(
            request=SingleSeriesForecast(),
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "model_input_size"),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder(request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def model_params(
        self, *, request: SingleSeriesForecast, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Any:
        """
        Parameters:
            - request: SingleSeriesForecast.

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from nixtla import SingleSeriesForecast
        from nixtla.client import AsyncNixtla

        client = AsyncNixtla(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        await client.model_params(
            request=SingleSeriesForecast(),
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "model_params"),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder(request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def timegpt(
        self, *, request: SingleSeriesForecast, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Any:
        """
        This endpoint predicts the future values of a single time series based on the provided data. It takes a JSON as an input containing information like the series frequency and historical data. (See below for a full description of the parameters.) The response contains the predicted values based on the input arguments. Get your token for private beta at https://dashboard.nixtla.io

        Parameters:
            - request: SingleSeriesForecast.

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from nixtla import SingleSeriesForecast
        from nixtla.client import AsyncNixtla

        client = AsyncNixtla(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        await client.timegpt(
            request=SingleSeriesForecast(
                fewshot_steps=0,
                model="timegpt-1",
                freq="D",
                level=[90],
                fh=7,
                y={
                    "2015-12-02": 8.71177264560569,
                    "2015-12-03": 8.05610965954506,
                    "2015-12-04": 8.08147504013705,
                    "2015-12-05": 7.45876269238096,
                    "2015-12-06": 8.01400499477946,
                    "2015-12-07": 8.49678638163858,
                    "2015-12-08": 7.98104975966596,
                    "2015-12-09": 7.77779262633883,
                    "2015-12-10": 8.2602342916073,
                    "2015-12-11": 7.86633892304654,
                    "2015-12-12": 7.31055015853442,
                    "2015-12-13": 7.71824095195932,
                    "2015-12-14": 8.31947369244219,
                    "2015-12-15": 8.23668532271246,
                    "2015-12-16": 7.80751004221619,
                    "2015-12-17": 7.59186171488993,
                    "2015-12-18": 7.52886925664225,
                    "2015-12-19": 7.17165682276851,
                    "2015-12-20": 7.89133075766189,
                    "2015-12-21": 8.36007143564403,
                    "2015-12-22": 8.11042723757502,
                    "2015-12-23": 7.77527584648686,
                    "2015-12-24": 7.34729970074316,
                    "2015-12-25": 7.30182234213793,
                    "2015-12-26": 7.12044437239249,
                    "2015-12-27": 8.87877607170755,
                    "2015-12-28": 9.25061821847475,
                    "2015-12-29": 9.24792513230345,
                    "2015-12-30": 8.39140318535794,
                    "2015-12-31": 8.00469951054955,
                    "2016-01-01": 7.58933582317062,
                    "2016-01-02": 7.82524529143177,
                    "2016-01-03": 8.24931374626064,
                    "2016-01-04": 9.29514097366865,
                    "2016-01-05": 8.56826646160024,
                    "2016-01-06": 8.35255436947459,
                    "2016-01-07": 8.29579811063615,
                    "2016-01-08": 8.29029259122431,
                    "2016-01-09": 7.78572089653462,
                    "2016-01-10": 8.28172399041139,
                    "2016-01-11": 8.4707303170059,
                    "2016-01-12": 8.13505390861157,
                    "2016-01-13": 8.06714903991011,
                },
                x={
                    "2015-12-02": [0.09323074669638598, 0.6368254238538134],
                    "2015-12-03": [0.3112324026372236, 0.6889811850504678],
                    "2015-12-04": [0.481377116596614, 0.9499072761820243],
                    "2015-12-05": [0.828714746663481, 0.8041572577576312],
                    "2015-12-06": [0.9057716575675051, 0.9704840572309358],
                    "2015-12-07": [0.11973559067683959, 0.5511723211494531],
                    "2015-12-08": [0.7606320950967038, 0.6502204496427739],
                    "2015-12-09": [0.6674402019606482, 0.5371174184068592],
                    "2015-12-10": [0.6309756549373285, 0.5962737337684483],
                    "2015-12-11": [0.43906877315373927, 0.1654105249520328],
                    "2015-12-12": [0.04035053656768495, 0.015327409476712961],
                    "2015-12-13": [0.24377685055222176, 0.8627561902830486],
                    "2015-12-14": [0.4681463148103986, 0.7889604220806076],
                    "2015-12-15": [0.08345764193688965, 0.1003789877662995],
                    "2015-12-16": [0.4771178995736667, 0.4958892103475401],
                    "2015-12-17": [0.3486535805107692, 0.1148378356945654],
                    "2015-12-18": [0.6630786017711142, 0.3849924472769859],
                    "2015-12-19": [0.011778418994099704, 0.5115520644698133],
                    "2015-12-20": [0.9038837166773512, 0.8848353753020387],
                    "2015-12-21": [0.7843282827835409, 0.3103093475671188],
                    "2015-12-22": [0.25362104487399484, 0.9254139777164822],
                    "2015-12-23": [0.30107456907444907, 0.33020953364803796],
                    "2015-12-24": [0.027255284501599086, 0.9447565679813503],
                    "2015-12-25": [0.40549024123597277, 0.9460884659190596],
                    "2015-12-26": [0.5016171568983224, 0.7067171277571931],
                    "2015-12-27": [0.827190957653689, 0.4005053404479477],
                    "2015-12-28": [0.2596591659030716, 0.47506589627248297],
                    "2015-12-29": [0.49720915846888825, 0.6751702910147392],
                    "2015-12-30": [0.6674937132903789, 0.9931963725210304],
                    "2015-12-31": [0.9291459144099821, 0.43747139612392505],
                    "2016-01-01": [0.9582822834991531, 0.04487218641374102],
                    "2016-01-02": [0.029270976123749515, 0.23398035651852978],
                    "2016-01-03": [0.515109021575783, 0.808477728186397],
                    "2016-01-04": [0.5435684835160831, 0.07870797706843025],
                    "2016-01-05": [0.7621319274444724, 0.8516085958801328],
                    "2016-01-06": [0.26156943890310125, 0.5111017026367417],
                    "2016-01-07": [0.0564861467325366, 0.12697067125791017],
                    "2016-01-08": [0.37440546078742454, 0.2012358008441526],
                    "2016-01-09": [0.29688542060907375, 0.43556021285702873],
                    "2016-01-10": [0.9898730907589448, 0.7713248129524874],
                    "2016-01-11": [0.49238285777903246, 0.7197147811618813],
                    "2016-01-12": [0.8318652201289694, 0.6091414491883265],
                    "2016-01-13": [0.02343720965025453, 0.7961211448973647],
                    "2016-01-14": [0.7633021263247786, 0.018469346610634263],
                    "2016-01-15": [0.493855721362772, 0.7451084649371831],
                    "2016-01-16": [0.21962262556226464, 0.9274272764531087],
                    "2016-01-17": [0.885379459035442, 0.3507870357790486],
                    "2016-01-18": [0.6460546060324733, 0.8225983771798888],
                    "2016-01-19": [0.3604601800609517, 0.4588944740666544],
                    "2016-01-20": [0.4191777260908942, 0.2500836388909915],
                },
                clean_ex_first=True,
            ),
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "timegpt"),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder(request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def timegpt_historic(
        self, *, request: SingleSeriesInsampleForecast, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Any:
        """
        Based on the provided data, this endpoint predicts time series data for the in-sample period (historical period). It takes a JSON as an input, including information like the series frequency and the historical data. (See below for a full description of the parameters.) The response contains the predicted values for the historical period. Usually useful for anomaly detection. Get your token for private beta at https://dashboard.nixtla.io.

        Parameters:
            - request: SingleSeriesInsampleForecast.

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from nixtla import SingleSeriesInsampleForecast
        from nixtla.client import AsyncNixtla

        client = AsyncNixtla(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        await client.timegpt_historic(
            request=SingleSeriesInsampleForecast(
                model="timegpt-1",
                freq="D",
                level=[90],
                y={
                    "2015-12-02": 8.71177264560569,
                    "2015-12-03": 8.05610965954506,
                    "2015-12-04": 8.08147504013705,
                    "2015-12-05": 7.45876269238096,
                    "2015-12-06": 8.01400499477946,
                    "2015-12-07": 8.49678638163858,
                    "2015-12-08": 7.98104975966596,
                    "2015-12-09": 7.77779262633883,
                    "2015-12-10": 8.2602342916073,
                    "2015-12-11": 7.86633892304654,
                    "2015-12-12": 7.31055015853442,
                    "2015-12-13": 7.71824095195932,
                    "2015-12-14": 8.31947369244219,
                    "2015-12-15": 8.23668532271246,
                    "2015-12-16": 7.80751004221619,
                    "2015-12-17": 7.59186171488993,
                    "2015-12-18": 7.52886925664225,
                    "2015-12-19": 7.17165682276851,
                    "2015-12-20": 7.89133075766189,
                    "2015-12-21": 8.36007143564403,
                    "2015-12-22": 8.11042723757502,
                    "2015-12-23": 7.77527584648686,
                    "2015-12-24": 7.34729970074316,
                    "2015-12-25": 7.30182234213793,
                    "2015-12-26": 7.12044437239249,
                    "2015-12-27": 8.87877607170755,
                    "2015-12-28": 9.25061821847475,
                    "2015-12-29": 9.24792513230345,
                    "2015-12-30": 8.39140318535794,
                    "2015-12-31": 8.00469951054955,
                    "2016-01-01": 7.58933582317062,
                    "2016-01-02": 7.82524529143177,
                    "2016-01-03": 8.24931374626064,
                    "2016-01-04": 9.29514097366865,
                    "2016-01-05": 8.56826646160024,
                    "2016-01-06": 8.35255436947459,
                    "2016-01-07": 8.29579811063615,
                    "2016-01-08": 8.29029259122431,
                    "2016-01-09": 7.78572089653462,
                    "2016-01-10": 8.28172399041139,
                    "2016-01-11": 8.4707303170059,
                    "2016-01-12": 8.13505390861157,
                    "2016-01-13": 8.06714903991011,
                },
                clean_ex_first=True,
            ),
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "timegpt_historic"),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder(request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def timegpt_multi_series(
        self, *, request: MultiSeriesForecast, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Any:
        """
        Based on the provided data, this endpoint predicts the future values of multiple time series at once. It takes a JSON as an input containing information like the series frequency and historical data. (See below for a full description of the parameters.) The response contains the predicted values for each series based on the input arguments. Get your token for private beta at https://dashboard.nixtla.io.

        Parameters:
            - request: MultiSeriesForecast.

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from nixtla import MultiSeriesForecast
        from nixtla.client import AsyncNixtla

        client = AsyncNixtla(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        await client.timegpt_multi_series(
            request=MultiSeriesForecast(),
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "timegpt_multi_series"),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder(request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def timegpt_multi_series_historic(
        self, *, request: MultiSeriesInsampleForecast, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Any:
        """
        Based on the provided data, this endpoint predicts the in-sample period (historical period) values of multiple time series at once. It takes a JSON as an input containing information like the series frequency and historical data. (See below for a full description of the parameters.) The response contains the predicted values for the historical period. Usually useful for anomaly detection. Get your token for private beta at https://dashboard.nixtla.io.

        Parameters:
            - request: MultiSeriesInsampleForecast.

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from nixtla import MultiSeriesInsampleForecast
        from nixtla.client import AsyncNixtla

        client = AsyncNixtla(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        await client.timegpt_multi_series_historic(
            request=MultiSeriesInsampleForecast(
                model="timegpt-1",
                freq="D",
                level=[90],
                y={
                    "columns": {"0": "unique_id", "1": "ds", "2": "y"},
                    "data": {
                        "0": {
                            "0": "PeytonManning",
                            "1": "2015-12-02",
                            "2": 8.71177264560569,
                        },
                        "1": {
                            "0": "PeytonManning",
                            "1": "2015-12-03",
                            "2": 8.05610965954506,
                        },
                        "2": {
                            "0": "PeytonManning",
                            "1": "2015-12-04",
                            "2": 8.08147504013705,
                        },
                        "3": {
                            "0": "PeytonManning",
                            "1": "2015-12-05",
                            "2": 7.45876269238096,
                        },
                        "4": {
                            "0": "PeytonManning",
                            "1": "2015-12-06",
                            "2": 8.01400499477946,
                        },
                        "5": {
                            "0": "PeytonManning",
                            "1": "2015-12-07",
                            "2": 8.49678638163858,
                        },
                        "6": {
                            "0": "PeytonManning",
                            "1": "2015-12-08",
                            "2": 7.98104975966596,
                        },
                        "7": {
                            "0": "PeytonManning",
                            "1": "2015-12-09",
                            "2": 7.77779262633883,
                        },
                        "8": {
                            "0": "PeytonManning",
                            "1": "2015-12-10",
                            "2": 8.2602342916073,
                        },
                        "9": {
                            "0": "PeytonManning",
                            "1": "2015-12-11",
                            "2": 7.86633892304654,
                        },
                        "10": {
                            "0": "PeytonManning",
                            "1": "2015-12-12",
                            "2": 7.31055015853442,
                        },
                        "11": {
                            "0": "PeytonManning",
                            "1": "2015-12-13",
                            "2": 7.71824095195932,
                        },
                        "12": {
                            "0": "PeytonManning",
                            "1": "2015-12-14",
                            "2": 8.31947369244219,
                        },
                        "13": {
                            "0": "PeytonManning",
                            "1": "2015-12-15",
                            "2": 8.23668532271246,
                        },
                        "14": {
                            "0": "PeytonManning",
                            "1": "2015-12-16",
                            "2": 7.80751004221619,
                        },
                        "15": {
                            "0": "PeytonManning",
                            "1": "2015-12-17",
                            "2": 7.59186171488993,
                        },
                        "16": {
                            "0": "PeytonManning",
                            "1": "2015-12-18",
                            "2": 7.52886925664225,
                        },
                        "17": {
                            "0": "PeytonManning",
                            "1": "2015-12-19",
                            "2": 7.17165682276851,
                        },
                        "18": {
                            "0": "PeytonManning",
                            "1": "2015-12-20",
                            "2": 7.89133075766189,
                        },
                        "19": {
                            "0": "PeytonManning",
                            "1": "2015-12-21",
                            "2": 8.36007143564403,
                        },
                        "20": {
                            "0": "PeytonManning",
                            "1": "2015-12-22",
                            "2": 8.11042723757502,
                        },
                        "21": {
                            "0": "PeytonManning",
                            "1": "2015-12-23",
                            "2": 7.77527584648686,
                        },
                        "22": {
                            "0": "PeytonManning",
                            "1": "2015-12-24",
                            "2": 7.34729970074316,
                        },
                        "23": {
                            "0": "PeytonManning",
                            "1": "2015-12-25",
                            "2": 7.30182234213793,
                        },
                        "24": {
                            "0": "PeytonManning",
                            "1": "2015-12-26",
                            "2": 7.12044437239249,
                        },
                        "25": {
                            "0": "PeytonManning",
                            "1": "2015-12-27",
                            "2": 8.87877607170755,
                        },
                        "26": {
                            "0": "PeytonManning",
                            "1": "2015-12-28",
                            "2": 9.25061821847475,
                        },
                        "27": {
                            "0": "PeytonManning",
                            "1": "2015-12-29",
                            "2": 9.24792513230345,
                        },
                        "28": {
                            "0": "PeytonManning",
                            "1": "2015-12-30",
                            "2": 8.39140318535794,
                        },
                        "29": {
                            "0": "PeytonManning",
                            "1": "2015-12-31",
                            "2": 8.00469951054955,
                        },
                        "30": {
                            "0": "PeytonManning",
                            "1": "2016-01-01",
                            "2": 7.58933582317062,
                        },
                        "31": {
                            "0": "PeytonManning",
                            "1": "2016-01-02",
                            "2": 7.82524529143177,
                        },
                        "32": {
                            "0": "PeytonManning",
                            "1": "2016-01-03",
                            "2": 8.24931374626064,
                        },
                        "33": {
                            "0": "PeytonManning",
                            "1": "2016-01-04",
                            "2": 9.29514097366865,
                        },
                        "34": {
                            "0": "PeytonManning",
                            "1": "2016-01-05",
                            "2": 8.56826646160024,
                        },
                        "35": {
                            "0": "PeytonManning",
                            "1": "2016-01-06",
                            "2": 8.35255436947459,
                        },
                        "36": {
                            "0": "PeytonManning",
                            "1": "2016-01-07",
                            "2": 8.29579811063615,
                        },
                        "37": {
                            "0": "PeytonManning",
                            "1": "2016-01-08",
                            "2": 8.29029259122431,
                        },
                        "38": {
                            "0": "PeytonManning",
                            "1": "2016-01-09",
                            "2": 7.78572089653462,
                        },
                        "39": {
                            "0": "PeytonManning",
                            "1": "2016-01-10",
                            "2": 8.28172399041139,
                        },
                        "40": {
                            "0": "PeytonManning",
                            "1": "2016-01-11",
                            "2": 8.4707303170059,
                        },
                        "41": {
                            "0": "PeytonManning",
                            "1": "2016-01-12",
                            "2": 8.13505390861157,
                        },
                        "42": {
                            "0": "PeytonManning",
                            "1": "2016-01-13",
                            "2": 8.06714903991011,
                        },
                        "43": {
                            "0": "TomBrady",
                            "1": "2015-12-02",
                            "2": 8.71177264560569,
                        },
                        "44": {
                            "0": "TomBrady",
                            "1": "2015-12-03",
                            "2": 8.05610965954506,
                        },
                        "45": {
                            "0": "TomBrady",
                            "1": "2015-12-04",
                            "2": 8.08147504013705,
                        },
                        "46": {
                            "0": "TomBrady",
                            "1": "2015-12-05",
                            "2": 7.45876269238096,
                        },
                        "47": {
                            "0": "TomBrady",
                            "1": "2015-12-06",
                            "2": 8.01400499477946,
                        },
                        "48": {
                            "0": "TomBrady",
                            "1": "2015-12-07",
                            "2": 8.49678638163858,
                        },
                        "49": {
                            "0": "TomBrady",
                            "1": "2015-12-08",
                            "2": 7.98104975966596,
                        },
                        "50": {
                            "0": "TomBrady",
                            "1": "2015-12-09",
                            "2": 7.77779262633883,
                        },
                        "51": {
                            "0": "TomBrady",
                            "1": "2015-12-10",
                            "2": 8.2602342916073,
                        },
                        "52": {
                            "0": "TomBrady",
                            "1": "2015-12-11",
                            "2": 7.86633892304654,
                        },
                        "53": {
                            "0": "TomBrady",
                            "1": "2015-12-12",
                            "2": 7.31055015853442,
                        },
                        "54": {
                            "0": "TomBrady",
                            "1": "2015-12-13",
                            "2": 7.71824095195932,
                        },
                        "55": {
                            "0": "TomBrady",
                            "1": "2015-12-14",
                            "2": 8.31947369244219,
                        },
                        "56": {
                            "0": "TomBrady",
                            "1": "2015-12-15",
                            "2": 8.23668532271246,
                        },
                        "57": {
                            "0": "TomBrady",
                            "1": "2015-12-16",
                            "2": 7.80751004221619,
                        },
                        "58": {
                            "0": "TomBrady",
                            "1": "2015-12-17",
                            "2": 7.59186171488993,
                        },
                        "59": {
                            "0": "TomBrady",
                            "1": "2015-12-18",
                            "2": 7.52886925664225,
                        },
                        "60": {
                            "0": "TomBrady",
                            "1": "2015-12-19",
                            "2": 7.17165682276851,
                        },
                        "61": {
                            "0": "TomBrady",
                            "1": "2015-12-20",
                            "2": 7.89133075766189,
                        },
                        "62": {
                            "0": "TomBrady",
                            "1": "2015-12-21",
                            "2": 8.36007143564403,
                        },
                        "63": {
                            "0": "TomBrady",
                            "1": "2015-12-22",
                            "2": 8.11042723757502,
                        },
                        "64": {
                            "0": "TomBrady",
                            "1": "2015-12-23",
                            "2": 7.77527584648686,
                        },
                        "65": {
                            "0": "TomBrady",
                            "1": "2015-12-24",
                            "2": 7.34729970074316,
                        },
                        "66": {
                            "0": "TomBrady",
                            "1": "2015-12-25",
                            "2": 7.30182234213793,
                        },
                        "67": {
                            "0": "TomBrady",
                            "1": "2015-12-26",
                            "2": 7.12044437239249,
                        },
                        "68": {
                            "0": "TomBrady",
                            "1": "2015-12-27",
                            "2": 8.87877607170755,
                        },
                        "69": {
                            "0": "TomBrady",
                            "1": "2015-12-28",
                            "2": 9.25061821847475,
                        },
                        "70": {
                            "0": "TomBrady",
                            "1": "2015-12-29",
                            "2": 9.24792513230345,
                        },
                        "71": {
                            "0": "TomBrady",
                            "1": "2015-12-30",
                            "2": 8.39140318535794,
                        },
                        "72": {
                            "0": "TomBrady",
                            "1": "2015-12-31",
                            "2": 8.00469951054955,
                        },
                        "73": {
                            "0": "TomBrady",
                            "1": "2016-01-01",
                            "2": 7.58933582317062,
                        },
                        "74": {
                            "0": "TomBrady",
                            "1": "2016-01-02",
                            "2": 7.82524529143177,
                        },
                        "75": {
                            "0": "TomBrady",
                            "1": "2016-01-03",
                            "2": 8.24931374626064,
                        },
                        "76": {
                            "0": "TomBrady",
                            "1": "2016-01-04",
                            "2": 9.29514097366865,
                        },
                        "77": {
                            "0": "TomBrady",
                            "1": "2016-01-05",
                            "2": 8.56826646160024,
                        },
                        "78": {
                            "0": "TomBrady",
                            "1": "2016-01-06",
                            "2": 8.35255436947459,
                        },
                        "79": {
                            "0": "TomBrady",
                            "1": "2016-01-07",
                            "2": 8.29579811063615,
                        },
                        "80": {
                            "0": "TomBrady",
                            "1": "2016-01-08",
                            "2": 8.29029259122431,
                        },
                        "81": {
                            "0": "TomBrady",
                            "1": "2016-01-09",
                            "2": 7.78572089653462,
                        },
                        "82": {
                            "0": "TomBrady",
                            "1": "2016-01-10",
                            "2": 8.28172399041139,
                        },
                        "83": {
                            "0": "TomBrady",
                            "1": "2016-01-11",
                            "2": 8.4707303170059,
                        },
                        "84": {
                            "0": "TomBrady",
                            "1": "2016-01-12",
                            "2": 8.13505390861157,
                        },
                        "85": {
                            "0": "TomBrady",
                            "1": "2016-01-13",
                            "2": 8.06714903991011,
                        },
                    },
                },
            ),
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "timegpt_multi_series_historic"),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder(request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def timegpt_multi_series_anomalies(
        self, *, request: MultiSeriesAnomaly, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Any:
        """
        Based on the provided data, this endpoint detects the anomalies in the historical perdiod of multiple time series at once. It takes a JSON as an input containing information like the series frequency and historical data. (See below for a full description of the parameters.) The response contains a flag indicating if the date has a anomaly and also provides the prediction interval used to define if an observation is an anomaly.Get your token for private beta at https://dashboard.nixtla.io.

        Parameters:
            - request: MultiSeriesAnomaly.

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from nixtla import MultiSeriesAnomaly
        from nixtla.client import AsyncNixtla

        client = AsyncNixtla(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        await client.timegpt_multi_series_anomalies(
            request=MultiSeriesAnomaly(),
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "timegpt_multi_series_anomalies"),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder(request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def timegpt_multi_series_cross_validation(
        self, *, request: MultiSeriesCrossValidation, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Any:
        """
        Perform Cross Validation for multiple series

        Parameters:
            - request: MultiSeriesCrossValidation.

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from nixtla import MultiSeriesCrossValidation
        from nixtla.client import AsyncNixtla

        client = AsyncNixtla(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        await client.timegpt_multi_series_cross_validation(
            request=MultiSeriesCrossValidation(),
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "timegpt_multi_series_cross_validation"),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder(request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def timegpt_input_size(
        self, *, request: SingleSeriesForecast, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Any:
        """
        Parameters:
            - request: SingleSeriesForecast.

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from nixtla import SingleSeriesForecast
        from nixtla.client import AsyncNixtla

        client = AsyncNixtla(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        await client.timegpt_input_size(
            request=SingleSeriesForecast(),
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "timegpt_input_size"),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder(request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def timegpt_model_params(
        self, *, request: SingleSeriesForecast, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Any:
        """
        Parameters:
            - request: SingleSeriesForecast.

            - request_options: typing.Optional[RequestOptions]. Request-specific configuration.
        ---
        from nixtla import SingleSeriesForecast
        from nixtla.client import AsyncNixtla

        client = AsyncNixtla(
            token="YOUR_TOKEN",
            base_url="https://yourhost.com/path/to/api",
        )
        await client.timegpt_model_params(
            request=SingleSeriesForecast(),
        )
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "timegpt_model_params"),
            params=jsonable_encoder(
                request_options.get("additional_query_parameters") if request_options is not None else None
            ),
            json=jsonable_encoder(request)
            if request_options is None or request_options.get("additional_body_parameters") is None
            else {
                **jsonable_encoder(request),
                **(jsonable_encoder(remove_none_from_dict(request_options.get("additional_body_parameters", {})))),
            },
            headers=jsonable_encoder(
                remove_none_from_dict(
                    {
                        **self._client_wrapper.get_headers(),
                        **(request_options.get("additional_headers", {}) if request_options is not None else {}),
                    }
                )
            ),
            timeout=request_options.get("timeout_in_seconds")
            if request_options is not None and request_options.get("timeout_in_seconds") is not None
            else self._client_wrapper.get_timeout(),
            retries=0,
            max_retries=request_options.get("max_retries") if request_options is not None else 0,  # type: ignore
        )
        if 200 <= _response.status_code < 300:
            return pydantic_v1.parse_obj_as(typing.Any, _response.json())  # type: ignore
        if _response.status_code == 422:
            raise UnprocessableEntityError(
                pydantic_v1.parse_obj_as(HttpValidationError, _response.json())  # type: ignore
            )
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
