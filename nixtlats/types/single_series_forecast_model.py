# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class SingleSeriesForecastModel(str, enum.Enum):
    """
    Model to use as a string. Options are: `short-horizon`, and `long-horizon.` We recommend using `long-horizon` for forecasting if you want to predict more than one seasonal period given the frequency of your data.
    """

    SHORT_HORIZON = "short-horizon"
    LONG_HORIZON = "long-horizon"
    TIMEGPT_1 = "timegpt-1"
    TIMEGPT_1_LONG_HORIZON = "timegpt-1-long-horizon"

    def visit(
        self,
        short_horizon: typing.Callable[[], T_Result],
        long_horizon: typing.Callable[[], T_Result],
        timegpt_1: typing.Callable[[], T_Result],
        timegpt_1_long_horizon: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is SingleSeriesForecastModel.SHORT_HORIZON:
            return short_horizon()
        if self is SingleSeriesForecastModel.LONG_HORIZON:
            return long_horizon()
        if self is SingleSeriesForecastModel.TIMEGPT_1:
            return timegpt_1()
        if self is SingleSeriesForecastModel.TIMEGPT_1_LONG_HORIZON:
            return timegpt_1_long_horizon()
