{
  "openapi": "3.1.0",
  "servers": [
    {
      "url": "https://api.nixtla.com"
    }
  ],
  "info": {
    "title": "Nixtla Forecast API",
    "description": "API for TimeGPT forecast. Just send your data as json and get results. We do the heavy lifting.",
    "version": "1"
  },
  "paths": {
    "/validate_api_key": {
      "get": {
        "summary": "Validate Api Key",
        "operationId": "validate_api_key_validate_api_key_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/validate_token": {
      "post": {
        "summary": "Validate Token",
        "operationId": "validate_token_validate_token_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-fern-sdk-method-name": "validate_token"
      }
    },
    "/health": {
      "get": {
        "summary": "Health",
        "description": "Check if server is healthy.\nUsed by the readiness probe to check server is healthy.",
        "operationId": "health_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/forecast": {
      "post": {
        "summary": "Foundational Time Series Model (Beta)",
        "description": "This endpoint predicts the future values of a single time series based on the provided data. It takes a JSON as an input containing information like the series frequency and historical data. (See below for a full description of the parameters.) The response contains the predicted values based on the input arguments. Get your token for private beta at https://dashboard.nixtla.io",
        "operationId": "forecast_forecast_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SingleSeriesForecast",
                "examples": [
                  {
                    "fh": 7,
                    "y": {
                      "2015-12-02": 4.390508031418598,
                      "2015-12-03": 5.721514930979356,
                      "2015-12-04": 4.822107008573151,
                      "2015-12-05": 4.359065463975175,
                      "2015-12-06": 3.3892383947112377,
                      "2015-12-07": 5.167152904533249,
                      "2015-12-08": 3.50069769010154,
                      "2015-12-09": 7.134184006256638,
                      "2015-12-10": 7.709302084008234,
                      "2015-12-11": 3.0675321506062216,
                      "2015-12-12": 6.333800304661317,
                      "2015-12-13": 4.231159358023236,
                      "2015-12-14": 4.5443564887514585,
                      "2015-12-15": 7.404773106341288,
                      "2015-12-16": 0.5682884655830955,
                      "2015-12-17": 0.6970343976123257,
                      "2015-12-18": 0.16174717952260576,
                      "2015-12-19": 6.660958764383504,
                      "2015-12-20": 6.225254007598804,
                      "2015-12-21": 6.960097185974553,
                      "2015-12-22": 7.828946737862112,
                      "2015-12-23": 6.393268513733789,
                      "2015-12-24": 3.6918348980234548,
                      "2015-12-25": 6.244233410291644,
                      "2015-12-26": 0.9461954069514658,
                      "2015-12-27": 5.119368170620191,
                      "2015-12-28": 1.1468262992723712,
                      "2015-12-29": 7.557351336396671,
                      "2015-12-30": 4.174786574000573,
                      "2015-12-31": 3.3172955199241887,
                      "2016-01-01": 2.1164448968370158,
                      "2016-01-02": 6.193869515473733,
                      "2016-01-03": 3.6492026577323884,
                      "2016-01-04": 4.547471590949188,
                      "2016-01-05": 0.15031840349084113,
                      "2016-01-06": 4.9410839766070165,
                      "2016-01-07": 4.896765781779371,
                      "2016-01-08": 4.935471974998055,
                      "2016-01-09": 7.549984628116993,
                      "2016-01-10": 5.454562392827867,
                      "2016-01-11": 2.876063204590288,
                      "2016-01-12": 3.4962556303947316,
                      "2016-01-13": 5.581049567418119
                    },
                    "x": {
                      "2015-12-02": [0.5701967704178796, 0.6778165367962301],
                      "2015-12-03": [0.43860151346232035, 0.27000797319216485],
                      "2015-12-04": [0.9883738380592262, 0.7351940221225949],
                      "2015-12-05": [0.10204481074802807, 0.9621885451174382],
                      "2015-12-06": [0.2088767560948347, 0.24875314351995803],
                      "2015-12-07": [0.16130951788499626, 0.5761573344178369],
                      "2015-12-08": [0.6531083254653984, 0.592041931271839],
                      "2015-12-09": [0.2532916025397821, 0.5722519057908734],
                      "2015-12-10": [0.4663107728563063, 0.2230816326406183],
                      "2015-12-11": [0.24442559200160274, 0.952749011516985],
                      "2015-12-12": [0.15896958364551972, 0.44712537861762736],
                      "2015-12-13": [0.11037514116430513, 0.8464086724711278],
                      "2015-12-14": [0.6563295894652734, 0.6994792753175043],
                      "2015-12-15": [0.1381829513486138, 0.29743695085513366],
                      "2015-12-16": [0.1965823616800535, 0.8137978197024772],
                      "2015-12-17": [0.3687251706609641, 0.39650574084698464],
                      "2015-12-18": [0.8209932298479351, 0.8811031971111616],
                      "2015-12-19": [0.09710127579306127, 0.5812728726358587],
                      "2015-12-20": [0.8379449074988039, 0.8817353618548528],
                      "2015-12-21": [0.09609840789396307, 0.6925315900777659],
                      "2015-12-22": [0.9764594650133958, 0.7252542798196405],
                      "2015-12-23": [0.4686512016477016, 0.5013243819267023],
                      "2015-12-24": [0.9767610881903371, 0.9560836347232239],
                      "2015-12-25": [0.604845519745046, 0.6439901992296374],
                      "2015-12-26": [0.7392635793983017, 0.4238550485581797],
                      "2015-12-27": [0.039187792254320675, 0.6063932141279244],
                      "2015-12-28": [0.2828069625764096, 0.019193198309333526],
                      "2015-12-29": [0.1201965612131689, 0.30157481667454933],
                      "2015-12-30": [0.29614019752214493, 0.660173537492685],
                      "2015-12-31": [0.11872771895424405, 0.29007760721044407],
                      "2016-01-01": [0.317983179393976, 0.6180154289988415],
                      "2016-01-02": [0.41426299451466997, 0.42876870094576613],
                      "2016-01-03": [0.06414749634878436, 0.13547406422245023],
                      "2016-01-04": [0.6924721193700198, 0.29828232595603077],
                      "2016-01-05": [0.5666014542065752, 0.5699649107012649],
                      "2016-01-06": [0.2653894909394454, 0.5908727612481732],
                      "2016-01-07": [0.5232480534666997, 0.5743252488495788],
                      "2016-01-08": [0.09394051075844168, 0.6532008198571336],
                      "2016-01-09": [0.5759464955561793, 0.6521032700016889],
                      "2016-01-10": [0.9292961975762141, 0.43141843543397396],
                      "2016-01-11": [0.31856895245132366, 0.896546595851063],
                      "2016-01-12": [0.6674103799636817, 0.36756187004789653],
                      "2016-01-13": [0.13179786240439217, 0.4358649252656268],
                      "2016-01-14": [0.7163272041185655, 0.8919233550156721],
                      "2016-01-15": [0.2894060929472011, 0.8061939890460857],
                      "2016-01-16": [0.18319136200711683, 0.7038885835403663],
                      "2016-01-17": [0.5865129348100832, 0.10022688731230112],
                      "2016-01-18": [0.020107546187493552, 0.9194826137446735],
                      "2016-01-19": [0.8289400292173631, 0.7142412995491114],
                      "2016-01-20": [0.004695476192547066, 0.9988470065678665]
                    },
                    "freq": "D",
                    "clean_ex_first": true,
                    "level": [90],
                    "finetune_steps": 0,
                    "model": "timegpt-1"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-fern-sdk-method-name": "forecast"
      }
    },
    "/historic_forecast": {
      "post": {
        "summary": "Foundational Time Series Model Historic (Beta)",
        "description": "Based on the provided data, this endpoint predicts time series data for the in-sample period (historical period). It takes a JSON as an input, including information like the series frequency and the historical data. (See below for a full description of the parameters.) The response contains the predicted values for the historical period. Usually useful for anomaly detection. Get your token for private beta at https://dashboard.nixtla.io.",
        "operationId": "historic_forecast_historic_forecast_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SingleSeriesInsampleForecast",
                "examples": [
                  {
                    "fh": 7,
                    "y": {
                      "2015-12-02": 4.390508031418598,
                      "2015-12-03": 5.721514930979356,
                      "2015-12-04": 4.822107008573151,
                      "2015-12-05": 4.359065463975175,
                      "2015-12-06": 3.3892383947112377,
                      "2015-12-07": 5.167152904533249,
                      "2015-12-08": 3.50069769010154,
                      "2015-12-09": 7.134184006256638,
                      "2015-12-10": 7.709302084008234,
                      "2015-12-11": 3.0675321506062216,
                      "2015-12-12": 6.333800304661317,
                      "2015-12-13": 4.231159358023236,
                      "2015-12-14": 4.5443564887514585,
                      "2015-12-15": 7.404773106341288,
                      "2015-12-16": 0.5682884655830955,
                      "2015-12-17": 0.6970343976123257,
                      "2015-12-18": 0.16174717952260576,
                      "2015-12-19": 6.660958764383504,
                      "2015-12-20": 6.225254007598804,
                      "2015-12-21": 6.960097185974553,
                      "2015-12-22": 7.828946737862112,
                      "2015-12-23": 6.393268513733789,
                      "2015-12-24": 3.6918348980234548,
                      "2015-12-25": 6.244233410291644,
                      "2015-12-26": 0.9461954069514658,
                      "2015-12-27": 5.119368170620191,
                      "2015-12-28": 1.1468262992723712,
                      "2015-12-29": 7.557351336396671,
                      "2015-12-30": 4.174786574000573,
                      "2015-12-31": 3.3172955199241887,
                      "2016-01-01": 2.1164448968370158,
                      "2016-01-02": 6.193869515473733,
                      "2016-01-03": 3.6492026577323884,
                      "2016-01-04": 4.547471590949188,
                      "2016-01-05": 0.15031840349084113,
                      "2016-01-06": 4.9410839766070165,
                      "2016-01-07": 4.896765781779371,
                      "2016-01-08": 4.935471974998055,
                      "2016-01-09": 7.549984628116993,
                      "2016-01-10": 5.454562392827867,
                      "2016-01-11": 2.876063204590288,
                      "2016-01-12": 3.4962556303947316,
                      "2016-01-13": 5.581049567418119
                    },
                    "freq": "D",
                    "clean_ex_first": true,
                    "level": [90],
                    "model": "timegpt-1"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-fern-sdk-method-name": "historic_forecast"
      }
    },
    "/forecast_multi_series": {
      "post": {
        "summary": "Foundational Time Series Model Multi Series (Beta)",
        "description": "Based on the provided data, this endpoint predicts the future values of multiple time series at once. It takes a JSON as an input containing information like the series frequency and historical data. (See below for a full description of the parameters.) The response contains the predicted values for each series based on the input arguments. Get your token for private beta at https://dashboard.nixtla.io.",
        "operationId": "forecast_multi_series_forecast_multi_series_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MultiSeriesForecast",
                "examples": [null]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-fern-sdk-method-name": "forecast_multi_series"
      }
    },
    "/historic_forecast_multi_series": {
      "post": {
        "summary": "Foundational Time Series Model Multi Series Historic (Beta)",
        "description": "Based on the provided data, this endpoint predicts the in-sample period (historical period) values of multiple time series at once. It takes a JSON as an input containing information like the series frequency and historical data. (See below for a full description of the parameters.) The response contains the predicted values for the historical period. Usually useful for anomaly detection. Get your token for private beta at https://dashboard.nixtla.io.",
        "operationId": "historic_forecast_multi_series_historic_forecast_multi_series_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MultiSeriesInsampleForecast",
                "examples": [
                  {
                    "y": {
                      "columns": ["unique_id", "ds", "y"],
                      "data": [
                        ["PeytonManning", "2015-12-02", 4.390508031418598],
                        ["PeytonManning", "2015-12-03", 5.721514930979356],
                        ["PeytonManning", "2015-12-04", 4.822107008573151],
                        ["PeytonManning", "2015-12-05", 4.359065463975175],
                        ["PeytonManning", "2015-12-06", 3.3892383947112377],
                        ["PeytonManning", "2015-12-07", 5.167152904533249],
                        ["PeytonManning", "2015-12-08", 3.50069769010154],
                        ["PeytonManning", "2015-12-09", 7.134184006256638],
                        ["PeytonManning", "2015-12-10", 7.709302084008234],
                        ["PeytonManning", "2015-12-11", 3.0675321506062216],
                        ["PeytonManning", "2015-12-12", 6.333800304661317],
                        ["PeytonManning", "2015-12-13", 4.231159358023236],
                        ["PeytonManning", "2015-12-14", 4.5443564887514585],
                        ["PeytonManning", "2015-12-15", 7.404773106341288],
                        ["PeytonManning", "2015-12-16", 0.5682884655830955],
                        ["PeytonManning", "2015-12-17", 0.6970343976123257],
                        ["PeytonManning", "2015-12-18", 0.16174717952260576],
                        ["PeytonManning", "2015-12-19", 6.660958764383504],
                        ["PeytonManning", "2015-12-20", 6.225254007598804],
                        ["PeytonManning", "2015-12-21", 6.960097185974553],
                        ["PeytonManning", "2015-12-22", 7.828946737862112],
                        ["PeytonManning", "2015-12-23", 6.393268513733789],
                        ["PeytonManning", "2015-12-24", 3.6918348980234548],
                        ["PeytonManning", "2015-12-25", 6.244233410291644],
                        ["PeytonManning", "2015-12-26", 0.9461954069514658],
                        ["PeytonManning", "2015-12-27", 5.119368170620191],
                        ["PeytonManning", "2015-12-28", 1.1468262992723712],
                        ["PeytonManning", "2015-12-29", 7.557351336396671],
                        ["PeytonManning", "2015-12-30", 4.174786574000573],
                        ["PeytonManning", "2015-12-31", 3.3172955199241887],
                        ["PeytonManning", "2016-01-01", 2.1164448968370158],
                        ["PeytonManning", "2016-01-02", 6.193869515473733],
                        ["PeytonManning", "2016-01-03", 3.6492026577323884],
                        ["PeytonManning", "2016-01-04", 4.547471590949188],
                        ["PeytonManning", "2016-01-05", 0.15031840349084113],
                        ["PeytonManning", "2016-01-06", 4.9410839766070165],
                        ["PeytonManning", "2016-01-07", 4.896765781779371],
                        ["PeytonManning", "2016-01-08", 4.935471974998055],
                        ["PeytonManning", "2016-01-09", 7.549984628116993],
                        ["PeytonManning", "2016-01-10", 5.454562392827867],
                        ["PeytonManning", "2016-01-11", 2.876063204590288],
                        ["PeytonManning", "2016-01-12", 3.4962556303947316],
                        ["PeytonManning", "2016-01-13", 5.581049567418119],
                        ["TomBrady", "2015-12-02", 4.390508031418598],
                        ["TomBrady", "2015-12-03", 5.721514930979356],
                        ["TomBrady", "2015-12-04", 4.822107008573151],
                        ["TomBrady", "2015-12-05", 4.359065463975175],
                        ["TomBrady", "2015-12-06", 3.3892383947112377],
                        ["TomBrady", "2015-12-07", 5.167152904533249],
                        ["TomBrady", "2015-12-08", 3.50069769010154],
                        ["TomBrady", "2015-12-09", 7.134184006256638],
                        ["TomBrady", "2015-12-10", 7.709302084008234],
                        ["TomBrady", "2015-12-11", 3.0675321506062216],
                        ["TomBrady", "2015-12-12", 6.333800304661317],
                        ["TomBrady", "2015-12-13", 4.231159358023236],
                        ["TomBrady", "2015-12-14", 4.5443564887514585],
                        ["TomBrady", "2015-12-15", 7.404773106341288],
                        ["TomBrady", "2015-12-16", 0.5682884655830955],
                        ["TomBrady", "2015-12-17", 0.6970343976123257],
                        ["TomBrady", "2015-12-18", 0.16174717952260576],
                        ["TomBrady", "2015-12-19", 6.660958764383504],
                        ["TomBrady", "2015-12-20", 6.225254007598804],
                        ["TomBrady", "2015-12-21", 6.960097185974553],
                        ["TomBrady", "2015-12-22", 7.828946737862112],
                        ["TomBrady", "2015-12-23", 6.393268513733789],
                        ["TomBrady", "2015-12-24", 3.6918348980234548],
                        ["TomBrady", "2015-12-25", 6.244233410291644],
                        ["TomBrady", "2015-12-26", 0.9461954069514658],
                        ["TomBrady", "2015-12-27", 5.119368170620191],
                        ["TomBrady", "2015-12-28", 1.1468262992723712],
                        ["TomBrady", "2015-12-29", 7.557351336396671],
                        ["TomBrady", "2015-12-30", 4.174786574000573],
                        ["TomBrady", "2015-12-31", 3.3172955199241887],
                        ["TomBrady", "2016-01-01", 2.1164448968370158],
                        ["TomBrady", "2016-01-02", 6.193869515473733],
                        ["TomBrady", "2016-01-03", 3.6492026577323884],
                        ["TomBrady", "2016-01-04", 4.547471590949188],
                        ["TomBrady", "2016-01-05", 0.15031840349084113],
                        ["TomBrady", "2016-01-06", 4.9410839766070165],
                        ["TomBrady", "2016-01-07", 4.896765781779371],
                        ["TomBrady", "2016-01-08", 4.935471974998055],
                        ["TomBrady", "2016-01-09", 7.549984628116993],
                        ["TomBrady", "2016-01-10", 5.454562392827867],
                        ["TomBrady", "2016-01-11", 2.876063204590288],
                        ["TomBrady", "2016-01-12", 3.4962556303947316],
                        ["TomBrady", "2016-01-13", 5.581049567418119]
                      ]
                    },
                    "freq": "D",
                    "level": [90],
                    "model": "timegpt-1"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-fern-sdk-method-name": "historic_forecast_multi_series"
      }
    },
    "/anomaly_detection_multi_series": {
      "post": {
        "summary": "Foundational Time Series Model Multi Series Anomaly Detector (Beta)",
        "description": "Based on the provided data, this endpoint detects the anomalies in the historical perdiod of multiple time series at once. It takes a JSON as an input containing information like the series frequency and historical data. (See below for a full description of the parameters.) The response contains a flag indicating if the date has an anomaly and also provides the prediction interval used to define if an observation is an anomaly.Get your token for private beta at https://dashboard.nixtla.io.",
        "operationId": "anomaly_detection_multi_series_anomaly_detection_multi_series_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MultiSeriesAnomaly",
                "examples": [null]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-fern-sdk-method-name": "anomaly_detection_multi_series"
      }
    },
    "/cross_validation_multi_series": {
      "post": {
        "summary": "Foundational Time Series Model Multi Series Cross Validation (Beta)",
        "description": "Perform Cross Validation for multiple series",
        "operationId": "cross_validation_multi_series_cross_validation_multi_series_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MultiSeriesCrossValidation",
                "examples": [
                  {
                    "y": {
                      "columns": ["unique_id", "ds", "y"],
                      "data": [
                        ["PeytonManning", "2015-12-02", 4.390508031418598],
                        ["PeytonManning", "2015-12-03", 5.721514930979356],
                        ["PeytonManning", "2015-12-04", 4.822107008573151],
                        ["PeytonManning", "2015-12-05", 4.359065463975175],
                        ["PeytonManning", "2015-12-06", 3.3892383947112377],
                        ["PeytonManning", "2015-12-07", 5.167152904533249],
                        ["PeytonManning", "2015-12-08", 3.50069769010154],
                        ["PeytonManning", "2015-12-09", 7.134184006256638],
                        ["PeytonManning", "2015-12-10", 7.709302084008234],
                        ["PeytonManning", "2015-12-11", 3.0675321506062216],
                        ["PeytonManning", "2015-12-12", 6.333800304661317],
                        ["PeytonManning", "2015-12-13", 4.231159358023236],
                        ["PeytonManning", "2015-12-14", 4.5443564887514585],
                        ["PeytonManning", "2015-12-15", 7.404773106341288],
                        ["PeytonManning", "2015-12-16", 0.5682884655830955],
                        ["PeytonManning", "2015-12-17", 0.6970343976123257],
                        ["PeytonManning", "2015-12-18", 0.16174717952260576],
                        ["PeytonManning", "2015-12-19", 6.660958764383504],
                        ["PeytonManning", "2015-12-20", 6.225254007598804],
                        ["PeytonManning", "2015-12-21", 6.960097185974553],
                        ["PeytonManning", "2015-12-22", 7.828946737862112],
                        ["PeytonManning", "2015-12-23", 6.393268513733789],
                        ["PeytonManning", "2015-12-24", 3.6918348980234548],
                        ["PeytonManning", "2015-12-25", 6.244233410291644],
                        ["PeytonManning", "2015-12-26", 0.9461954069514658],
                        ["PeytonManning", "2015-12-27", 5.119368170620191],
                        ["PeytonManning", "2015-12-28", 1.1468262992723712],
                        ["PeytonManning", "2015-12-29", 7.557351336396671],
                        ["PeytonManning", "2015-12-30", 4.174786574000573],
                        ["PeytonManning", "2015-12-31", 3.3172955199241887],
                        ["PeytonManning", "2016-01-01", 2.1164448968370158],
                        ["PeytonManning", "2016-01-02", 6.193869515473733],
                        ["PeytonManning", "2016-01-03", 3.6492026577323884],
                        ["PeytonManning", "2016-01-04", 4.547471590949188],
                        ["PeytonManning", "2016-01-05", 0.15031840349084113],
                        ["PeytonManning", "2016-01-06", 4.9410839766070165],
                        ["PeytonManning", "2016-01-07", 4.896765781779371],
                        ["PeytonManning", "2016-01-08", 4.935471974998055],
                        ["PeytonManning", "2016-01-09", 7.549984628116993],
                        ["PeytonManning", "2016-01-10", 5.454562392827867],
                        ["PeytonManning", "2016-01-11", 2.876063204590288],
                        ["PeytonManning", "2016-01-12", 3.4962556303947316],
                        ["PeytonManning", "2016-01-13", 5.581049567418119],
                        ["TomBrady", "2015-12-02", 4.390508031418598],
                        ["TomBrady", "2015-12-03", 5.721514930979356],
                        ["TomBrady", "2015-12-04", 4.822107008573151],
                        ["TomBrady", "2015-12-05", 4.359065463975175],
                        ["TomBrady", "2015-12-06", 3.3892383947112377],
                        ["TomBrady", "2015-12-07", 5.167152904533249],
                        ["TomBrady", "2015-12-08", 3.50069769010154],
                        ["TomBrady", "2015-12-09", 7.134184006256638],
                        ["TomBrady", "2015-12-10", 7.709302084008234],
                        ["TomBrady", "2015-12-11", 3.0675321506062216],
                        ["TomBrady", "2015-12-12", 6.333800304661317],
                        ["TomBrady", "2015-12-13", 4.231159358023236],
                        ["TomBrady", "2015-12-14", 4.5443564887514585],
                        ["TomBrady", "2015-12-15", 7.404773106341288],
                        ["TomBrady", "2015-12-16", 0.5682884655830955],
                        ["TomBrady", "2015-12-17", 0.6970343976123257],
                        ["TomBrady", "2015-12-18", 0.16174717952260576],
                        ["TomBrady", "2015-12-19", 6.660958764383504],
                        ["TomBrady", "2015-12-20", 6.225254007598804],
                        ["TomBrady", "2015-12-21", 6.960097185974553],
                        ["TomBrady", "2015-12-22", 7.828946737862112],
                        ["TomBrady", "2015-12-23", 6.393268513733789],
                        ["TomBrady", "2015-12-24", 3.6918348980234548],
                        ["TomBrady", "2015-12-25", 6.244233410291644],
                        ["TomBrady", "2015-12-26", 0.9461954069514658],
                        ["TomBrady", "2015-12-27", 5.119368170620191],
                        ["TomBrady", "2015-12-28", 1.1468262992723712],
                        ["TomBrady", "2015-12-29", 7.557351336396671],
                        ["TomBrady", "2015-12-30", 4.174786574000573],
                        ["TomBrady", "2015-12-31", 3.3172955199241887],
                        ["TomBrady", "2016-01-01", 2.1164448968370158],
                        ["TomBrady", "2016-01-02", 6.193869515473733],
                        ["TomBrady", "2016-01-03", 3.6492026577323884],
                        ["TomBrady", "2016-01-04", 4.547471590949188],
                        ["TomBrady", "2016-01-05", 0.15031840349084113],
                        ["TomBrady", "2016-01-06", 4.9410839766070165],
                        ["TomBrady", "2016-01-07", 4.896765781779371],
                        ["TomBrady", "2016-01-08", 4.935471974998055],
                        ["TomBrady", "2016-01-09", 7.549984628116993],
                        ["TomBrady", "2016-01-10", 5.454562392827867],
                        ["TomBrady", "2016-01-11", 2.876063204590288],
                        ["TomBrady", "2016-01-12", 3.4962556303947316],
                        ["TomBrady", "2016-01-13", 5.581049567418119]
                      ]
                    },
                    "x": {
                      "columns": [
                        "unique_id",
                        "ds",
                        "normalized_fb_marketing_spend",
                        "normalized_google_marketing_spend"
                      ],
                      "data": [
                        [
                          "PeytonManning",
                          "2015-12-02",
                          0.5701967704178796,
                          0.6778165367962301
                        ],
                        [
                          "PeytonManning",
                          "2015-12-03",
                          0.43860151346232035,
                          0.27000797319216485
                        ],
                        [
                          "PeytonManning",
                          "2015-12-04",
                          0.9883738380592262,
                          0.7351940221225949
                        ],
                        [
                          "PeytonManning",
                          "2015-12-05",
                          0.10204481074802807,
                          0.9621885451174382
                        ],
                        [
                          "PeytonManning",
                          "2015-12-06",
                          0.2088767560948347,
                          0.24875314351995803
                        ],
                        [
                          "PeytonManning",
                          "2015-12-07",
                          0.16130951788499626,
                          0.5761573344178369
                        ],
                        [
                          "PeytonManning",
                          "2015-12-08",
                          0.6531083254653984,
                          0.592041931271839
                        ],
                        [
                          "PeytonManning",
                          "2015-12-09",
                          0.2532916025397821,
                          0.5722519057908734
                        ],
                        [
                          "PeytonManning",
                          "2015-12-10",
                          0.4663107728563063,
                          0.2230816326406183
                        ],
                        [
                          "PeytonManning",
                          "2015-12-11",
                          0.24442559200160274,
                          0.952749011516985
                        ],
                        [
                          "PeytonManning",
                          "2015-12-12",
                          0.15896958364551972,
                          0.44712537861762736
                        ],
                        [
                          "PeytonManning",
                          "2015-12-13",
                          0.11037514116430513,
                          0.8464086724711278
                        ],
                        [
                          "PeytonManning",
                          "2015-12-14",
                          0.6563295894652734,
                          0.6994792753175043
                        ],
                        [
                          "PeytonManning",
                          "2015-12-15",
                          0.1381829513486138,
                          0.29743695085513366
                        ],
                        [
                          "PeytonManning",
                          "2015-12-16",
                          0.1965823616800535,
                          0.8137978197024772
                        ],
                        [
                          "PeytonManning",
                          "2015-12-17",
                          0.3687251706609641,
                          0.39650574084698464
                        ],
                        [
                          "PeytonManning",
                          "2015-12-18",
                          0.8209932298479351,
                          0.8811031971111616
                        ],
                        [
                          "PeytonManning",
                          "2015-12-19",
                          0.09710127579306127,
                          0.5812728726358587
                        ],
                        [
                          "PeytonManning",
                          "2015-12-20",
                          0.8379449074988039,
                          0.8817353618548528
                        ],
                        [
                          "PeytonManning",
                          "2015-12-21",
                          0.09609840789396307,
                          0.6925315900777659
                        ],
                        [
                          "PeytonManning",
                          "2015-12-22",
                          0.9764594650133958,
                          0.7252542798196405
                        ],
                        [
                          "PeytonManning",
                          "2015-12-23",
                          0.4686512016477016,
                          0.5013243819267023
                        ],
                        [
                          "PeytonManning",
                          "2015-12-24",
                          0.9767610881903371,
                          0.9560836347232239
                        ],
                        [
                          "PeytonManning",
                          "2015-12-25",
                          0.604845519745046,
                          0.6439901992296374
                        ],
                        [
                          "PeytonManning",
                          "2015-12-26",
                          0.7392635793983017,
                          0.4238550485581797
                        ],
                        [
                          "PeytonManning",
                          "2015-12-27",
                          0.039187792254320675,
                          0.6063932141279244
                        ],
                        [
                          "PeytonManning",
                          "2015-12-28",
                          0.2828069625764096,
                          0.019193198309333526
                        ],
                        [
                          "PeytonManning",
                          "2015-12-29",
                          0.1201965612131689,
                          0.30157481667454933
                        ],
                        [
                          "PeytonManning",
                          "2015-12-30",
                          0.29614019752214493,
                          0.660173537492685
                        ],
                        [
                          "PeytonManning",
                          "2015-12-31",
                          0.11872771895424405,
                          0.29007760721044407
                        ],
                        [
                          "PeytonManning",
                          "2016-01-01",
                          0.317983179393976,
                          0.6180154289988415
                        ],
                        [
                          "PeytonManning",
                          "2016-01-02",
                          0.41426299451466997,
                          0.42876870094576613
                        ],
                        [
                          "PeytonManning",
                          "2016-01-03",
                          0.06414749634878436,
                          0.13547406422245023
                        ],
                        [
                          "PeytonManning",
                          "2016-01-04",
                          0.6924721193700198,
                          0.29828232595603077
                        ],
                        [
                          "PeytonManning",
                          "2016-01-05",
                          0.5666014542065752,
                          0.5699649107012649
                        ],
                        [
                          "PeytonManning",
                          "2016-01-06",
                          0.2653894909394454,
                          0.5908727612481732
                        ],
                        [
                          "PeytonManning",
                          "2016-01-07",
                          0.5232480534666997,
                          0.5743252488495788
                        ],
                        [
                          "PeytonManning",
                          "2016-01-08",
                          0.09394051075844168,
                          0.6532008198571336
                        ],
                        [
                          "PeytonManning",
                          "2016-01-09",
                          0.5759464955561793,
                          0.6521032700016889
                        ],
                        [
                          "PeytonManning",
                          "2016-01-10",
                          0.9292961975762141,
                          0.43141843543397396
                        ],
                        [
                          "PeytonManning",
                          "2016-01-11",
                          0.31856895245132366,
                          0.896546595851063
                        ],
                        [
                          "PeytonManning",
                          "2016-01-12",
                          0.6674103799636817,
                          0.36756187004789653
                        ],
                        [
                          "PeytonManning",
                          "2016-01-13",
                          0.13179786240439217,
                          0.4358649252656268
                        ],
                        [
                          "PeytonManning",
                          "2016-01-14",
                          0.7163272041185655,
                          0.8919233550156721
                        ],
                        [
                          "PeytonManning",
                          "2016-01-15",
                          0.2894060929472011,
                          0.8061939890460857
                        ],
                        [
                          "PeytonManning",
                          "2016-01-16",
                          0.18319136200711683,
                          0.7038885835403663
                        ],
                        [
                          "PeytonManning",
                          "2016-01-17",
                          0.5865129348100832,
                          0.10022688731230112
                        ],
                        [
                          "PeytonManning",
                          "2016-01-18",
                          0.020107546187493552,
                          0.9194826137446735
                        ],
                        [
                          "PeytonManning",
                          "2016-01-19",
                          0.8289400292173631,
                          0.7142412995491114
                        ],
                        [
                          "PeytonManning",
                          "2016-01-20",
                          0.004695476192547066,
                          0.9988470065678665
                        ],
                        [
                          "TomBrady",
                          "2015-12-02",
                          0.5701967704178796,
                          0.6778165367962301
                        ],
                        [
                          "TomBrady",
                          "2015-12-03",
                          0.43860151346232035,
                          0.27000797319216485
                        ],
                        [
                          "TomBrady",
                          "2015-12-04",
                          0.9883738380592262,
                          0.7351940221225949
                        ],
                        [
                          "TomBrady",
                          "2015-12-05",
                          0.10204481074802807,
                          0.9621885451174382
                        ],
                        [
                          "TomBrady",
                          "2015-12-06",
                          0.2088767560948347,
                          0.24875314351995803
                        ],
                        [
                          "TomBrady",
                          "2015-12-07",
                          0.16130951788499626,
                          0.5761573344178369
                        ],
                        [
                          "TomBrady",
                          "2015-12-08",
                          0.6531083254653984,
                          0.592041931271839
                        ],
                        [
                          "TomBrady",
                          "2015-12-09",
                          0.2532916025397821,
                          0.5722519057908734
                        ],
                        [
                          "TomBrady",
                          "2015-12-10",
                          0.4663107728563063,
                          0.2230816326406183
                        ],
                        [
                          "TomBrady",
                          "2015-12-11",
                          0.24442559200160274,
                          0.952749011516985
                        ],
                        [
                          "TomBrady",
                          "2015-12-12",
                          0.15896958364551972,
                          0.44712537861762736
                        ],
                        [
                          "TomBrady",
                          "2015-12-13",
                          0.11037514116430513,
                          0.8464086724711278
                        ],
                        [
                          "TomBrady",
                          "2015-12-14",
                          0.6563295894652734,
                          0.6994792753175043
                        ],
                        [
                          "TomBrady",
                          "2015-12-15",
                          0.1381829513486138,
                          0.29743695085513366
                        ],
                        [
                          "TomBrady",
                          "2015-12-16",
                          0.1965823616800535,
                          0.8137978197024772
                        ],
                        [
                          "TomBrady",
                          "2015-12-17",
                          0.3687251706609641,
                          0.39650574084698464
                        ],
                        [
                          "TomBrady",
                          "2015-12-18",
                          0.8209932298479351,
                          0.8811031971111616
                        ],
                        [
                          "TomBrady",
                          "2015-12-19",
                          0.09710127579306127,
                          0.5812728726358587
                        ],
                        [
                          "TomBrady",
                          "2015-12-20",
                          0.8379449074988039,
                          0.8817353618548528
                        ],
                        [
                          "TomBrady",
                          "2015-12-21",
                          0.09609840789396307,
                          0.6925315900777659
                        ],
                        [
                          "TomBrady",
                          "2015-12-22",
                          0.9764594650133958,
                          0.7252542798196405
                        ],
                        [
                          "TomBrady",
                          "2015-12-23",
                          0.4686512016477016,
                          0.5013243819267023
                        ],
                        [
                          "TomBrady",
                          "2015-12-24",
                          0.9767610881903371,
                          0.9560836347232239
                        ],
                        [
                          "TomBrady",
                          "2015-12-25",
                          0.604845519745046,
                          0.6439901992296374
                        ],
                        [
                          "TomBrady",
                          "2015-12-26",
                          0.7392635793983017,
                          0.4238550485581797
                        ],
                        [
                          "TomBrady",
                          "2015-12-27",
                          0.039187792254320675,
                          0.6063932141279244
                        ],
                        [
                          "TomBrady",
                          "2015-12-28",
                          0.2828069625764096,
                          0.019193198309333526
                        ],
                        [
                          "TomBrady",
                          "2015-12-29",
                          0.1201965612131689,
                          0.30157481667454933
                        ],
                        [
                          "TomBrady",
                          "2015-12-30",
                          0.29614019752214493,
                          0.660173537492685
                        ],
                        [
                          "TomBrady",
                          "2015-12-31",
                          0.11872771895424405,
                          0.29007760721044407
                        ],
                        [
                          "TomBrady",
                          "2016-01-01",
                          0.317983179393976,
                          0.6180154289988415
                        ],
                        [
                          "TomBrady",
                          "2016-01-02",
                          0.41426299451466997,
                          0.42876870094576613
                        ],
                        [
                          "TomBrady",
                          "2016-01-03",
                          0.06414749634878436,
                          0.13547406422245023
                        ],
                        [
                          "TomBrady",
                          "2016-01-04",
                          0.6924721193700198,
                          0.29828232595603077
                        ],
                        [
                          "TomBrady",
                          "2016-01-05",
                          0.5666014542065752,
                          0.5699649107012649
                        ],
                        [
                          "TomBrady",
                          "2016-01-06",
                          0.2653894909394454,
                          0.5908727612481732
                        ],
                        [
                          "TomBrady",
                          "2016-01-07",
                          0.5232480534666997,
                          0.5743252488495788
                        ],
                        [
                          "TomBrady",
                          "2016-01-08",
                          0.09394051075844168,
                          0.6532008198571336
                        ],
                        [
                          "TomBrady",
                          "2016-01-09",
                          0.5759464955561793,
                          0.6521032700016889
                        ],
                        [
                          "TomBrady",
                          "2016-01-10",
                          0.9292961975762141,
                          0.43141843543397396
                        ],
                        [
                          "TomBrady",
                          "2016-01-11",
                          0.31856895245132366,
                          0.896546595851063
                        ],
                        [
                          "TomBrady",
                          "2016-01-12",
                          0.6674103799636817,
                          0.36756187004789653
                        ],
                        [
                          "TomBrady",
                          "2016-01-13",
                          0.13179786240439217,
                          0.4358649252656268
                        ],
                        [
                          "TomBrady",
                          "2016-01-14",
                          0.7163272041185655,
                          0.8919233550156721
                        ],
                        [
                          "TomBrady",
                          "2016-01-15",
                          0.2894060929472011,
                          0.8061939890460857
                        ],
                        [
                          "TomBrady",
                          "2016-01-16",
                          0.18319136200711683,
                          0.7038885835403663
                        ],
                        [
                          "TomBrady",
                          "2016-01-17",
                          0.5865129348100832,
                          0.10022688731230112
                        ],
                        [
                          "TomBrady",
                          "2016-01-18",
                          0.020107546187493552,
                          0.9194826137446735
                        ],
                        [
                          "TomBrady",
                          "2016-01-19",
                          0.8289400292173631,
                          0.7142412995491114
                        ],
                        [
                          "TomBrady",
                          "2016-01-20",
                          0.004695476192547066,
                          0.9988470065678665
                        ]
                      ]
                    },
                    "freq": "D",
                    "level": [99],
                    "model": "timegpt-1"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-fern-sdk-method-name": "cross_validation_multi_series"
      }
    },
    "/model_params": {
      "get": {
        "summary": "Get Model Params",
        "operationId": "get_model_params_model_params_get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "model",
            "in": "query",
            "required": true,
            "schema": {
              "title": "Model"
            }
          },
          {
            "name": "freq",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Freq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Model Params",
        "operationId": "model_params_model_params_post",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SingleSeriesForecast"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-fern-sdk-method-name": "model_params"
      }
    },
    "/timegpt": {
      "post": {
        "summary": "Foundational Time Series Model (Beta)",
        "description": "This endpoint predicts the future values of a single time series based on the provided data. It takes a JSON as an input containing information like the series frequency and historical data. (See below for a full description of the parameters.) The response contains the predicted values based on the input arguments. Get your token for private beta at https://dashboard.nixtla.io",
        "operationId": "timegpt_timegpt_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SingleSeriesForecast",
                "examples": [
                  {
                    "fh": 7,
                    "y": {
                      "2015-12-02": 4.390508031418598,
                      "2015-12-03": 5.721514930979356,
                      "2015-12-04": 4.822107008573151,
                      "2015-12-05": 4.359065463975175,
                      "2015-12-06": 3.3892383947112377,
                      "2015-12-07": 5.167152904533249,
                      "2015-12-08": 3.50069769010154,
                      "2015-12-09": 7.134184006256638,
                      "2015-12-10": 7.709302084008234,
                      "2015-12-11": 3.0675321506062216,
                      "2015-12-12": 6.333800304661317,
                      "2015-12-13": 4.231159358023236,
                      "2015-12-14": 4.5443564887514585,
                      "2015-12-15": 7.404773106341288,
                      "2015-12-16": 0.5682884655830955,
                      "2015-12-17": 0.6970343976123257,
                      "2015-12-18": 0.16174717952260576,
                      "2015-12-19": 6.660958764383504,
                      "2015-12-20": 6.225254007598804,
                      "2015-12-21": 6.960097185974553,
                      "2015-12-22": 7.828946737862112,
                      "2015-12-23": 6.393268513733789,
                      "2015-12-24": 3.6918348980234548,
                      "2015-12-25": 6.244233410291644,
                      "2015-12-26": 0.9461954069514658,
                      "2015-12-27": 5.119368170620191,
                      "2015-12-28": 1.1468262992723712,
                      "2015-12-29": 7.557351336396671,
                      "2015-12-30": 4.174786574000573,
                      "2015-12-31": 3.3172955199241887,
                      "2016-01-01": 2.1164448968370158,
                      "2016-01-02": 6.193869515473733,
                      "2016-01-03": 3.6492026577323884,
                      "2016-01-04": 4.547471590949188,
                      "2016-01-05": 0.15031840349084113,
                      "2016-01-06": 4.9410839766070165,
                      "2016-01-07": 4.896765781779371,
                      "2016-01-08": 4.935471974998055,
                      "2016-01-09": 7.549984628116993,
                      "2016-01-10": 5.454562392827867,
                      "2016-01-11": 2.876063204590288,
                      "2016-01-12": 3.4962556303947316,
                      "2016-01-13": 5.581049567418119
                    },
                    "x": {
                      "2015-12-02": [0.5701967704178796, 0.6778165367962301],
                      "2015-12-03": [0.43860151346232035, 0.27000797319216485],
                      "2015-12-04": [0.9883738380592262, 0.7351940221225949],
                      "2015-12-05": [0.10204481074802807, 0.9621885451174382],
                      "2015-12-06": [0.2088767560948347, 0.24875314351995803],
                      "2015-12-07": [0.16130951788499626, 0.5761573344178369],
                      "2015-12-08": [0.6531083254653984, 0.592041931271839],
                      "2015-12-09": [0.2532916025397821, 0.5722519057908734],
                      "2015-12-10": [0.4663107728563063, 0.2230816326406183],
                      "2015-12-11": [0.24442559200160274, 0.952749011516985],
                      "2015-12-12": [0.15896958364551972, 0.44712537861762736],
                      "2015-12-13": [0.11037514116430513, 0.8464086724711278],
                      "2015-12-14": [0.6563295894652734, 0.6994792753175043],
                      "2015-12-15": [0.1381829513486138, 0.29743695085513366],
                      "2015-12-16": [0.1965823616800535, 0.8137978197024772],
                      "2015-12-17": [0.3687251706609641, 0.39650574084698464],
                      "2015-12-18": [0.8209932298479351, 0.8811031971111616],
                      "2015-12-19": [0.09710127579306127, 0.5812728726358587],
                      "2015-12-20": [0.8379449074988039, 0.8817353618548528],
                      "2015-12-21": [0.09609840789396307, 0.6925315900777659],
                      "2015-12-22": [0.9764594650133958, 0.7252542798196405],
                      "2015-12-23": [0.4686512016477016, 0.5013243819267023],
                      "2015-12-24": [0.9767610881903371, 0.9560836347232239],
                      "2015-12-25": [0.604845519745046, 0.6439901992296374],
                      "2015-12-26": [0.7392635793983017, 0.4238550485581797],
                      "2015-12-27": [0.039187792254320675, 0.6063932141279244],
                      "2015-12-28": [0.2828069625764096, 0.019193198309333526],
                      "2015-12-29": [0.1201965612131689, 0.30157481667454933],
                      "2015-12-30": [0.29614019752214493, 0.660173537492685],
                      "2015-12-31": [0.11872771895424405, 0.29007760721044407],
                      "2016-01-01": [0.317983179393976, 0.6180154289988415],
                      "2016-01-02": [0.41426299451466997, 0.42876870094576613],
                      "2016-01-03": [0.06414749634878436, 0.13547406422245023],
                      "2016-01-04": [0.6924721193700198, 0.29828232595603077],
                      "2016-01-05": [0.5666014542065752, 0.5699649107012649],
                      "2016-01-06": [0.2653894909394454, 0.5908727612481732],
                      "2016-01-07": [0.5232480534666997, 0.5743252488495788],
                      "2016-01-08": [0.09394051075844168, 0.6532008198571336],
                      "2016-01-09": [0.5759464955561793, 0.6521032700016889],
                      "2016-01-10": [0.9292961975762141, 0.43141843543397396],
                      "2016-01-11": [0.31856895245132366, 0.896546595851063],
                      "2016-01-12": [0.6674103799636817, 0.36756187004789653],
                      "2016-01-13": [0.13179786240439217, 0.4358649252656268],
                      "2016-01-14": [0.7163272041185655, 0.8919233550156721],
                      "2016-01-15": [0.2894060929472011, 0.8061939890460857],
                      "2016-01-16": [0.18319136200711683, 0.7038885835403663],
                      "2016-01-17": [0.5865129348100832, 0.10022688731230112],
                      "2016-01-18": [0.020107546187493552, 0.9194826137446735],
                      "2016-01-19": [0.8289400292173631, 0.7142412995491114],
                      "2016-01-20": [0.004695476192547066, 0.9988470065678665]
                    },
                    "freq": "D",
                    "clean_ex_first": true,
                    "level": [90],
                    "finetune_steps": 0,
                    "model": "timegpt-1"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-fern-sdk-method-name": "timegpt"
      }
    },
    "/timegpt_historic": {
      "post": {
        "summary": "Foundational Time Series Model Historic (Beta)",
        "description": "Based on the provided data, this endpoint predicts time series data for the in-sample period (historical period). It takes a JSON as an input, including information like the series frequency and the historical data. (See below for a full description of the parameters.) The response contains the predicted values for the historical period. Usually useful for anomaly detection. Get your token for private beta at https://dashboard.nixtla.io.",
        "operationId": "timegpt_historic_timegpt_historic_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SingleSeriesInsampleForecast",
                "examples": [
                  {
                    "fh": 7,
                    "y": {
                      "2015-12-02": 4.390508031418598,
                      "2015-12-03": 5.721514930979356,
                      "2015-12-04": 4.822107008573151,
                      "2015-12-05": 4.359065463975175,
                      "2015-12-06": 3.3892383947112377,
                      "2015-12-07": 5.167152904533249,
                      "2015-12-08": 3.50069769010154,
                      "2015-12-09": 7.134184006256638,
                      "2015-12-10": 7.709302084008234,
                      "2015-12-11": 3.0675321506062216,
                      "2015-12-12": 6.333800304661317,
                      "2015-12-13": 4.231159358023236,
                      "2015-12-14": 4.5443564887514585,
                      "2015-12-15": 7.404773106341288,
                      "2015-12-16": 0.5682884655830955,
                      "2015-12-17": 0.6970343976123257,
                      "2015-12-18": 0.16174717952260576,
                      "2015-12-19": 6.660958764383504,
                      "2015-12-20": 6.225254007598804,
                      "2015-12-21": 6.960097185974553,
                      "2015-12-22": 7.828946737862112,
                      "2015-12-23": 6.393268513733789,
                      "2015-12-24": 3.6918348980234548,
                      "2015-12-25": 6.244233410291644,
                      "2015-12-26": 0.9461954069514658,
                      "2015-12-27": 5.119368170620191,
                      "2015-12-28": 1.1468262992723712,
                      "2015-12-29": 7.557351336396671,
                      "2015-12-30": 4.174786574000573,
                      "2015-12-31": 3.3172955199241887,
                      "2016-01-01": 2.1164448968370158,
                      "2016-01-02": 6.193869515473733,
                      "2016-01-03": 3.6492026577323884,
                      "2016-01-04": 4.547471590949188,
                      "2016-01-05": 0.15031840349084113,
                      "2016-01-06": 4.9410839766070165,
                      "2016-01-07": 4.896765781779371,
                      "2016-01-08": 4.935471974998055,
                      "2016-01-09": 7.549984628116993,
                      "2016-01-10": 5.454562392827867,
                      "2016-01-11": 2.876063204590288,
                      "2016-01-12": 3.4962556303947316,
                      "2016-01-13": 5.581049567418119
                    },
                    "freq": "D",
                    "clean_ex_first": true,
                    "level": [90],
                    "model": "timegpt-1"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-fern-sdk-method-name": "timegpt_historic"
      }
    },
    "/timegpt_multi_series": {
      "post": {
        "summary": "Foundational Time Series Model Multi Series (Beta)",
        "description": "Based on the provided data, this endpoint predicts the future values of multiple time series at once. It takes a JSON as an input containing information like the series frequency and historical data. (See below for a full description of the parameters.) The response contains the predicted values for each series based on the input arguments. Get your token for private beta at https://dashboard.nixtla.io.",
        "operationId": "timegpt_multi_series_timegpt_multi_series_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MultiSeriesForecast",
                "examples": [null]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-fern-sdk-method-name": "timegpt_multi_series"
      }
    },
    "/timegpt_multi_series_historic": {
      "post": {
        "summary": "Foundational Time Series Model Multi Series Historic (Beta)",
        "description": "Based on the provided data, this endpoint predicts the in-sample period (historical period) values of multiple time series at once. It takes a JSON as an input containing information like the series frequency and historical data. (See below for a full description of the parameters.) The response contains the predicted values for the historical period. Usually useful for anomaly detection. Get your token for private beta at https://dashboard.nixtla.io.",
        "operationId": "timegpt_multi_series_historic_timegpt_multi_series_historic_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MultiSeriesInsampleForecast",
                "examples": [
                  {
                    "y": {
                      "columns": ["unique_id", "ds", "y"],
                      "data": [
                        ["PeytonManning", "2015-12-02", 4.390508031418598],
                        ["PeytonManning", "2015-12-03", 5.721514930979356],
                        ["PeytonManning", "2015-12-04", 4.822107008573151],
                        ["PeytonManning", "2015-12-05", 4.359065463975175],
                        ["PeytonManning", "2015-12-06", 3.3892383947112377],
                        ["PeytonManning", "2015-12-07", 5.167152904533249],
                        ["PeytonManning", "2015-12-08", 3.50069769010154],
                        ["PeytonManning", "2015-12-09", 7.134184006256638],
                        ["PeytonManning", "2015-12-10", 7.709302084008234],
                        ["PeytonManning", "2015-12-11", 3.0675321506062216],
                        ["PeytonManning", "2015-12-12", 6.333800304661317],
                        ["PeytonManning", "2015-12-13", 4.231159358023236],
                        ["PeytonManning", "2015-12-14", 4.5443564887514585],
                        ["PeytonManning", "2015-12-15", 7.404773106341288],
                        ["PeytonManning", "2015-12-16", 0.5682884655830955],
                        ["PeytonManning", "2015-12-17", 0.6970343976123257],
                        ["PeytonManning", "2015-12-18", 0.16174717952260576],
                        ["PeytonManning", "2015-12-19", 6.660958764383504],
                        ["PeytonManning", "2015-12-20", 6.225254007598804],
                        ["PeytonManning", "2015-12-21", 6.960097185974553],
                        ["PeytonManning", "2015-12-22", 7.828946737862112],
                        ["PeytonManning", "2015-12-23", 6.393268513733789],
                        ["PeytonManning", "2015-12-24", 3.6918348980234548],
                        ["PeytonManning", "2015-12-25", 6.244233410291644],
                        ["PeytonManning", "2015-12-26", 0.9461954069514658],
                        ["PeytonManning", "2015-12-27", 5.119368170620191],
                        ["PeytonManning", "2015-12-28", 1.1468262992723712],
                        ["PeytonManning", "2015-12-29", 7.557351336396671],
                        ["PeytonManning", "2015-12-30", 4.174786574000573],
                        ["PeytonManning", "2015-12-31", 3.3172955199241887],
                        ["PeytonManning", "2016-01-01", 2.1164448968370158],
                        ["PeytonManning", "2016-01-02", 6.193869515473733],
                        ["PeytonManning", "2016-01-03", 3.6492026577323884],
                        ["PeytonManning", "2016-01-04", 4.547471590949188],
                        ["PeytonManning", "2016-01-05", 0.15031840349084113],
                        ["PeytonManning", "2016-01-06", 4.9410839766070165],
                        ["PeytonManning", "2016-01-07", 4.896765781779371],
                        ["PeytonManning", "2016-01-08", 4.935471974998055],
                        ["PeytonManning", "2016-01-09", 7.549984628116993],
                        ["PeytonManning", "2016-01-10", 5.454562392827867],
                        ["PeytonManning", "2016-01-11", 2.876063204590288],
                        ["PeytonManning", "2016-01-12", 3.4962556303947316],
                        ["PeytonManning", "2016-01-13", 5.581049567418119],
                        ["TomBrady", "2015-12-02", 4.390508031418598],
                        ["TomBrady", "2015-12-03", 5.721514930979356],
                        ["TomBrady", "2015-12-04", 4.822107008573151],
                        ["TomBrady", "2015-12-05", 4.359065463975175],
                        ["TomBrady", "2015-12-06", 3.3892383947112377],
                        ["TomBrady", "2015-12-07", 5.167152904533249],
                        ["TomBrady", "2015-12-08", 3.50069769010154],
                        ["TomBrady", "2015-12-09", 7.134184006256638],
                        ["TomBrady", "2015-12-10", 7.709302084008234],
                        ["TomBrady", "2015-12-11", 3.0675321506062216],
                        ["TomBrady", "2015-12-12", 6.333800304661317],
                        ["TomBrady", "2015-12-13", 4.231159358023236],
                        ["TomBrady", "2015-12-14", 4.5443564887514585],
                        ["TomBrady", "2015-12-15", 7.404773106341288],
                        ["TomBrady", "2015-12-16", 0.5682884655830955],
                        ["TomBrady", "2015-12-17", 0.6970343976123257],
                        ["TomBrady", "2015-12-18", 0.16174717952260576],
                        ["TomBrady", "2015-12-19", 6.660958764383504],
                        ["TomBrady", "2015-12-20", 6.225254007598804],
                        ["TomBrady", "2015-12-21", 6.960097185974553],
                        ["TomBrady", "2015-12-22", 7.828946737862112],
                        ["TomBrady", "2015-12-23", 6.393268513733789],
                        ["TomBrady", "2015-12-24", 3.6918348980234548],
                        ["TomBrady", "2015-12-25", 6.244233410291644],
                        ["TomBrady", "2015-12-26", 0.9461954069514658],
                        ["TomBrady", "2015-12-27", 5.119368170620191],
                        ["TomBrady", "2015-12-28", 1.1468262992723712],
                        ["TomBrady", "2015-12-29", 7.557351336396671],
                        ["TomBrady", "2015-12-30", 4.174786574000573],
                        ["TomBrady", "2015-12-31", 3.3172955199241887],
                        ["TomBrady", "2016-01-01", 2.1164448968370158],
                        ["TomBrady", "2016-01-02", 6.193869515473733],
                        ["TomBrady", "2016-01-03", 3.6492026577323884],
                        ["TomBrady", "2016-01-04", 4.547471590949188],
                        ["TomBrady", "2016-01-05", 0.15031840349084113],
                        ["TomBrady", "2016-01-06", 4.9410839766070165],
                        ["TomBrady", "2016-01-07", 4.896765781779371],
                        ["TomBrady", "2016-01-08", 4.935471974998055],
                        ["TomBrady", "2016-01-09", 7.549984628116993],
                        ["TomBrady", "2016-01-10", 5.454562392827867],
                        ["TomBrady", "2016-01-11", 2.876063204590288],
                        ["TomBrady", "2016-01-12", 3.4962556303947316],
                        ["TomBrady", "2016-01-13", 5.581049567418119]
                      ]
                    },
                    "freq": "D",
                    "level": [90],
                    "model": "timegpt-1"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-fern-sdk-method-name": "timegpt_multi_series_historic"
      }
    },
    "/timegpt_multi_series_anomalies": {
      "post": {
        "summary": "Foundational Time Series Model Multi Series Anomaly Detector (Beta)",
        "description": "Based on the provided data, this endpoint detects the anomalies in the historical perdiod of multiple time series at once. It takes a JSON as an input containing information like the series frequency and historical data. (See below for a full description of the parameters.) The response contains a flag indicating if the date has an anomaly and also provides the prediction interval used to define if an observation is an anomaly.Get your token for private beta at https://dashboard.nixtla.io.",
        "operationId": "timegpt_multi_series_anomalies_timegpt_multi_series_anomalies_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MultiSeriesAnomaly",
                "examples": [null]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-fern-sdk-method-name": "timegpt_multi_series_anomalies"
      }
    },
    "/timegpt_multi_series_cross_validation": {
      "post": {
        "summary": "Foundational Time Series Model Multi Series Cross Validation (Beta)",
        "description": "Perform Cross Validation for multiple series",
        "operationId": "timegpt_multi_series_cross_validation_timegpt_multi_series_cross_validation_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MultiSeriesCrossValidation",
                "examples": [null]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-fern-sdk-method-name": "timegpt_multi_series_cross_validation"
      }
    },
    "/v2/forecast": {
      "post": {
        "summary": "Foundational Time Series Model Multi Series (Beta)",
        "description": "Based on the provided data, this endpoint predicts the future values of multiple time series at once. It takes a JSON as an input containing information like the series frequency and historical data. (See below for a full description of the parameters.) The response contains the predicted values for each series based on the input arguments. Get your token for private beta at https://dashboard.nixtla.io.",
        "operationId": "v2_forecast_v2_forecast_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForecastInput",
                "examples": [
                  {
                    "series": {
                      "sizes": [5, 3],
                      "y": [1, 2, 3, 4, 5, 10, 20, 30]
                    },
                    "h": 2,
                    "freq": "D"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForecastOutput"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-fern-sdk-method-name": "v2/forecast"
      }
    },
    "/v2/cross_validation": {
      "post": {
        "summary": "Foundational Time Series Model Multi Series Cross Validation (Beta)",
        "description": "Perform Cross Validation for multiple series",
        "operationId": "v2_cross_validation_v2_cross_validation_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CrossValidationInput",
                "examples": [
                  {
                    "series": {
                      "sizes": [5, 3],
                      "y": [1, 2, 3, 4, 5, 10, 20, 30]
                    },
                    "h": 2,
                    "n_windows": 1,
                    "freq": "D"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CrossValidationOutput"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-fern-sdk-method-name": "v2/cross_validation"
      }
    },
    "/v2/historic_forecast": {
      "post": {
        "summary": "Foundational Time Series Model Multi Series Historic (Beta)",
        "description": "Based on the provided data, this endpoint predicts the in-sample period (historical period) values of multiple time series at once. It takes a JSON as an input containing information like the series frequency and historical data. (See below for a full description of the parameters.) The response contains the predicted values for the historical period. Usually useful for anomaly detection. Get your token for private beta at https://dashboard.nixtla.io.",
        "operationId": "v2_historic_forecast_v2_historic_forecast_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InSampleInput",
                "examples": [
                  {
                    "series": {
                      "sizes": [35],
                      "y": [
                        0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4,
                        5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 10, 4, 5, 6
                      ]
                    },
                    "freq": "D"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InSampleOutput"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-fern-sdk-method-name": "v2/historic_forecast"
      }
    },
    "/v2/anomaly_detection": {
      "post": {
        "summary": "Foundational Time Series Model Multi Series Anomaly Detector (Beta)",
        "description": "Based on the provided data, this endpoint detects the anomalies in the historical perdiod of multiple time series at once. It takes a JSON as an input containing information like the series frequency and historical data. (See below for a full description of the parameters.) The response contains a flag indicating if the date has an anomaly and also provides the prediction interval used to define if an observation is an anomaly.Get your token for private beta at https://dashboard.nixtla.io.",
        "operationId": "v2_anomaly_detection_v2_anomaly_detection_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnomalyDetectionInput",
                "examples": [
                  {
                    "series": {
                      "sizes": [35],
                      "y": [
                        0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4,
                        5, 6, 0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 10, 4, 5, 6
                      ]
                    },
                    "freq": "D",
                    "level": 90
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AnomalyDetectionOutput"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-fern-sdk-method-name": "v2/anomaly_detection"
      }
    },
    "/v2/online_anomaly_detection": {
      "post": {
        "summary": "Foundational Time Series Model Online Multi Series Anomaly Detector (Beta)",
        "description": "This endpoint performs online anomaly detection based on the provided data. It uses cross-validation for more robust detection of anomalies and it supports detection for univariate and multivariate scenarios. It takes a JSON as an input containing information like the series frequency and historical data. (See below for a full description of the parameters.) The response contains a flag indicating if the date has an anomaly, it provides the prediction interval used to define if an observation is an anomaly, and it reports the associated z-score for each point. Get your token for private beta at https://dashboard.nixtla.io.",
        "operationId": "v2_online_anomaly_detection_v2_online_anomaly_detection_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OnlineAnomalyInput",
                "examples": [
                  {
                    "series": {
                      "sizes": [320],
                      "y": [
                        12, 12.99833416646828, 13.986693307950611,
                        14.955202066613396, 15.894183423086506,
                        16.794255386042032, 17.646424733950354,
                        18.442176872376912, 19.173560908995228,
                        19.833269096274833, 20.414709848078964,
                        20.912073600614356, 21.320390859672266,
                        21.63558185417193, 21.854497299884603,
                        21.974949866040546, 21.995736030415053,
                        21.916648104524686, 21.73847630878195,
                        21.463000876874144, 21.092974268256818,
                        20.632093666488736, 20.0849640381959,
                        19.457052121767198, 18.754631805511508,
                        17.984721441039564, 17.15501371821464, 16.2737988023383,
                        15.349881501559047, 14.39249329213982,
                        13.411200080598672, 12.415806624332905,
                        11.416258565724199, 10.422543058567513,
                        9.444588979731684, 8.492167723103801, 7.574795567051475,
                        6.701638590915066, 5.8814210905728075,
                        5.1223384081602585, 4.4319750469207175,
                        3.817228889355892, 3.284242275864118, 2.838340632505451,
                        2.4839792611048406, 2.22469882334903,
                        2.0630899636653552, 2.000767424358992,
                        2.038353911641595, 2.175473873756676,
                        2.4107572533686152, 2.741853176722678,
                        3.1654534427984693, 3.6773255777609926,
                        4.2723551244401285, 4.9445967442960805,
                        5.6873336212767915, 6.493144574023624,
                        7.353978205862434, 8.26123335169764, 9.205845018010741,
                        10.17837495727905, 11.169105971825037,
                        12.168139004843505, 13.165492048504937,
                        14.151199880878156, 15.115413635133788,
                        16.048499206165985, 16.94113351138609,
                        17.784397643882002, 18.56986598718789,
                        19.289690401258767, 19.936678638491532,
                        20.50436620628565, 20.98708095811627, 21.37999976774739,
                        21.679196720314863, 21.881682338770005,
                        21.985433453746047, 21.98941341839772,
                        21.893582466233816, 21.698898108450862,
                        21.407305566797724, 21.02171833756293,
                        20.545989080882805, 19.984871126234903,
                        19.343970978741133, 18.62969230082182,
                        17.849171928917617, 17.010208564578846,
                        16.121184852417567, 15.190983623493521,
                        14.22889914100246, 13.244544235070617,
                        12.247754254533577, 11.248488795381906,
                        10.256732187770186, 9.282393735890558,
                        8.335208707480717, 7.424641062246787, 6.559788891106303,
                        5.749293511071166, 5.001253124064563, 4.323141902364175,
                        3.7217353091434635, 3.2030424002833, 2.772245783871927,
                        2.433649837298116, 2.1906376993350847,
                        2.045637466936226, 2.000097934492965, 2.05447411796011,
                        2.208222708486831, 2.4598075009791103,
                        2.8067147433532433, 3.2454782531157154,
                        3.771714050312921, 4.380164160809679, 5.064749152228776,
                        5.818628877629667, 6.634270819995651, 7.503525354654001,
                        8.41770717763173, 9.36768208634199, 10.343958245516905,
                        11.336781026487992, 12.336230472211385,
                        13.33232041419944, 14.315098251015389,
                        15.274744391376931, 16.20167036826641,
                        17.086614643723752, 17.920735147072243,
                        18.695697621966023, 19.403758899524487,
                        20.03784426551621, 20.59161814856497,
                        21.059547423084627, 21.436956694441047,
                        21.72007501394976, 21.906073556948705,
                        21.993093887479176, 21.980266527163614,
                        21.86771964274613, 21.656577765492774,
                        21.34895055524683, 20.947911721405035,
                        20.457468311429334, 19.882520673753163,
                        19.22881349511976, 18.502878401571166,
                        17.71196869659987, 16.86398688853798, 15.96740573130612,
                        15.031183567457022, 14.064674819377966,
                        13.077536522994423, 12.079631837859356,
                        11.080931497723183, 10.091414186258106,
                        9.120966833349346, 8.179285828159909, 7.275780136015339,
                        6.4194772871322066, 5.618933176520498,
                        4.882146576308769, 4.216479214657015,
                        3.6285822198025315, 3.1243296641849536,
                        2.7087598726563034, 2.3860250812044317,
                        2.159349949183566, 2.0309993395840387,
                        2.002255689269889, 2.073406195293673, 2.243739945318424,
                        2.5115550208187596, 2.874175502088155,
                        3.3279782051441877, 3.8684288833851355,
                        4.490127532283239, 5.186862344445, 5.951671775937159,
                        6.776914103732684, 7.6543437792810645,
                        8.575193815303875, 9.530263382633791,
                        10.510009741858012, 11.504643591216325,
                        12.504226878068147, 13.498772096629523,
                        14.478342079829599, 15.433149288198987,
                        16.353653603728933, 17.230657651576994,
                        18.05539869719601, 18.819636200681355,
                        19.515734153521507, 20.136737375071053,
                        20.67644100641669, 21.129452507276277,
                        21.491245536478946, 21.758205177669765,
                        21.92766405835907, 21.99792900142669, 21.96829794278799,
                        21.83906694618616, 21.611527245021158,
                        21.287952340772407, 20.871575286923495,
                        20.36655638536056, 19.777941618010928, 19.1116122290598,
                        18.37422596150239, 17.573150535176584,
                        16.716390030941962, 15.8125049165494,
                        14.870526513277252, 13.899866757954378,
                        12.910224161998443, 11.911486907095961,
                        10.913634045759203, 9.926635793932377, 8.96035391188953,
                        8.024443168785638, 7.128254875394905, 6.280743448904362,
                        5.4903769433375045, 4.76505243955755, 4.112017140245813,
                        3.537795958248294, 3.0481263218031813,
                        2.647900848054597, 2.341118457639295,
                        2.1308444187935063, 2.0191797202060364,
                        2.007240078633723, 2.0951447910284404,
                        2.2820155425613677, 2.5659851824544564,
                        2.9442163799337617, 3.412929973900706,
                        3.967442733060473, 4.602214149221066, 5.310901796219784,
                        6.086424701348756, 6.921034096093779, 7.806390839267719,
                        8.733648738952777, 9.693542940726077, 10.67648249902227,
                        11.672646206691546, 12.672080725254785,
                        13.664800035371591, 14.64088521384473,
                        15.590583540221683, 16.50440594275389,
                        17.37322181006475, 18.188350221200395,
                        18.941646682522446, 19.625584504796027,
                        20.233330007380815, 20.75881079810891, 21.1967764466202,
                        21.542850944926982, 21.79357643103917,
                        21.94644773877838, 21.999937428570206,
                        21.95351104911559, 21.80763247745152, 21.56375928404503,
                        21.22432816923086, 20.792730616507228,
                        20.273279005953786, 19.67116352635528,
                        18.992400316550977, 18.243771354163915,
                        17.43275669232245, 16.567459721441928,
                        15.65652620282618, 14.70905788307869, 13.73452155245892,
                        12.742654455843578, 11.743367001394406,
                        10.746643739035674, 9.762443598132036, 8.80060038115802,
                        7.870724507594566, 6.982106989794258,
                        6.1436266002569955, 5.363661157870324,
                        4.650003819512223, 4.009785213403841,
                        3.4494021922292983, 2.9744539178981313,
                        2.589685916570465, 2.2989426629281464,
                        2.1051291674546437, 2.010181950530505,
                        2.0150496933618545, 2.119683759071382,
                        2.3230386786619484, 2.6230825969972003,
                        3.0168175744264527, 3.5003095412067378,
                        4.068727605427148, 4.716392321684066,
                        5.4368324382221225, 6.222849555542682,
                        7.066590050432248, 7.9596235467693495,
                        8.893027149056277, 9.857474597041158, 10.84332945062763,
                        11.840741373999018, 12.839744556917468,
                        13.83035728980588, 14.802681697690229, 30,
                        16.653884763549584
                      ]
                    },
                    "h": 20,
                    "freq": "W",
                    "level": 99,
                    "detection_size": 5
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OnlineAnomalyOutput"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-fern-sdk-method-name": "v2/online_anomaly_detection"
      }
    },
    "/v2/finetune": {
      "post": {
        "summary": "Foundational Time Series Model Multi Series Finetuning (Beta)",
        "description": "Fine-tune the large time model to your data and save it for later use. It takes a JSON as an input containing information like the series frequency and historical data. (See below for a full description of the parameters.) The response contains the ID of the finetuned model, which you can provide in other endpoints to use that model to make the forecasts. Get your token for private beta at https://dashboard.nixtla.io.",
        "operationId": "v2_finetune_v2_finetune_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FinetuneInput",
                "examples": [
                  {
                    "series": {
                      "y": [
                        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
                        16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
                        30, 31, 32, 33, 34, 35
                      ],
                      "sizes": [36]
                    },
                    "finetune_steps": 10,
                    "freq": "MS",
                    "model": "timegpt-1"
                  }
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FinetuneOutput"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "x-fern-sdk-method-name": "v2/finetune"
      }
    },
    "/v2/finetuned_models": {
      "get": {
        "summary": "List Fine-tuned Models (Beta)",
        "description": "List all the finetuned models that you have created. The response contains a list with the IDs of the models that you have fine-tuned and are available to make forecasts.",
        "operationId": "v2_finetuned_models_v2_finetuned_models_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FinetunedModelsOutput"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/v2/finetuned_models/{finetuned_model_id}": {
      "get": {
        "summary": "Get single Fine-tuned Model (Beta)",
        "description": "Retrieve metadata for a previously fine-tuned model. The response contains the metadata of a model that you have fine-tuned and is available to make forecasts.",
        "operationId": "v2_finetuned_model_v2_finetuned_models__finetuned_model_id__get",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "finetuned_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9\\-_]{1,36}$",
              "title": "Finetuned Model Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FinetunedModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Fine-tuned Model (Beta)",
        "description": "Delete a previously saved finetuned model. It takes the ID of the model that you want to delete as a path parameter.",
        "operationId": "v2_finetuned_models_delete_v2_finetuned_models__finetuned_model_id__delete",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "finetuned_model_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-zA-Z0-9\\-_]{1,36}$",
              "title": "Finetuned Model Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AnomalyDetectionInput": {
        "properties": {
          "series": {
            "properties": {
              "X": {
                "anyOf": [
                  {
                    "items": {
                      "items": {
                        "type": "number"
                      },
                      "type": "array"
                    },
                    "type": "array"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "X",
                "description": "Historic values of the exogenous features. Each feature must be a list of the same size as the target (y)."
              },
              "y": {
                "items": {
                  "type": "number"
                },
                "type": "array",
                "title": "Y",
                "description": "Historic values of the target."
              },
              "sizes": {
                "items": {
                  "type": "integer"
                },
                "type": "array",
                "title": "Sizes",
                "description": "Sizes of the individual series."
              }
            },
            "type": "object",
            "required": ["y", "sizes"],
            "title": "SeriesWithExogenous"
          },
          "freq": {
            "type": "string",
            "title": "Freq",
            "description": "The frequency of the data represented as a string. 'D' for daily, 'M' for monthly, 'H' for hourly, and 'W' for weekly frequencies are available."
          },
          "model": {
            "title": "Model",
            "description": "Model to use as a string. Common options are (but not restricted to) `timegpt-1` and `timegpt-1-long-horizon.` Full options vary by different users. Contact ops@nixtla.io for more information. We recommend using `timegpt-1-long-horizon` for forecasting if you want to predict more than one seasonal period given the frequency of your data.",
            "default": "timegpt-1"
          },
          "clean_ex_first": {
            "type": "boolean",
            "title": "Clean Ex First",
            "description": "A boolean flag that indicates whether the API should preprocess (clean) the exogenous signal before applying the large time model. If True, the exogenous signal is cleaned; if False, the exogenous variables are applied after the large time model.",
            "default": true
          },
          "finetuned_model_id": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^[a-zA-Z0-9\\-_]{1,36}$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Finetuned Model Id",
            "description": "ID of previously finetuned model"
          },
          "level": {
            "anyOf": [
              {
                "type": "integer",
                "exclusiveMaximum": 100,
                "minimum": 0
              },
              {
                "type": "number",
                "exclusiveMaximum": 100,
                "minimum": 0
              }
            ],
            "title": "Level",
            "description": "Specifies the confidence level for the prediction interval used in anomaly detection. It is represented as a percentage between 0 and 100. For instance, a level of 95 indicates that the generated prediction interval captures the true future observation 95% of the time. Any observed values outside of this interval would be considered anomalies. A higher level leads to wider prediction intervals and potentially fewer detected anomalies, whereas a lower level results in narrower intervals and potentially more detected anomalies. Default: 99.",
            "default": 99
          }
        },
        "type": "object",
        "required": ["series", "freq"],
        "title": "AnomalyDetectionInput"
      },
      "AnomalyDetectionOutput": {
        "properties": {
          "input_tokens": {
            "type": "integer",
            "minimum": 0,
            "title": "Input Tokens"
          },
          "output_tokens": {
            "type": "integer",
            "minimum": 0,
            "title": "Output Tokens"
          },
          "finetune_tokens": {
            "type": "integer",
            "minimum": 0,
            "title": "Finetune Tokens"
          },
          "mean": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Mean"
          },
          "sizes": {
            "items": {
              "type": "integer"
            },
            "type": "array",
            "title": "Sizes"
          },
          "intervals": {
            "anyOf": [
              {
                "additionalProperties": {
                  "items": {
                    "type": "number"
                  },
                  "type": "array"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Intervals"
          },
          "weights_x": {
            "anyOf": [
              {
                "items": {
                  "type": "number"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Weights X"
          },
          "feature_contributions": {
            "anyOf": [
              {
                "items": {
                  "items": {
                    "type": "number"
                  },
                  "type": "array"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Feature Contributions"
          },
          "anomaly": {
            "items": {
              "type": "boolean"
            },
            "type": "array",
            "title": "Anomaly"
          }
        },
        "type": "object",
        "required": [
          "input_tokens",
          "output_tokens",
          "finetune_tokens",
          "mean",
          "sizes",
          "anomaly"
        ],
        "title": "AnomalyDetectionOutput"
      },
      "CrossValidationInput": {
        "properties": {
          "series": {
            "properties": {
              "X": {
                "anyOf": [
                  {
                    "items": {
                      "items": {
                        "type": "number"
                      },
                      "type": "array"
                    },
                    "type": "array"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "X",
                "description": "Historic values of the exogenous features. Each feature must be a list of the same size as the target (y)."
              },
              "y": {
                "items": {
                  "type": "number"
                },
                "type": "array",
                "title": "Y",
                "description": "Historic values of the target."
              },
              "sizes": {
                "items": {
                  "type": "integer"
                },
                "type": "array",
                "title": "Sizes",
                "description": "Sizes of the individual series."
              }
            },
            "type": "object",
            "required": ["y", "sizes"],
            "title": "SeriesWithExogenous"
          },
          "freq": {
            "type": "string",
            "title": "Freq",
            "description": "The frequency of the data represented as a string. 'D' for daily, 'M' for monthly, 'H' for hourly, and 'W' for weekly frequencies are available."
          },
          "n_windows": {
            "type": "integer",
            "exclusiveMinimum": 0,
            "title": "N Windows",
            "description": "Number of windows to evaluate."
          },
          "h": {
            "type": "integer",
            "exclusiveMinimum": 0,
            "title": "H",
            "description": "The forecasting horizon. This represents the number of time steps into the future that the forecast should predict."
          },
          "model": {
            "title": "Model",
            "description": "Model to use as a string. Common options are (but not restricted to) `timegpt-1` and `timegpt-1-long-horizon.` Full options vary by different users. Contact ops@nixtla.io for more information. We recommend using `timegpt-1-long-horizon` for forecasting if you want to predict more than one seasonal period given the frequency of your data.",
            "default": "timegpt-1"
          },
          "clean_ex_first": {
            "type": "boolean",
            "title": "Clean Ex First",
            "description": "A boolean flag that indicates whether the API should preprocess (clean) the exogenous signal before applying the large time model. If True, the exogenous signal is cleaned; if False, the exogenous variables are applied after the large time model.",
            "default": true
          },
          "level": {
            "anyOf": [
              {
                "items": {
                  "anyOf": [
                    {
                      "type": "integer",
                      "exclusiveMaximum": 100,
                      "minimum": 0
                    },
                    {
                      "type": "number",
                      "exclusiveMaximum": 100,
                      "minimum": 0
                    }
                  ]
                },
                "type": "array",
                "minItems": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Level",
            "description": "A list of values representing the prediction intervals. Each value is a percentage that indicates the level of certainty for the corresponding prediction interval. For example, [80, 90] defines 80% and 90% prediction intervals."
          },
          "finetune_steps": {
            "type": "integer",
            "minimum": 0,
            "title": "Finetune Steps",
            "description": "The number of tuning steps used to train the large time model on the data. Set this value to 0 for zero-shot inference, i.e., to make predictions without any further model tuning.",
            "default": 0
          },
          "finetune_loss": {
            "type": "string",
            "enum": ["default", "mae", "mse", "rmse", "mape", "smape"],
            "title": "Finetune Loss",
            "description": "The loss used to train the large time model on the data. Select from ['default', 'mae', 'mse', 'rmse', 'mape', 'smape']. It will only be used if finetune_steps larger than 0. Default is a robust loss function that is less sensitive to outliers.",
            "default": "default"
          },
          "finetune_depth": {
            "type": "integer",
            "enum": [1, 2, 3, 4, 5],
            "title": "Finetune Depth",
            "description": "The depth of the finetuning. Uses a scale from 1 to 5, where 1 means little finetuning, and 5 means that the entire model is finetuned. By default, the value is set to 1.",
            "default": 1
          },
          "finetuned_model_id": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^[a-zA-Z0-9\\-_]{1,36}$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Finetuned Model Id",
            "description": "ID of previously finetuned model"
          },
          "step_size": {
            "anyOf": [
              {
                "type": "integer",
                "exclusiveMinimum": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Step Size",
            "description": "Step size between each cross validation window. If None it will be equal to the forecasting horizon."
          },
          "hist_exog": {
            "anyOf": [
              {
                "items": {
                  "type": "integer",
                  "minimum": 0
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Hist Exog",
            "description": "Zero-based indices of the exogenous features to treat as historical."
          },
          "refit": {
            "type": "boolean",
            "title": "Refit",
            "description": "Fine-tune the model in each window. If `False`, only fine-tunes on the first window. Only used if `finetune_steps` > 0.",
            "default": true
          }
        },
        "type": "object",
        "required": ["series", "freq", "n_windows", "h"],
        "title": "CrossValidationInput"
      },
      "CrossValidationOutput": {
        "properties": {
          "input_tokens": {
            "type": "integer",
            "minimum": 0,
            "title": "Input Tokens"
          },
          "output_tokens": {
            "type": "integer",
            "minimum": 0,
            "title": "Output Tokens"
          },
          "finetune_tokens": {
            "type": "integer",
            "minimum": 0,
            "title": "Finetune Tokens"
          },
          "mean": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Mean"
          },
          "sizes": {
            "items": {
              "type": "integer"
            },
            "type": "array",
            "title": "Sizes"
          },
          "idxs": {
            "items": {
              "type": "integer"
            },
            "type": "array",
            "title": "Idxs"
          },
          "intervals": {
            "anyOf": [
              {
                "additionalProperties": {
                  "items": {
                    "type": "number"
                  },
                  "type": "array"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Intervals"
          }
        },
        "type": "object",
        "required": [
          "input_tokens",
          "output_tokens",
          "finetune_tokens",
          "mean",
          "sizes",
          "idxs"
        ],
        "title": "CrossValidationOutput"
      },
      "FinetuneInput": {
        "properties": {
          "series": {
            "properties": {
              "y": {
                "items": {
                  "type": "number"
                },
                "type": "array",
                "title": "Y",
                "description": "Historic values of the target."
              },
              "sizes": {
                "items": {
                  "type": "integer"
                },
                "type": "array",
                "title": "Sizes",
                "description": "Sizes of the individual series."
              }
            },
            "type": "object",
            "required": ["y", "sizes"],
            "title": "Series"
          },
          "freq": {
            "type": "string",
            "title": "Freq",
            "description": "The frequency of the data represented as a string. 'D' for daily, 'M' for monthly, 'H' for hourly, and 'W' for weekly frequencies are available."
          },
          "model": {
            "title": "Model",
            "description": "Model to use as a string. Common options are (but not restricted to) `timegpt-1` and `timegpt-1-long-horizon.` Full options vary by different users. Contact ops@nixtla.io for more information. We recommend using `timegpt-1-long-horizon` for forecasting if you want to predict more than one seasonal period given the frequency of your data.",
            "default": "timegpt-1"
          },
          "finetune_steps": {
            "type": "integer",
            "exclusiveMinimum": 0,
            "title": "Finetune Steps",
            "description": "The number of tuning steps used to train the large time model on the data. Set this value to 0 for zero-shot inference, i.e., to make predictions without any further model tuning.",
            "default": 10
          },
          "finetune_loss": {
            "type": "string",
            "enum": ["default", "mae", "mse", "rmse", "mape", "smape"],
            "title": "Finetune Loss",
            "description": "The loss used to train the large time model on the data. Select from ['default', 'mae', 'mse', 'rmse', 'mape', 'smape']. It will only be used if finetune_steps larger than 0. Default is a robust loss function that is less sensitive to outliers.",
            "default": "default"
          },
          "finetune_depth": {
            "type": "integer",
            "enum": [1, 2, 3, 4, 5],
            "title": "Finetune Depth",
            "description": "The depth of the finetuning. Uses a scale from 1 to 5, where 1 means little finetuning, and 5 means that the entire model is finetuned. By default, the value is set to 1.",
            "default": 1
          },
          "output_model_id": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^[a-zA-Z0-9\\-_]{1,36}$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Output Model Id",
            "description": "ID to assign to the finetuned model"
          },
          "finetuned_model_id": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^[a-zA-Z0-9\\-_]{1,36}$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Finetuned Model Id",
            "description": "ID of previously finetuned model"
          }
        },
        "type": "object",
        "required": ["series", "freq"],
        "title": "FinetuneInput"
      },
      "FinetuneOutput": {
        "properties": {
          "input_tokens": {
            "type": "integer",
            "minimum": 0,
            "title": "Input Tokens"
          },
          "output_tokens": {
            "type": "integer",
            "minimum": 0,
            "title": "Output Tokens"
          },
          "finetune_tokens": {
            "type": "integer",
            "minimum": 0,
            "title": "Finetune Tokens"
          },
          "finetuned_model_id": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9\\-_]{1,36}$",
            "title": "Finetuned Model Id"
          }
        },
        "type": "object",
        "required": [
          "input_tokens",
          "output_tokens",
          "finetune_tokens",
          "finetuned_model_id"
        ],
        "title": "FinetuneOutput"
      },
      "FinetunedModel": {
        "properties": {
          "id": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9\\-_]{1,36}$",
            "title": "Id"
          },
          "created_at": {
            "type": "string",
            "title": "Created At"
          },
          "created_by": {
            "type": "string",
            "title": "Created By",
            "default": "user"
          },
          "base_model_id": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9\\-_]{1,36}$",
            "title": "Base Model Id"
          },
          "steps": {
            "type": "integer",
            "title": "Steps"
          },
          "depth": {
            "type": "integer",
            "title": "Depth"
          },
          "loss": {
            "type": "string",
            "enum": ["default", "mae", "mse", "rmse", "mape", "smape"],
            "title": "Loss"
          },
          "model": {
            "type": "string",
            "title": "Model"
          },
          "freq": {
            "type": "string",
            "title": "Freq"
          }
        },
        "type": "object",
        "required": [
          "id",
          "created_at",
          "base_model_id",
          "steps",
          "depth",
          "loss",
          "model",
          "freq"
        ],
        "title": "FinetunedModel"
      },
      "FinetunedModelsOutput": {
        "properties": {
          "finetuned_models": {
            "items": {
              "properties": {
                "id": {
                  "type": "string",
                  "pattern": "^[a-zA-Z0-9\\-_]{1,36}$",
                  "title": "Id"
                },
                "created_at": {
                  "type": "string",
                  "title": "Created At"
                },
                "created_by": {
                  "type": "string",
                  "title": "Created By",
                  "default": "user"
                },
                "base_model_id": {
                  "type": "string",
                  "pattern": "^[a-zA-Z0-9\\-_]{1,36}$",
                  "title": "Base Model Id"
                },
                "steps": {
                  "type": "integer",
                  "title": "Steps"
                },
                "depth": {
                  "type": "integer",
                  "title": "Depth"
                },
                "loss": {
                  "type": "string",
                  "enum": ["default", "mae", "mse", "rmse", "mape", "smape"],
                  "title": "Loss"
                },
                "model": {
                  "type": "string",
                  "title": "Model"
                },
                "freq": {
                  "type": "string",
                  "title": "Freq"
                }
              },
              "type": "object",
              "required": [
                "id",
                "created_at",
                "base_model_id",
                "steps",
                "depth",
                "loss",
                "model",
                "freq"
              ],
              "title": "FinetunedModel"
            },
            "type": "array",
            "title": "Finetuned Models"
          }
        },
        "type": "object",
        "required": ["finetuned_models"],
        "title": "FinetunedModelsOutput"
      },
      "ForecastInput": {
        "properties": {
          "series": {
            "properties": {
              "X_future": {
                "anyOf": [
                  {
                    "items": {
                      "items": {
                        "type": "number"
                      },
                      "type": "array"
                    },
                    "type": "array"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "X Future",
                "description": "Future values of the exogenous features. Each feature must be a list of size number of series times the forecast horizon (h)."
              },
              "X": {
                "anyOf": [
                  {
                    "items": {
                      "items": {
                        "type": "number"
                      },
                      "type": "array"
                    },
                    "type": "array"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "X",
                "description": "Historic values of the exogenous features. Each feature must be a list of the same size as the target (y)."
              },
              "y": {
                "items": {
                  "type": "number"
                },
                "type": "array",
                "title": "Y",
                "description": "Historic values of the target."
              },
              "sizes": {
                "items": {
                  "type": "integer"
                },
                "type": "array",
                "title": "Sizes",
                "description": "Sizes of the individual series."
              }
            },
            "type": "object",
            "required": ["y", "sizes"],
            "title": "SeriesWithFutureExogenous"
          },
          "freq": {
            "type": "string",
            "title": "Freq",
            "description": "The frequency of the data represented as a string. 'D' for daily, 'M' for monthly, 'H' for hourly, and 'W' for weekly frequencies are available."
          },
          "h": {
            "type": "integer",
            "exclusiveMinimum": 0,
            "title": "H",
            "description": "The forecasting horizon. This represents the number of time steps into the future that the forecast should predict."
          },
          "model": {
            "title": "Model",
            "description": "Model to use as a string. Common options are (but not restricted to) `timegpt-1` and `timegpt-1-long-horizon.` Full options vary by different users. Contact ops@nixtla.io for more information. We recommend using `timegpt-1-long-horizon` for forecasting if you want to predict more than one seasonal period given the frequency of your data.",
            "default": "timegpt-1"
          },
          "clean_ex_first": {
            "type": "boolean",
            "title": "Clean Ex First",
            "description": "A boolean flag that indicates whether the API should preprocess (clean) the exogenous signal before applying the large time model. If True, the exogenous signal is cleaned; if False, the exogenous variables are applied after the large time model.",
            "default": true
          },
          "level": {
            "anyOf": [
              {
                "items": {
                  "anyOf": [
                    {
                      "type": "integer",
                      "exclusiveMaximum": 100,
                      "minimum": 0
                    },
                    {
                      "type": "number",
                      "exclusiveMaximum": 100,
                      "minimum": 0
                    }
                  ]
                },
                "type": "array",
                "minItems": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Level",
            "description": "A list of values representing the prediction intervals. Each value is a percentage that indicates the level of certainty for the corresponding prediction interval. For example, [80, 90] defines 80% and 90% prediction intervals."
          },
          "finetune_steps": {
            "type": "integer",
            "minimum": 0,
            "title": "Finetune Steps",
            "description": "The number of tuning steps used to train the large time model on the data. Set this value to 0 for zero-shot inference, i.e., to make predictions without any further model tuning.",
            "default": 0
          },
          "finetune_loss": {
            "type": "string",
            "enum": ["default", "mae", "mse", "rmse", "mape", "smape"],
            "title": "Finetune Loss",
            "description": "The loss used to train the large time model on the data. Select from ['default', 'mae', 'mse', 'rmse', 'mape', 'smape']. It will only be used if finetune_steps larger than 0. Default is a robust loss function that is less sensitive to outliers.",
            "default": "default"
          },
          "finetune_depth": {
            "type": "integer",
            "enum": [1, 2, 3, 4, 5],
            "title": "Finetune Depth",
            "description": "The depth of the finetuning. Uses a scale from 1 to 5, where 1 means little finetuning, and 5 means that the entire model is finetuned. By default, the value is set to 1.",
            "default": 1
          },
          "finetuned_model_id": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^[a-zA-Z0-9\\-_]{1,36}$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Finetuned Model Id",
            "description": "ID of previously finetuned model"
          },
          "feature_contributions": {
            "type": "boolean",
            "title": "Feature Contributions",
            "description": "Compute the exogenous features contributions to the forecast.",
            "default": false
          }
        },
        "type": "object",
        "required": ["series", "freq", "h"],
        "title": "ForecastInput"
      },
      "ForecastOutput": {
        "properties": {
          "input_tokens": {
            "type": "integer",
            "minimum": 0,
            "title": "Input Tokens"
          },
          "output_tokens": {
            "type": "integer",
            "minimum": 0,
            "title": "Output Tokens"
          },
          "finetune_tokens": {
            "type": "integer",
            "minimum": 0,
            "title": "Finetune Tokens"
          },
          "mean": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Mean"
          },
          "intervals": {
            "anyOf": [
              {
                "additionalProperties": {
                  "items": {
                    "type": "number"
                  },
                  "type": "array"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Intervals"
          },
          "weights_x": {
            "anyOf": [
              {
                "items": {
                  "type": "number"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Weights X"
          },
          "feature_contributions": {
            "anyOf": [
              {
                "items": {
                  "items": {
                    "type": "number"
                  },
                  "type": "array"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Feature Contributions"
          }
        },
        "type": "object",
        "required": [
          "input_tokens",
          "output_tokens",
          "finetune_tokens",
          "mean"
        ],
        "title": "ForecastOutput"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "properties": {
                "loc": {
                  "items": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "integer"
                      }
                    ]
                  },
                  "type": "array",
                  "title": "Location"
                },
                "msg": {
                  "type": "string",
                  "title": "Message"
                },
                "type": {
                  "type": "string",
                  "title": "Error Type"
                }
              },
              "type": "object",
              "required": ["loc", "msg", "type"],
              "title": "ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "InSampleInput": {
        "properties": {
          "series": {
            "properties": {
              "X": {
                "anyOf": [
                  {
                    "items": {
                      "items": {
                        "type": "number"
                      },
                      "type": "array"
                    },
                    "type": "array"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "X",
                "description": "Historic values of the exogenous features. Each feature must be a list of the same size as the target (y)."
              },
              "y": {
                "items": {
                  "type": "number"
                },
                "type": "array",
                "title": "Y",
                "description": "Historic values of the target."
              },
              "sizes": {
                "items": {
                  "type": "integer"
                },
                "type": "array",
                "title": "Sizes",
                "description": "Sizes of the individual series."
              }
            },
            "type": "object",
            "required": ["y", "sizes"],
            "title": "SeriesWithExogenous"
          },
          "freq": {
            "type": "string",
            "title": "Freq",
            "description": "The frequency of the data represented as a string. 'D' for daily, 'M' for monthly, 'H' for hourly, and 'W' for weekly frequencies are available."
          },
          "model": {
            "title": "Model",
            "description": "Model to use as a string. Common options are (but not restricted to) `timegpt-1` and `timegpt-1-long-horizon.` Full options vary by different users. Contact ops@nixtla.io for more information. We recommend using `timegpt-1-long-horizon` for forecasting if you want to predict more than one seasonal period given the frequency of your data.",
            "default": "timegpt-1"
          },
          "clean_ex_first": {
            "type": "boolean",
            "title": "Clean Ex First",
            "description": "A boolean flag that indicates whether the API should preprocess (clean) the exogenous signal before applying the large time model. If True, the exogenous signal is cleaned; if False, the exogenous variables are applied after the large time model.",
            "default": true
          },
          "finetuned_model_id": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^[a-zA-Z0-9\\-_]{1,36}$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Finetuned Model Id",
            "description": "ID of previously finetuned model"
          },
          "level": {
            "anyOf": [
              {
                "items": {
                  "anyOf": [
                    {
                      "type": "integer",
                      "exclusiveMaximum": 100,
                      "minimum": 0
                    },
                    {
                      "type": "number",
                      "exclusiveMaximum": 100,
                      "minimum": 0
                    }
                  ]
                },
                "type": "array",
                "minItems": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Level",
            "description": "A list of values representing the prediction intervals. Each value is a percentage that indicates the level of certainty for the corresponding prediction interval. For example, [80, 90] defines 80% and 90% prediction intervals."
          },
          "feature_contributions": {
            "type": "boolean",
            "title": "Feature Contributions",
            "description": "Compute the exogenous features contributions to the forecast.",
            "default": false
          }
        },
        "type": "object",
        "required": ["series", "freq"],
        "title": "InSampleInput"
      },
      "InSampleOutput": {
        "properties": {
          "input_tokens": {
            "type": "integer",
            "minimum": 0,
            "title": "Input Tokens"
          },
          "output_tokens": {
            "type": "integer",
            "minimum": 0,
            "title": "Output Tokens"
          },
          "finetune_tokens": {
            "type": "integer",
            "minimum": 0,
            "title": "Finetune Tokens"
          },
          "mean": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Mean"
          },
          "sizes": {
            "items": {
              "type": "integer"
            },
            "type": "array",
            "title": "Sizes"
          },
          "intervals": {
            "anyOf": [
              {
                "additionalProperties": {
                  "items": {
                    "type": "number"
                  },
                  "type": "array"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Intervals"
          },
          "weights_x": {
            "anyOf": [
              {
                "items": {
                  "type": "number"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Weights X"
          },
          "feature_contributions": {
            "anyOf": [
              {
                "items": {
                  "items": {
                    "type": "number"
                  },
                  "type": "array"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Feature Contributions"
          }
        },
        "type": "object",
        "required": [
          "input_tokens",
          "output_tokens",
          "finetune_tokens",
          "mean",
          "sizes"
        ],
        "title": "InSampleOutput"
      },
      "MultiSeriesAnomaly": {
        "properties": {
          "model": {
            "title": "Model",
            "description": "Model to use as a string. Common options are (but not restricted to) `timegpt-1` and `timegpt-1-long-horizon.` Full options vary by different users. Contact ops@nixtla.io for more information. We recommend using `timegpt-1-long-horizon` for forecasting if you want to predict more than one seasonal period given the frequency of your data.",
            "default": "timegpt-1"
          },
          "freq": {
            "type": "string",
            "title": "Freq",
            "description": "The frequency of the data represented as a string. 'D' for daily, 'M' for monthly, 'H' for hourly, and 'W' for weekly frequencies are available.",
            "default": "D"
          },
          "level": {
            "items": {},
            "type": "array",
            "title": "Level",
            "description": "Specifies the confidence level for the prediction interval used in anomaly detection. It is represented as a percentage between 0 and 100. For instance, a level of 95 indicates that the generated prediction interval captures the true future observation 95% of the time. Any observed values outside of this interval would be considered anomalies. A higher level leads to wider prediction intervals and potentially fewer detected anomalies, whereas a lower level results in narrower intervals and potentially more detected anomalies. Default: 99.",
            "default": [99]
          },
          "y": {
            "title": "Y",
            "description": "The historical time series data provided as a dictionary of two colums: columns and data. The columns contains the columns of the dataframe and data contains eaach data point. For example: {\"columns\": [\"unique_id\", \"ds\", \"y\"], \"data\": [[\"ts_0\", \"2021-01-01\", 0.7], [\"ts_0\", \"2021-01-02\", 0.8]}.",
            "default": {
              "columns": ["unique_id", "ds", "y"],
              "data": [
                ["PeytonManning", "2015-12-02", 4.390508031418598],
                ["PeytonManning", "2015-12-03", 5.721514930979356],
                ["PeytonManning", "2015-12-04", 4.822107008573151],
                ["PeytonManning", "2015-12-05", 4.359065463975175],
                ["PeytonManning", "2015-12-06", 3.3892383947112377],
                ["PeytonManning", "2015-12-07", 5.167152904533249],
                ["PeytonManning", "2015-12-08", 3.50069769010154],
                ["PeytonManning", "2015-12-09", 7.134184006256638],
                ["PeytonManning", "2015-12-10", 7.709302084008234],
                ["PeytonManning", "2015-12-11", 3.0675321506062216],
                ["PeytonManning", "2015-12-12", 6.333800304661317],
                ["PeytonManning", "2015-12-13", 4.231159358023236],
                ["PeytonManning", "2015-12-14", 4.5443564887514585],
                ["PeytonManning", "2015-12-15", 7.404773106341288],
                ["PeytonManning", "2015-12-16", 0.5682884655830955],
                ["PeytonManning", "2015-12-17", 0.6970343976123257],
                ["PeytonManning", "2015-12-18", 0.16174717952260576],
                ["PeytonManning", "2015-12-19", 6.660958764383504],
                ["PeytonManning", "2015-12-20", 6.225254007598804],
                ["PeytonManning", "2015-12-21", 6.960097185974553],
                ["PeytonManning", "2015-12-22", 7.828946737862112],
                ["PeytonManning", "2015-12-23", 6.393268513733789],
                ["PeytonManning", "2015-12-24", 3.6918348980234548],
                ["PeytonManning", "2015-12-25", 6.244233410291644],
                ["PeytonManning", "2015-12-26", 0.9461954069514658],
                ["PeytonManning", "2015-12-27", 5.119368170620191],
                ["PeytonManning", "2015-12-28", 1.1468262992723712],
                ["PeytonManning", "2015-12-29", 7.557351336396671],
                ["PeytonManning", "2015-12-30", 4.174786574000573],
                ["PeytonManning", "2015-12-31", 3.3172955199241887],
                ["PeytonManning", "2016-01-01", 2.1164448968370158],
                ["PeytonManning", "2016-01-02", 6.193869515473733],
                ["PeytonManning", "2016-01-03", 3.6492026577323884],
                ["PeytonManning", "2016-01-04", 4.547471590949188],
                ["PeytonManning", "2016-01-05", 0.15031840349084113],
                ["PeytonManning", "2016-01-06", 4.9410839766070165],
                ["PeytonManning", "2016-01-07", 4.896765781779371],
                ["PeytonManning", "2016-01-08", 4.935471974998055],
                ["PeytonManning", "2016-01-09", 7.549984628116993],
                ["PeytonManning", "2016-01-10", 5.454562392827867],
                ["PeytonManning", "2016-01-11", 2.876063204590288],
                ["PeytonManning", "2016-01-12", 3.4962556303947316],
                ["PeytonManning", "2016-01-13", 5.581049567418119],
                ["TomBrady", "2015-12-02", 4.390508031418598],
                ["TomBrady", "2015-12-03", 5.721514930979356],
                ["TomBrady", "2015-12-04", 4.822107008573151],
                ["TomBrady", "2015-12-05", 4.359065463975175],
                ["TomBrady", "2015-12-06", 3.3892383947112377],
                ["TomBrady", "2015-12-07", 5.167152904533249],
                ["TomBrady", "2015-12-08", 3.50069769010154],
                ["TomBrady", "2015-12-09", 7.134184006256638],
                ["TomBrady", "2015-12-10", 7.709302084008234],
                ["TomBrady", "2015-12-11", 3.0675321506062216],
                ["TomBrady", "2015-12-12", 6.333800304661317],
                ["TomBrady", "2015-12-13", 4.231159358023236],
                ["TomBrady", "2015-12-14", 4.5443564887514585],
                ["TomBrady", "2015-12-15", 7.404773106341288],
                ["TomBrady", "2015-12-16", 0.5682884655830955],
                ["TomBrady", "2015-12-17", 0.6970343976123257],
                ["TomBrady", "2015-12-18", 0.16174717952260576],
                ["TomBrady", "2015-12-19", 6.660958764383504],
                ["TomBrady", "2015-12-20", 6.225254007598804],
                ["TomBrady", "2015-12-21", 6.960097185974553],
                ["TomBrady", "2015-12-22", 7.828946737862112],
                ["TomBrady", "2015-12-23", 6.393268513733789],
                ["TomBrady", "2015-12-24", 3.6918348980234548],
                ["TomBrady", "2015-12-25", 6.244233410291644],
                ["TomBrady", "2015-12-26", 0.9461954069514658],
                ["TomBrady", "2015-12-27", 5.119368170620191],
                ["TomBrady", "2015-12-28", 1.1468262992723712],
                ["TomBrady", "2015-12-29", 7.557351336396671],
                ["TomBrady", "2015-12-30", 4.174786574000573],
                ["TomBrady", "2015-12-31", 3.3172955199241887],
                ["TomBrady", "2016-01-01", 2.1164448968370158],
                ["TomBrady", "2016-01-02", 6.193869515473733],
                ["TomBrady", "2016-01-03", 3.6492026577323884],
                ["TomBrady", "2016-01-04", 4.547471590949188],
                ["TomBrady", "2016-01-05", 0.15031840349084113],
                ["TomBrady", "2016-01-06", 4.9410839766070165],
                ["TomBrady", "2016-01-07", 4.896765781779371],
                ["TomBrady", "2016-01-08", 4.935471974998055],
                ["TomBrady", "2016-01-09", 7.549984628116993],
                ["TomBrady", "2016-01-10", 5.454562392827867],
                ["TomBrady", "2016-01-11", 2.876063204590288],
                ["TomBrady", "2016-01-12", 3.4962556303947316],
                ["TomBrady", "2016-01-13", 5.581049567418119]
              ]
            }
          },
          "x": {
            "anyOf": [
              {
                "properties": {
                  "columns": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array",
                    "title": "Columns"
                  },
                  "data": {
                    "items": {},
                    "type": "array",
                    "title": "Data"
                  }
                },
                "type": "object",
                "required": ["columns", "data"],
                "title": "MultiSeriesInput"
              },
              {
                "type": "null"
              }
            ],
            "description": "The exogenous  variables provided as a dictionary of two colums: columns and data. The columns contains the columns of the dataframe and data contains eaach data point. For example: {\"columns\": [\"unique_id\", \"ds\", \"ex_1\", \"ex_2\"], \"data\": [[\"ts_0\", \"2021-01-01\", 0.2, 0.67], [\"ts_0\", \"2021-01-02\", 0.4, 0.7]}. This should also include forecasting horizon (fh) additional timestamps for each unique_id to calculate the future values."
          },
          "clean_ex_first": {
            "type": "boolean",
            "title": "Clean Ex First",
            "description": "A boolean flag that indicates whether the API should preprocess (clean) the exogenous signal before applying the large time model. If True, the exogenous signal is cleaned; if False, the exogenous variables are applied after the large time model.",
            "default": true
          }
        },
        "type": "object",
        "title": "MultiSeriesAnomaly"
      },
      "MultiSeriesCrossValidation": {
        "properties": {
          "fewshot_steps": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Fewshot Steps",
            "description": "Deprecated. Please use finetune_steps instead.",
            "deprecated": true
          },
          "fewshot_loss": {
            "anyOf": [
              {
                "type": "string",
                "enum": ["default", "mae", "mse", "rmse", "mape", "smape"]
              },
              {
                "type": "null"
              }
            ],
            "title": "Fewshot Loss",
            "description": "Deprecated. Please use finetune_loss instead.",
            "deprecated": true
          },
          "model": {
            "title": "Model",
            "description": "Model to use as a string. Common options are (but not restricted to) `timegpt-1` and `timegpt-1-long-horizon.` Full options vary by different users. Contact ops@nixtla.io for more information. We recommend using `timegpt-1-long-horizon` for forecasting if you want to predict more than one seasonal period given the frequency of your data.",
            "default": "timegpt-1"
          },
          "freq": {
            "type": "string",
            "title": "Freq",
            "description": "The frequency of the data represented as a string. 'D' for daily, 'M' for monthly, 'H' for hourly, and 'W' for weekly frequencies are available.",
            "default": "D"
          },
          "level": {
            "anyOf": [
              {
                "items": {
                  "anyOf": [
                    {
                      "type": "integer"
                    },
                    {
                      "type": "number"
                    }
                  ]
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Level",
            "description": "A list of values representing the prediction intervals. Each value is a percentage that indicates the level of certainty for the corresponding prediction interval. For example, [80, 90] defines 80% and 90% prediction intervals."
          },
          "fh": {
            "type": "integer",
            "exclusiveMinimum": 0,
            "title": "Fh",
            "description": "The forecasting horizon. This represents the number of time steps into the future that the forecast should predict.",
            "default": 7
          },
          "y": {
            "title": "Y",
            "description": "The historical time series data provided as a dictionary of two colums: columns and data. The columns contains the columns of the dataframe and data contains eaach data point. For example: {\"columns\": [\"unique_id\", \"ds\", \"y\"], \"data\": [[\"ts_0\", \"2021-01-01\", 0.7], [\"ts_0\", \"2021-01-02\", 0.8]}.",
            "default": {
              "columns": ["unique_id", "ds", "y"],
              "data": [
                ["PeytonManning", "2015-12-02", 4.390508031418598],
                ["PeytonManning", "2015-12-03", 5.721514930979356],
                ["PeytonManning", "2015-12-04", 4.822107008573151],
                ["PeytonManning", "2015-12-05", 4.359065463975175],
                ["PeytonManning", "2015-12-06", 3.3892383947112377],
                ["PeytonManning", "2015-12-07", 5.167152904533249],
                ["PeytonManning", "2015-12-08", 3.50069769010154],
                ["PeytonManning", "2015-12-09", 7.134184006256638],
                ["PeytonManning", "2015-12-10", 7.709302084008234],
                ["PeytonManning", "2015-12-11", 3.0675321506062216],
                ["PeytonManning", "2015-12-12", 6.333800304661317],
                ["PeytonManning", "2015-12-13", 4.231159358023236],
                ["PeytonManning", "2015-12-14", 4.5443564887514585],
                ["PeytonManning", "2015-12-15", 7.404773106341288],
                ["PeytonManning", "2015-12-16", 0.5682884655830955],
                ["PeytonManning", "2015-12-17", 0.6970343976123257],
                ["PeytonManning", "2015-12-18", 0.16174717952260576],
                ["PeytonManning", "2015-12-19", 6.660958764383504],
                ["PeytonManning", "2015-12-20", 6.225254007598804],
                ["PeytonManning", "2015-12-21", 6.960097185974553],
                ["PeytonManning", "2015-12-22", 7.828946737862112],
                ["PeytonManning", "2015-12-23", 6.393268513733789],
                ["PeytonManning", "2015-12-24", 3.6918348980234548],
                ["PeytonManning", "2015-12-25", 6.244233410291644],
                ["PeytonManning", "2015-12-26", 0.9461954069514658],
                ["PeytonManning", "2015-12-27", 5.119368170620191],
                ["PeytonManning", "2015-12-28", 1.1468262992723712],
                ["PeytonManning", "2015-12-29", 7.557351336396671],
                ["PeytonManning", "2015-12-30", 4.174786574000573],
                ["PeytonManning", "2015-12-31", 3.3172955199241887],
                ["PeytonManning", "2016-01-01", 2.1164448968370158],
                ["PeytonManning", "2016-01-02", 6.193869515473733],
                ["PeytonManning", "2016-01-03", 3.6492026577323884],
                ["PeytonManning", "2016-01-04", 4.547471590949188],
                ["PeytonManning", "2016-01-05", 0.15031840349084113],
                ["PeytonManning", "2016-01-06", 4.9410839766070165],
                ["PeytonManning", "2016-01-07", 4.896765781779371],
                ["PeytonManning", "2016-01-08", 4.935471974998055],
                ["PeytonManning", "2016-01-09", 7.549984628116993],
                ["PeytonManning", "2016-01-10", 5.454562392827867],
                ["PeytonManning", "2016-01-11", 2.876063204590288],
                ["PeytonManning", "2016-01-12", 3.4962556303947316],
                ["PeytonManning", "2016-01-13", 5.581049567418119],
                ["TomBrady", "2015-12-02", 4.390508031418598],
                ["TomBrady", "2015-12-03", 5.721514930979356],
                ["TomBrady", "2015-12-04", 4.822107008573151],
                ["TomBrady", "2015-12-05", 4.359065463975175],
                ["TomBrady", "2015-12-06", 3.3892383947112377],
                ["TomBrady", "2015-12-07", 5.167152904533249],
                ["TomBrady", "2015-12-08", 3.50069769010154],
                ["TomBrady", "2015-12-09", 7.134184006256638],
                ["TomBrady", "2015-12-10", 7.709302084008234],
                ["TomBrady", "2015-12-11", 3.0675321506062216],
                ["TomBrady", "2015-12-12", 6.333800304661317],
                ["TomBrady", "2015-12-13", 4.231159358023236],
                ["TomBrady", "2015-12-14", 4.5443564887514585],
                ["TomBrady", "2015-12-15", 7.404773106341288],
                ["TomBrady", "2015-12-16", 0.5682884655830955],
                ["TomBrady", "2015-12-17", 0.6970343976123257],
                ["TomBrady", "2015-12-18", 0.16174717952260576],
                ["TomBrady", "2015-12-19", 6.660958764383504],
                ["TomBrady", "2015-12-20", 6.225254007598804],
                ["TomBrady", "2015-12-21", 6.960097185974553],
                ["TomBrady", "2015-12-22", 7.828946737862112],
                ["TomBrady", "2015-12-23", 6.393268513733789],
                ["TomBrady", "2015-12-24", 3.6918348980234548],
                ["TomBrady", "2015-12-25", 6.244233410291644],
                ["TomBrady", "2015-12-26", 0.9461954069514658],
                ["TomBrady", "2015-12-27", 5.119368170620191],
                ["TomBrady", "2015-12-28", 1.1468262992723712],
                ["TomBrady", "2015-12-29", 7.557351336396671],
                ["TomBrady", "2015-12-30", 4.174786574000573],
                ["TomBrady", "2015-12-31", 3.3172955199241887],
                ["TomBrady", "2016-01-01", 2.1164448968370158],
                ["TomBrady", "2016-01-02", 6.193869515473733],
                ["TomBrady", "2016-01-03", 3.6492026577323884],
                ["TomBrady", "2016-01-04", 4.547471590949188],
                ["TomBrady", "2016-01-05", 0.15031840349084113],
                ["TomBrady", "2016-01-06", 4.9410839766070165],
                ["TomBrady", "2016-01-07", 4.896765781779371],
                ["TomBrady", "2016-01-08", 4.935471974998055],
                ["TomBrady", "2016-01-09", 7.549984628116993],
                ["TomBrady", "2016-01-10", 5.454562392827867],
                ["TomBrady", "2016-01-11", 2.876063204590288],
                ["TomBrady", "2016-01-12", 3.4962556303947316],
                ["TomBrady", "2016-01-13", 5.581049567418119]
              ]
            }
          },
          "x": {
            "anyOf": [
              {
                "properties": {
                  "columns": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array",
                    "title": "Columns"
                  },
                  "data": {
                    "items": {},
                    "type": "array",
                    "title": "Data"
                  }
                },
                "type": "object",
                "required": ["columns", "data"],
                "title": "MultiSeriesInput"
              },
              {
                "type": "null"
              }
            ],
            "description": "The exogenous  variables provided as a dictionary of two colums: columns and data. The columns contains the columns of the dataframe and data contains eaach data point. For example: {\"columns\": [\"unique_id\", \"ds\", \"ex_1\", \"ex_2\"], \"data\": [[\"ts_0\", \"2021-01-01\", 0.2, 0.67], [\"ts_0\", \"2021-01-02\", 0.4, 0.7]}. This should also include forecasting horizon (fh) additional timestamps for each unique_id to calculate the future values."
          },
          "n_windows": {
            "type": "integer",
            "exclusiveMinimum": 0,
            "title": "N Windows",
            "description": "Number of windows to evaluate.",
            "default": 1
          },
          "step_size": {
            "anyOf": [
              {
                "type": "integer",
                "exclusiveMinimum": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Step Size",
            "description": "Step size between each cross validation window. If None it will be equal to the forecasting horizon."
          },
          "clean_ex_first": {
            "type": "boolean",
            "title": "Clean Ex First",
            "description": "A boolean flag that indicates whether the API should preprocess (clean) the exogenous signal before applying the large time model. If True, the exogenous signal is cleaned; if False, the exogenous variables are applied after the large time model.",
            "default": true
          },
          "finetune_steps": {
            "type": "integer",
            "minimum": 0,
            "title": "Finetune Steps",
            "description": "The number of tuning steps used to train the large time model on the data. Set this value to 0 for zero-shot inference, i.e., to make predictions without any further model tuning.",
            "default": 0
          },
          "finetune_loss": {
            "type": "string",
            "enum": ["default", "mae", "mse", "rmse", "mape", "smape"],
            "title": "Finetune Loss",
            "description": "The loss used to train the large time model on the data. Select from ['default', 'mae', 'mse', 'rmse', 'mape', 'smape']. It will only be used if finetune_steps larger than 0. Default is a robust loss function that is less sensitive to outliers.",
            "default": "default"
          }
        },
        "type": "object",
        "title": "MultiSeriesCrossValidation"
      },
      "MultiSeriesForecast": {
        "properties": {
          "fewshot_steps": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Fewshot Steps",
            "description": "Deprecated. Please use finetune_steps instead.",
            "deprecated": true
          },
          "fewshot_loss": {
            "anyOf": [
              {
                "type": "string",
                "enum": ["default", "mae", "mse", "rmse", "mape", "smape"]
              },
              {
                "type": "null"
              }
            ],
            "title": "Fewshot Loss",
            "description": "Deprecated. Please use finetune_loss instead.",
            "deprecated": true
          },
          "model": {
            "title": "Model",
            "description": "Model to use as a string. Common options are (but not restricted to) `timegpt-1` and `timegpt-1-long-horizon.` Full options vary by different users. Contact ops@nixtla.io for more information. We recommend using `timegpt-1-long-horizon` for forecasting if you want to predict more than one seasonal period given the frequency of your data.",
            "default": "timegpt-1"
          },
          "freq": {
            "type": "string",
            "title": "Freq",
            "description": "The frequency of the data represented as a string. 'D' for daily, 'M' for monthly, 'H' for hourly, and 'W' for weekly frequencies are available.",
            "default": "D"
          },
          "level": {
            "anyOf": [
              {
                "items": {
                  "anyOf": [
                    {
                      "type": "integer"
                    },
                    {
                      "type": "number"
                    }
                  ]
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Level",
            "description": "A list of values representing the prediction intervals. Each value is a percentage that indicates the level of certainty for the corresponding prediction interval. For example, [80, 90] defines 80% and 90% prediction intervals."
          },
          "fh": {
            "type": "integer",
            "exclusiveMinimum": 0,
            "title": "Fh",
            "description": "The forecasting horizon. This represents the number of time steps into the future that the forecast should predict.",
            "default": 7
          },
          "y": {
            "title": "Y",
            "description": "The historical time series data provided as a dictionary of two colums: columns and data. The columns contains the columns of the dataframe and data contains eaach data point. For example: {\"columns\": [\"unique_id\", \"ds\", \"y\"], \"data\": [[\"ts_0\", \"2021-01-01\", 0.7], [\"ts_0\", \"2021-01-02\", 0.8]}.",
            "default": {
              "columns": ["unique_id", "ds", "y"],
              "data": [
                ["PeytonManning", "2015-12-02", 4.390508031418598],
                ["PeytonManning", "2015-12-03", 5.721514930979356],
                ["PeytonManning", "2015-12-04", 4.822107008573151],
                ["PeytonManning", "2015-12-05", 4.359065463975175],
                ["PeytonManning", "2015-12-06", 3.3892383947112377],
                ["PeytonManning", "2015-12-07", 5.167152904533249],
                ["PeytonManning", "2015-12-08", 3.50069769010154],
                ["PeytonManning", "2015-12-09", 7.134184006256638],
                ["PeytonManning", "2015-12-10", 7.709302084008234],
                ["PeytonManning", "2015-12-11", 3.0675321506062216],
                ["PeytonManning", "2015-12-12", 6.333800304661317],
                ["PeytonManning", "2015-12-13", 4.231159358023236],
                ["PeytonManning", "2015-12-14", 4.5443564887514585],
                ["PeytonManning", "2015-12-15", 7.404773106341288],
                ["PeytonManning", "2015-12-16", 0.5682884655830955],
                ["PeytonManning", "2015-12-17", 0.6970343976123257],
                ["PeytonManning", "2015-12-18", 0.16174717952260576],
                ["PeytonManning", "2015-12-19", 6.660958764383504],
                ["PeytonManning", "2015-12-20", 6.225254007598804],
                ["PeytonManning", "2015-12-21", 6.960097185974553],
                ["PeytonManning", "2015-12-22", 7.828946737862112],
                ["PeytonManning", "2015-12-23", 6.393268513733789],
                ["PeytonManning", "2015-12-24", 3.6918348980234548],
                ["PeytonManning", "2015-12-25", 6.244233410291644],
                ["PeytonManning", "2015-12-26", 0.9461954069514658],
                ["PeytonManning", "2015-12-27", 5.119368170620191],
                ["PeytonManning", "2015-12-28", 1.1468262992723712],
                ["PeytonManning", "2015-12-29", 7.557351336396671],
                ["PeytonManning", "2015-12-30", 4.174786574000573],
                ["PeytonManning", "2015-12-31", 3.3172955199241887],
                ["PeytonManning", "2016-01-01", 2.1164448968370158],
                ["PeytonManning", "2016-01-02", 6.193869515473733],
                ["PeytonManning", "2016-01-03", 3.6492026577323884],
                ["PeytonManning", "2016-01-04", 4.547471590949188],
                ["PeytonManning", "2016-01-05", 0.15031840349084113],
                ["PeytonManning", "2016-01-06", 4.9410839766070165],
                ["PeytonManning", "2016-01-07", 4.896765781779371],
                ["PeytonManning", "2016-01-08", 4.935471974998055],
                ["PeytonManning", "2016-01-09", 7.549984628116993],
                ["PeytonManning", "2016-01-10", 5.454562392827867],
                ["PeytonManning", "2016-01-11", 2.876063204590288],
                ["PeytonManning", "2016-01-12", 3.4962556303947316],
                ["PeytonManning", "2016-01-13", 5.581049567418119],
                ["TomBrady", "2015-12-02", 4.390508031418598],
                ["TomBrady", "2015-12-03", 5.721514930979356],
                ["TomBrady", "2015-12-04", 4.822107008573151],
                ["TomBrady", "2015-12-05", 4.359065463975175],
                ["TomBrady", "2015-12-06", 3.3892383947112377],
                ["TomBrady", "2015-12-07", 5.167152904533249],
                ["TomBrady", "2015-12-08", 3.50069769010154],
                ["TomBrady", "2015-12-09", 7.134184006256638],
                ["TomBrady", "2015-12-10", 7.709302084008234],
                ["TomBrady", "2015-12-11", 3.0675321506062216],
                ["TomBrady", "2015-12-12", 6.333800304661317],
                ["TomBrady", "2015-12-13", 4.231159358023236],
                ["TomBrady", "2015-12-14", 4.5443564887514585],
                ["TomBrady", "2015-12-15", 7.404773106341288],
                ["TomBrady", "2015-12-16", 0.5682884655830955],
                ["TomBrady", "2015-12-17", 0.6970343976123257],
                ["TomBrady", "2015-12-18", 0.16174717952260576],
                ["TomBrady", "2015-12-19", 6.660958764383504],
                ["TomBrady", "2015-12-20", 6.225254007598804],
                ["TomBrady", "2015-12-21", 6.960097185974553],
                ["TomBrady", "2015-12-22", 7.828946737862112],
                ["TomBrady", "2015-12-23", 6.393268513733789],
                ["TomBrady", "2015-12-24", 3.6918348980234548],
                ["TomBrady", "2015-12-25", 6.244233410291644],
                ["TomBrady", "2015-12-26", 0.9461954069514658],
                ["TomBrady", "2015-12-27", 5.119368170620191],
                ["TomBrady", "2015-12-28", 1.1468262992723712],
                ["TomBrady", "2015-12-29", 7.557351336396671],
                ["TomBrady", "2015-12-30", 4.174786574000573],
                ["TomBrady", "2015-12-31", 3.3172955199241887],
                ["TomBrady", "2016-01-01", 2.1164448968370158],
                ["TomBrady", "2016-01-02", 6.193869515473733],
                ["TomBrady", "2016-01-03", 3.6492026577323884],
                ["TomBrady", "2016-01-04", 4.547471590949188],
                ["TomBrady", "2016-01-05", 0.15031840349084113],
                ["TomBrady", "2016-01-06", 4.9410839766070165],
                ["TomBrady", "2016-01-07", 4.896765781779371],
                ["TomBrady", "2016-01-08", 4.935471974998055],
                ["TomBrady", "2016-01-09", 7.549984628116993],
                ["TomBrady", "2016-01-10", 5.454562392827867],
                ["TomBrady", "2016-01-11", 2.876063204590288],
                ["TomBrady", "2016-01-12", 3.4962556303947316],
                ["TomBrady", "2016-01-13", 5.581049567418119]
              ]
            }
          },
          "x": {
            "anyOf": [
              {
                "properties": {
                  "columns": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array",
                    "title": "Columns"
                  },
                  "data": {
                    "items": {},
                    "type": "array",
                    "title": "Data"
                  }
                },
                "type": "object",
                "required": ["columns", "data"],
                "title": "MultiSeriesInput"
              },
              {
                "type": "null"
              }
            ],
            "description": "The exogenous  variables provided as a dictionary of two colums: columns and data. The columns contains the columns of the dataframe and data contains eaach data point. For example: {\"columns\": [\"unique_id\", \"ds\", \"ex_1\", \"ex_2\"], \"data\": [[\"ts_0\", \"2021-01-01\", 0.2, 0.67], [\"ts_0\", \"2021-01-02\", 0.4, 0.7]}. This should also include forecasting horizon (fh) additional timestamps for each unique_id to calculate the future values."
          },
          "clean_ex_first": {
            "type": "boolean",
            "title": "Clean Ex First",
            "description": "A boolean flag that indicates whether the API should preprocess (clean) the exogenous signal before applying the large time model. If True, the exogenous signal is cleaned; if False, the exogenous variables are applied after the large time model.",
            "default": true
          },
          "finetune_steps": {
            "type": "integer",
            "minimum": 0,
            "title": "Finetune Steps",
            "description": "The number of tuning steps used to train the large time model on the data. Set this value to 0 for zero-shot inference, i.e., to make predictions without any further model tuning.",
            "default": 0
          },
          "finetune_loss": {
            "type": "string",
            "enum": ["default", "mae", "mse", "rmse", "mape", "smape"],
            "title": "Finetune Loss",
            "description": "The loss used to train the large time model on the data. Select from ['default', 'mae', 'mse', 'rmse', 'mape', 'smape']. It will only be used if finetune_steps larger than 0. Default is a robust loss function that is less sensitive to outliers.",
            "default": "default"
          }
        },
        "type": "object",
        "title": "MultiSeriesForecast"
      },
      "MultiSeriesInput": {
        "properties": {
          "columns": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Columns"
          },
          "data": {
            "items": {},
            "type": "array",
            "title": "Data"
          }
        },
        "type": "object",
        "required": ["columns", "data"],
        "title": "MultiSeriesInput"
      },
      "MultiSeriesInsampleForecast": {
        "properties": {
          "model": {
            "title": "Model",
            "description": "Model to use as a string. Common options are (but not restricted to) `timegpt-1` and `timegpt-1-long-horizon.` Full options vary by different users. Contact ops@nixtla.io for more information. We recommend using `timegpt-1-long-horizon` for forecasting if you want to predict more than one seasonal period given the frequency of your data.",
            "default": "timegpt-1"
          },
          "freq": {
            "type": "string",
            "title": "Freq",
            "description": "The frequency of the data represented as a string. 'D' for daily, 'M' for monthly, 'H' for hourly, and 'W' for weekly frequencies are available.",
            "default": "D"
          },
          "level": {
            "anyOf": [
              {
                "items": {
                  "anyOf": [
                    {
                      "type": "integer"
                    },
                    {
                      "type": "number"
                    }
                  ]
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Level",
            "description": "A list of values representing the prediction intervals. Each value is a percentage that indicates the level of certainty for the corresponding prediction interval. For example, [80, 90] defines 80% and 90% prediction intervals."
          },
          "y": {
            "title": "Y",
            "description": "The historical time series data provided as a dictionary of two colums: columns and data. The columns contains the columns of the dataframe and data contains eaach data point. For example: {\"columns\": [\"unique_id\", \"ds\", \"y\"], \"data\": [[\"ts_0\", \"2021-01-01\", 0.7], [\"ts_0\", \"2021-01-02\", 0.8]}.",
            "default": {
              "columns": ["unique_id", "ds", "y"],
              "data": [
                ["PeytonManning", "2015-12-02", 4.390508031418598],
                ["PeytonManning", "2015-12-03", 5.721514930979356],
                ["PeytonManning", "2015-12-04", 4.822107008573151],
                ["PeytonManning", "2015-12-05", 4.359065463975175],
                ["PeytonManning", "2015-12-06", 3.3892383947112377],
                ["PeytonManning", "2015-12-07", 5.167152904533249],
                ["PeytonManning", "2015-12-08", 3.50069769010154],
                ["PeytonManning", "2015-12-09", 7.134184006256638],
                ["PeytonManning", "2015-12-10", 7.709302084008234],
                ["PeytonManning", "2015-12-11", 3.0675321506062216],
                ["PeytonManning", "2015-12-12", 6.333800304661317],
                ["PeytonManning", "2015-12-13", 4.231159358023236],
                ["PeytonManning", "2015-12-14", 4.5443564887514585],
                ["PeytonManning", "2015-12-15", 7.404773106341288],
                ["PeytonManning", "2015-12-16", 0.5682884655830955],
                ["PeytonManning", "2015-12-17", 0.6970343976123257],
                ["PeytonManning", "2015-12-18", 0.16174717952260576],
                ["PeytonManning", "2015-12-19", 6.660958764383504],
                ["PeytonManning", "2015-12-20", 6.225254007598804],
                ["PeytonManning", "2015-12-21", 6.960097185974553],
                ["PeytonManning", "2015-12-22", 7.828946737862112],
                ["PeytonManning", "2015-12-23", 6.393268513733789],
                ["PeytonManning", "2015-12-24", 3.6918348980234548],
                ["PeytonManning", "2015-12-25", 6.244233410291644],
                ["PeytonManning", "2015-12-26", 0.9461954069514658],
                ["PeytonManning", "2015-12-27", 5.119368170620191],
                ["PeytonManning", "2015-12-28", 1.1468262992723712],
                ["PeytonManning", "2015-12-29", 7.557351336396671],
                ["PeytonManning", "2015-12-30", 4.174786574000573],
                ["PeytonManning", "2015-12-31", 3.3172955199241887],
                ["PeytonManning", "2016-01-01", 2.1164448968370158],
                ["PeytonManning", "2016-01-02", 6.193869515473733],
                ["PeytonManning", "2016-01-03", 3.6492026577323884],
                ["PeytonManning", "2016-01-04", 4.547471590949188],
                ["PeytonManning", "2016-01-05", 0.15031840349084113],
                ["PeytonManning", "2016-01-06", 4.9410839766070165],
                ["PeytonManning", "2016-01-07", 4.896765781779371],
                ["PeytonManning", "2016-01-08", 4.935471974998055],
                ["PeytonManning", "2016-01-09", 7.549984628116993],
                ["PeytonManning", "2016-01-10", 5.454562392827867],
                ["PeytonManning", "2016-01-11", 2.876063204590288],
                ["PeytonManning", "2016-01-12", 3.4962556303947316],
                ["PeytonManning", "2016-01-13", 5.581049567418119],
                ["TomBrady", "2015-12-02", 4.390508031418598],
                ["TomBrady", "2015-12-03", 5.721514930979356],
                ["TomBrady", "2015-12-04", 4.822107008573151],
                ["TomBrady", "2015-12-05", 4.359065463975175],
                ["TomBrady", "2015-12-06", 3.3892383947112377],
                ["TomBrady", "2015-12-07", 5.167152904533249],
                ["TomBrady", "2015-12-08", 3.50069769010154],
                ["TomBrady", "2015-12-09", 7.134184006256638],
                ["TomBrady", "2015-12-10", 7.709302084008234],
                ["TomBrady", "2015-12-11", 3.0675321506062216],
                ["TomBrady", "2015-12-12", 6.333800304661317],
                ["TomBrady", "2015-12-13", 4.231159358023236],
                ["TomBrady", "2015-12-14", 4.5443564887514585],
                ["TomBrady", "2015-12-15", 7.404773106341288],
                ["TomBrady", "2015-12-16", 0.5682884655830955],
                ["TomBrady", "2015-12-17", 0.6970343976123257],
                ["TomBrady", "2015-12-18", 0.16174717952260576],
                ["TomBrady", "2015-12-19", 6.660958764383504],
                ["TomBrady", "2015-12-20", 6.225254007598804],
                ["TomBrady", "2015-12-21", 6.960097185974553],
                ["TomBrady", "2015-12-22", 7.828946737862112],
                ["TomBrady", "2015-12-23", 6.393268513733789],
                ["TomBrady", "2015-12-24", 3.6918348980234548],
                ["TomBrady", "2015-12-25", 6.244233410291644],
                ["TomBrady", "2015-12-26", 0.9461954069514658],
                ["TomBrady", "2015-12-27", 5.119368170620191],
                ["TomBrady", "2015-12-28", 1.1468262992723712],
                ["TomBrady", "2015-12-29", 7.557351336396671],
                ["TomBrady", "2015-12-30", 4.174786574000573],
                ["TomBrady", "2015-12-31", 3.3172955199241887],
                ["TomBrady", "2016-01-01", 2.1164448968370158],
                ["TomBrady", "2016-01-02", 6.193869515473733],
                ["TomBrady", "2016-01-03", 3.6492026577323884],
                ["TomBrady", "2016-01-04", 4.547471590949188],
                ["TomBrady", "2016-01-05", 0.15031840349084113],
                ["TomBrady", "2016-01-06", 4.9410839766070165],
                ["TomBrady", "2016-01-07", 4.896765781779371],
                ["TomBrady", "2016-01-08", 4.935471974998055],
                ["TomBrady", "2016-01-09", 7.549984628116993],
                ["TomBrady", "2016-01-10", 5.454562392827867],
                ["TomBrady", "2016-01-11", 2.876063204590288],
                ["TomBrady", "2016-01-12", 3.4962556303947316],
                ["TomBrady", "2016-01-13", 5.581049567418119]
              ]
            }
          },
          "x": {
            "anyOf": [
              {
                "properties": {
                  "columns": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array",
                    "title": "Columns"
                  },
                  "data": {
                    "items": {},
                    "type": "array",
                    "title": "Data"
                  }
                },
                "type": "object",
                "required": ["columns", "data"],
                "title": "MultiSeriesInput"
              },
              {
                "type": "null"
              }
            ],
            "description": "The exogenous  variables provided as a dictionary of two colums: columns and data. The columns contains the columns of the dataframe and data contains eaach data point. For example: {\"columns\": [\"unique_id\", \"ds\", \"ex_1\", \"ex_2\"], \"data\": [[\"ts_0\", \"2021-01-01\", 0.2, 0.67], [\"ts_0\", \"2021-01-02\", 0.4, 0.7]}. This should also include forecasting horizon (fh) additional timestamps for each unique_id to calculate the future values."
          },
          "clean_ex_first": {
            "type": "boolean",
            "title": "Clean Ex First",
            "description": "A boolean flag that indicates whether the API should preprocess (clean) the exogenous signal before applying the large time model. If True, the exogenous signal is cleaned; if False, the exogenous variables are applied after the large time model.",
            "default": true
          }
        },
        "type": "object",
        "title": "MultiSeriesInsampleForecast"
      },
      "OnlineAnomalyInput": {
        "properties": {
          "series": {
            "properties": {
              "X": {
                "anyOf": [
                  {
                    "items": {
                      "items": {
                        "type": "number"
                      },
                      "type": "array"
                    },
                    "type": "array"
                  },
                  {
                    "type": "null"
                  }
                ],
                "title": "X",
                "description": "Historic values of the exogenous features. Each feature must be a list of the same size as the target (y)."
              },
              "y": {
                "items": {
                  "type": "number"
                },
                "type": "array",
                "title": "Y",
                "description": "Historic values of the target."
              },
              "sizes": {
                "items": {
                  "type": "integer"
                },
                "type": "array",
                "title": "Sizes",
                "description": "Sizes of the individual series."
              }
            },
            "type": "object",
            "required": ["y", "sizes"],
            "title": "SeriesWithExogenous"
          },
          "freq": {
            "type": "string",
            "title": "Freq",
            "description": "The frequency of the data represented as a string. 'D' for daily, 'M' for monthly, 'H' for hourly, and 'W' for weekly frequencies are available."
          },
          "detection_size": {
            "type": "integer",
            "exclusiveMinimum": 0,
            "title": "Detection Size",
            "description": "Window over which to detect anomalies starting from the end of the series. This window is not considered when calculating the anomaly threshold to avoid bias from abnormal samples, unless there are less than 6 * detection_size forecasted samples."
          },
          "threshold_method": {
            "type": "string",
            "enum": ["univariate", "multivariate"],
            "title": "Threshold Method",
            "description": "The thresholding method to detect anomalies",
            "default": "univariate"
          },
          "h": {
            "type": "integer",
            "exclusiveMinimum": 0,
            "title": "H",
            "description": "The forecasting horizon. This represents the number of time steps into the future that the forecast should predict."
          },
          "model": {
            "title": "Model",
            "description": "Model to use as a string. Common options are (but not restricted to) `timegpt-1` and `timegpt-1-long-horizon.` Full options vary by different users. Contact ops@nixtla.io for more information. We recommend using `timegpt-1-long-horizon` for forecasting if you want to predict more than one seasonal period given the frequency of your data.",
            "default": "timegpt-1"
          },
          "clean_ex_first": {
            "type": "boolean",
            "title": "Clean Ex First",
            "description": "A boolean flag that indicates whether the API should preprocess (clean) the exogenous signal before applying the large time model. If True, the exogenous signal is cleaned; if False, the exogenous variables are applied after the large time model.",
            "default": true
          },
          "level": {
            "anyOf": [
              {
                "type": "integer",
                "exclusiveMaximum": 100,
                "minimum": 0
              },
              {
                "type": "number",
                "exclusiveMaximum": 100,
                "minimum": 0
              }
            ],
            "title": "Level",
            "description": "Specifies the confidence level for the prediction interval used in anomaly detection. It is represented as a percentage between 0 and 100. For instance, a level of 95 indicates that the generated prediction interval captures the true future observation 95% of the time. Any observed values outside of this interval would be considered anomalies. A higher level leads to wider prediction intervals and potentially fewer detected anomalies, whereas a lower level results in narrower intervals and potentially more detected anomalies. Default: 99.",
            "default": 99
          },
          "finetune_steps": {
            "type": "integer",
            "minimum": 0,
            "title": "Finetune Steps",
            "description": "The number of tuning steps used to train the large time model on the data. Set this value to 0 for zero-shot inference, i.e., to make predictions without any further model tuning.",
            "default": 0
          },
          "finetune_loss": {
            "type": "string",
            "enum": ["default", "mae", "mse", "rmse", "mape", "smape"],
            "title": "Finetune Loss",
            "description": "The loss used to train the large time model on the data. Select from ['default', 'mae', 'mse', 'rmse', 'mape', 'smape']. It will only be used if finetune_steps larger than 0. Default is a robust loss function that is less sensitive to outliers.",
            "default": "default"
          },
          "finetune_depth": {
            "type": "integer",
            "enum": [1, 2, 3, 4, 5],
            "title": "Finetune Depth",
            "description": "The depth of the finetuning. Uses a scale from 1 to 5, where 1 means little finetuning, and 5 means that the entire model is finetuned. By default, the value is set to 1.",
            "default": 1
          },
          "finetuned_model_id": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^[a-zA-Z0-9\\-_]{1,36}$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Finetuned Model Id",
            "description": "ID of previously finetuned model"
          },
          "step_size": {
            "anyOf": [
              {
                "type": "integer",
                "exclusiveMinimum": 0
              },
              {
                "type": "null"
              }
            ],
            "title": "Step Size",
            "description": "Step size between each cross validation window. If None it will be equal to the forecasting horizon."
          }
        },
        "type": "object",
        "required": ["series", "freq", "detection_size", "h"],
        "title": "OnlineAnomalyInput"
      },
      "OnlineAnomalyOutput": {
        "properties": {
          "input_tokens": {
            "type": "integer",
            "minimum": 0,
            "title": "Input Tokens"
          },
          "output_tokens": {
            "type": "integer",
            "minimum": 0,
            "title": "Output Tokens"
          },
          "finetune_tokens": {
            "type": "integer",
            "minimum": 0,
            "title": "Finetune Tokens"
          },
          "mean": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Mean"
          },
          "sizes": {
            "items": {
              "type": "integer"
            },
            "type": "array",
            "title": "Sizes"
          },
          "idxs": {
            "items": {
              "type": "integer"
            },
            "type": "array",
            "title": "Idxs"
          },
          "anomaly": {
            "items": {
              "type": "boolean"
            },
            "type": "array",
            "title": "Anomaly"
          },
          "anomaly_score": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Anomaly Score"
          },
          "accumulated_anomaly_score": {
            "anyOf": [
              {
                "items": {
                  "type": "number"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Accumulated Anomaly Score"
          },
          "intervals": {
            "anyOf": [
              {
                "additionalProperties": {
                  "items": {
                    "type": "number"
                  },
                  "type": "array"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Intervals"
          }
        },
        "type": "object",
        "required": [
          "input_tokens",
          "output_tokens",
          "finetune_tokens",
          "mean",
          "sizes",
          "idxs",
          "anomaly",
          "anomaly_score"
        ],
        "title": "OnlineAnomalyOutput"
      },
      "Series": {
        "properties": {
          "y": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Y",
            "description": "Historic values of the target."
          },
          "sizes": {
            "items": {
              "type": "integer"
            },
            "type": "array",
            "title": "Sizes",
            "description": "Sizes of the individual series."
          }
        },
        "type": "object",
        "required": ["y", "sizes"],
        "title": "Series"
      },
      "SeriesWithExogenous": {
        "properties": {
          "X": {
            "anyOf": [
              {
                "items": {
                  "items": {
                    "type": "number"
                  },
                  "type": "array"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "X",
            "description": "Historic values of the exogenous features. Each feature must be a list of the same size as the target (y)."
          },
          "y": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Y",
            "description": "Historic values of the target."
          },
          "sizes": {
            "items": {
              "type": "integer"
            },
            "type": "array",
            "title": "Sizes",
            "description": "Sizes of the individual series."
          }
        },
        "type": "object",
        "required": ["y", "sizes"],
        "title": "SeriesWithExogenous"
      },
      "SeriesWithFutureExogenous": {
        "properties": {
          "X_future": {
            "anyOf": [
              {
                "items": {
                  "items": {
                    "type": "number"
                  },
                  "type": "array"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "X Future",
            "description": "Future values of the exogenous features. Each feature must be a list of size number of series times the forecast horizon (h)."
          },
          "X": {
            "anyOf": [
              {
                "items": {
                  "items": {
                    "type": "number"
                  },
                  "type": "array"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "X",
            "description": "Historic values of the exogenous features. Each feature must be a list of the same size as the target (y)."
          },
          "y": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Y",
            "description": "Historic values of the target."
          },
          "sizes": {
            "items": {
              "type": "integer"
            },
            "type": "array",
            "title": "Sizes",
            "description": "Sizes of the individual series."
          }
        },
        "type": "object",
        "required": ["y", "sizes"],
        "title": "SeriesWithFutureExogenous"
      },
      "SingleSeriesForecast": {
        "properties": {
          "fewshot_steps": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Fewshot Steps",
            "description": "Deprecated. Please use finetune_steps instead.",
            "deprecated": true
          },
          "fewshot_loss": {
            "anyOf": [
              {
                "type": "string",
                "enum": ["default", "mae", "mse", "rmse", "mape", "smape"]
              },
              {
                "type": "null"
              }
            ],
            "title": "Fewshot Loss",
            "description": "Deprecated. Please use finetune_loss instead.",
            "deprecated": true
          },
          "model": {
            "title": "Model",
            "description": "Model to use as a string. Common options are (but not restricted to) `timegpt-1` and `timegpt-1-long-horizon.` Full options vary by different users. Contact ops@nixtla.io for more information. We recommend using `timegpt-1-long-horizon` for forecasting if you want to predict more than one seasonal period given the frequency of your data.",
            "default": "timegpt-1"
          },
          "freq": {
            "type": "string",
            "title": "Freq",
            "description": "The frequency of the data represented as a string. 'D' for daily, 'M' for monthly, 'H' for hourly, and 'W' for weekly frequencies are available.",
            "default": "D"
          },
          "level": {
            "anyOf": [
              {
                "items": {
                  "anyOf": [
                    {
                      "type": "integer"
                    },
                    {
                      "type": "number"
                    }
                  ]
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Level",
            "description": "A list of values representing the prediction intervals. Each value is a percentage that indicates the level of certainty for the corresponding prediction interval. For example, [80, 90] defines 80% and 90% prediction intervals."
          },
          "fh": {
            "type": "integer",
            "exclusiveMinimum": 0,
            "title": "Fh",
            "description": "The forecasting horizon. This represents the number of time steps into the future that the forecast should predict.",
            "default": 7
          },
          "y": {
            "title": "Y",
            "description": "The historical time series data provided as a dictionary. Each key is a timestamp (string format: YYYY-MM-DD) and the corresponding value is the observation at that time point. For example: {\"2021-01-01\": 0.1, \"2021-01-02\": 0.4}.",
            "default": {
              "2015-12-02": 4.390508031418598,
              "2015-12-03": 5.721514930979356,
              "2015-12-04": 4.822107008573151,
              "2015-12-05": 4.359065463975175,
              "2015-12-06": 3.3892383947112377,
              "2015-12-07": 5.167152904533249,
              "2015-12-08": 3.50069769010154,
              "2015-12-09": 7.134184006256638,
              "2015-12-10": 7.709302084008234,
              "2015-12-11": 3.0675321506062216,
              "2015-12-12": 6.333800304661317,
              "2015-12-13": 4.231159358023236,
              "2015-12-14": 4.5443564887514585,
              "2015-12-15": 7.404773106341288,
              "2015-12-16": 0.5682884655830955,
              "2015-12-17": 0.6970343976123257,
              "2015-12-18": 0.16174717952260576,
              "2015-12-19": 6.660958764383504,
              "2015-12-20": 6.225254007598804,
              "2015-12-21": 6.960097185974553,
              "2015-12-22": 7.828946737862112,
              "2015-12-23": 6.393268513733789,
              "2015-12-24": 3.6918348980234548,
              "2015-12-25": 6.244233410291644,
              "2015-12-26": 0.9461954069514658,
              "2015-12-27": 5.119368170620191,
              "2015-12-28": 1.1468262992723712,
              "2015-12-29": 7.557351336396671,
              "2015-12-30": 4.174786574000573,
              "2015-12-31": 3.3172955199241887,
              "2016-01-01": 2.1164448968370158,
              "2016-01-02": 6.193869515473733,
              "2016-01-03": 3.6492026577323884,
              "2016-01-04": 4.547471590949188,
              "2016-01-05": 0.15031840349084113,
              "2016-01-06": 4.9410839766070165,
              "2016-01-07": 4.896765781779371,
              "2016-01-08": 4.935471974998055,
              "2016-01-09": 7.549984628116993,
              "2016-01-10": 5.454562392827867,
              "2016-01-11": 2.876063204590288,
              "2016-01-12": 3.4962556303947316,
              "2016-01-13": 5.581049567418119
            }
          },
          "x": {
            "anyOf": [
              {
                "additionalProperties": {
                  "items": {
                    "type": "number"
                  },
                  "type": "array"
                },
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "X",
            "description": "The exogenous variables provided as a dictionary. Each key is a timestamp (string format: YYYY-MM-DD) and the corresponding value is a list of exogenous variable values at that time point. For example: {\"2021-01-01\": [0.1], \"2021-01-02\": [0.4]}. This should also include forecasting horizon (fh) additional timestamps to calculate the future values."
          },
          "clean_ex_first": {
            "type": "boolean",
            "title": "Clean Ex First",
            "description": "A boolean flag that indicates whether the API should preprocess (clean) the exogenous signal before applying the large time model. If True, the exogenous signal is cleaned; if False, the exogenous variables are applied after the large time model.",
            "default": true
          },
          "finetune_steps": {
            "type": "integer",
            "minimum": 0,
            "title": "Finetune Steps",
            "description": "The number of tuning steps used to train the large time model on the data. Set this value to 0 for zero-shot inference, i.e., to make predictions without any further model tuning.",
            "default": 0
          },
          "finetune_loss": {
            "type": "string",
            "enum": ["default", "mae", "mse", "rmse", "mape", "smape"],
            "title": "Finetune Loss",
            "description": "The loss used to train the large time model on the data. Select from ['default', 'mae', 'mse', 'rmse', 'mape', 'smape']. It will only be used if finetune_steps larger than 0. Default is a robust loss function that is less sensitive to outliers.",
            "default": "default"
          }
        },
        "type": "object",
        "title": "SingleSeriesForecast"
      },
      "SingleSeriesInsampleForecast": {
        "properties": {
          "model": {
            "title": "Model",
            "description": "Model to use as a string. Common options are (but not restricted to) `timegpt-1` and `timegpt-1-long-horizon.` Full options vary by different users. Contact ops@nixtla.io for more information. We recommend using `timegpt-1-long-horizon` for forecasting if you want to predict more than one seasonal period given the frequency of your data.",
            "default": "timegpt-1"
          },
          "freq": {
            "type": "string",
            "title": "Freq",
            "description": "The frequency of the data represented as a string. 'D' for daily, 'M' for monthly, 'H' for hourly, and 'W' for weekly frequencies are available.",
            "default": "D"
          },
          "level": {
            "anyOf": [
              {
                "items": {
                  "anyOf": [
                    {
                      "type": "integer"
                    },
                    {
                      "type": "number"
                    }
                  ]
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Level",
            "description": "A list of values representing the prediction intervals. Each value is a percentage that indicates the level of certainty for the corresponding prediction interval. For example, [80, 90] defines 80% and 90% prediction intervals."
          },
          "y": {
            "title": "Y",
            "description": "The historical time series data provided as a dictionary. Each key is a timestamp (string format: YYYY-MM-DD) and the corresponding value is the observation at that time point. For example: {\"2021-01-01\": 0.1, \"2021-01-02\": 0.4}.",
            "default": {
              "2015-12-02": 4.390508031418598,
              "2015-12-03": 5.721514930979356,
              "2015-12-04": 4.822107008573151,
              "2015-12-05": 4.359065463975175,
              "2015-12-06": 3.3892383947112377,
              "2015-12-07": 5.167152904533249,
              "2015-12-08": 3.50069769010154,
              "2015-12-09": 7.134184006256638,
              "2015-12-10": 7.709302084008234,
              "2015-12-11": 3.0675321506062216,
              "2015-12-12": 6.333800304661317,
              "2015-12-13": 4.231159358023236,
              "2015-12-14": 4.5443564887514585,
              "2015-12-15": 7.404773106341288,
              "2015-12-16": 0.5682884655830955,
              "2015-12-17": 0.6970343976123257,
              "2015-12-18": 0.16174717952260576,
              "2015-12-19": 6.660958764383504,
              "2015-12-20": 6.225254007598804,
              "2015-12-21": 6.960097185974553,
              "2015-12-22": 7.828946737862112,
              "2015-12-23": 6.393268513733789,
              "2015-12-24": 3.6918348980234548,
              "2015-12-25": 6.244233410291644,
              "2015-12-26": 0.9461954069514658,
              "2015-12-27": 5.119368170620191,
              "2015-12-28": 1.1468262992723712,
              "2015-12-29": 7.557351336396671,
              "2015-12-30": 4.174786574000573,
              "2015-12-31": 3.3172955199241887,
              "2016-01-01": 2.1164448968370158,
              "2016-01-02": 6.193869515473733,
              "2016-01-03": 3.6492026577323884,
              "2016-01-04": 4.547471590949188,
              "2016-01-05": 0.15031840349084113,
              "2016-01-06": 4.9410839766070165,
              "2016-01-07": 4.896765781779371,
              "2016-01-08": 4.935471974998055,
              "2016-01-09": 7.549984628116993,
              "2016-01-10": 5.454562392827867,
              "2016-01-11": 2.876063204590288,
              "2016-01-12": 3.4962556303947316,
              "2016-01-13": 5.581049567418119
            }
          },
          "x": {
            "title": "X",
            "description": "The exogenous variables provided as a dictionary. Each key is a timestamp (string format: YYYY-MM-DD) and the corresponding value is a list of exogenous variable values at that time point. For example: {\"2021-01-01\": [0.1], \"2021-01-02\": [0.4]}. This should also include forecasting horizon (fh) additional timestamps to calculate the future values."
          },
          "clean_ex_first": {
            "type": "boolean",
            "title": "Clean Ex First",
            "description": "A boolean flag that indicates whether the API should preprocess (clean) the exogenous signal before applying the large time model. If True, the exogenous signal is cleaned; if False, the exogenous variables are applied after the large time model.",
            "default": true
          }
        },
        "type": "object",
        "title": "SingleSeriesInsampleForecast"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": ["loc", "msg", "type"],
        "title": "ValidationError"
      }
    },
    "securitySchemes": {
      "HTTPBearer": {
        "type": "http",
        "description": "HTTPBearer",
        "scheme": "bearer"
      }
    }
  }
}
